/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./node_modules/base64-js/index.js":
/*!*****************************************!*\
  !*** ./node_modules/base64-js/index.js ***!
  \*****************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";


exports.byteLength = byteLength
exports.toByteArray = toByteArray
exports.fromByteArray = fromByteArray

var lookup = []
var revLookup = []
var Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array

var code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'
for (var i = 0, len = code.length; i < len; ++i) {
  lookup[i] = code[i]
  revLookup[code.charCodeAt(i)] = i
}

// Support decoding URL-safe base64 strings, as Node.js does.
// See: https://en.wikipedia.org/wiki/Base64#URL_applications
revLookup['-'.charCodeAt(0)] = 62
revLookup['_'.charCodeAt(0)] = 63

function getLens (b64) {
  var len = b64.length

  if (len % 4 > 0) {
    throw new Error('Invalid string. Length must be a multiple of 4')
  }

  // Trim off extra bytes after placeholder bytes are found
  // See: https://github.com/beatgammit/base64-js/issues/42
  var validLen = b64.indexOf('=')
  if (validLen === -1) validLen = len

  var placeHoldersLen = validLen === len
    ? 0
    : 4 - (validLen % 4)

  return [validLen, placeHoldersLen]
}

// base64 is 4/3 + up to two characters of the original data
function byteLength (b64) {
  var lens = getLens(b64)
  var validLen = lens[0]
  var placeHoldersLen = lens[1]
  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen
}

function _byteLength (b64, validLen, placeHoldersLen) {
  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen
}

function toByteArray (b64) {
  var tmp
  var lens = getLens(b64)
  var validLen = lens[0]
  var placeHoldersLen = lens[1]

  var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen))

  var curByte = 0

  // if there are placeholders, only get up to the last complete 4 chars
  var len = placeHoldersLen > 0
    ? validLen - 4
    : validLen

  var i
  for (i = 0; i < len; i += 4) {
    tmp =
      (revLookup[b64.charCodeAt(i)] << 18) |
      (revLookup[b64.charCodeAt(i + 1)] << 12) |
      (revLookup[b64.charCodeAt(i + 2)] << 6) |
      revLookup[b64.charCodeAt(i + 3)]
    arr[curByte++] = (tmp >> 16) & 0xFF
    arr[curByte++] = (tmp >> 8) & 0xFF
    arr[curByte++] = tmp & 0xFF
  }

  if (placeHoldersLen === 2) {
    tmp =
      (revLookup[b64.charCodeAt(i)] << 2) |
      (revLookup[b64.charCodeAt(i + 1)] >> 4)
    arr[curByte++] = tmp & 0xFF
  }

  if (placeHoldersLen === 1) {
    tmp =
      (revLookup[b64.charCodeAt(i)] << 10) |
      (revLookup[b64.charCodeAt(i + 1)] << 4) |
      (revLookup[b64.charCodeAt(i + 2)] >> 2)
    arr[curByte++] = (tmp >> 8) & 0xFF
    arr[curByte++] = tmp & 0xFF
  }

  return arr
}

function tripletToBase64 (num) {
  return lookup[num >> 18 & 0x3F] +
    lookup[num >> 12 & 0x3F] +
    lookup[num >> 6 & 0x3F] +
    lookup[num & 0x3F]
}

function encodeChunk (uint8, start, end) {
  var tmp
  var output = []
  for (var i = start; i < end; i += 3) {
    tmp =
      ((uint8[i] << 16) & 0xFF0000) +
      ((uint8[i + 1] << 8) & 0xFF00) +
      (uint8[i + 2] & 0xFF)
    output.push(tripletToBase64(tmp))
  }
  return output.join('')
}

function fromByteArray (uint8) {
  var tmp
  var len = uint8.length
  var extraBytes = len % 3 // if we have 1 byte left, pad 2 bytes
  var parts = []
  var maxChunkLength = 16383 // must be multiple of 3

  // go through the array every three bytes, we'll deal with trailing stuff later
  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {
    parts.push(encodeChunk(uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)))
  }

  // pad the end with zeros, but make sure to not forget the extra bytes
  if (extraBytes === 1) {
    tmp = uint8[len - 1]
    parts.push(
      lookup[tmp >> 2] +
      lookup[(tmp << 4) & 0x3F] +
      '=='
    )
  } else if (extraBytes === 2) {
    tmp = (uint8[len - 2] << 8) + uint8[len - 1]
    parts.push(
      lookup[tmp >> 10] +
      lookup[(tmp >> 4) & 0x3F] +
      lookup[(tmp << 2) & 0x3F] +
      '='
    )
  }

  return parts.join('')
}


/***/ }),

/***/ "./node_modules/buffer/index.js":
/*!**************************************!*\
  !*** ./node_modules/buffer/index.js ***!
  \**************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
/*!
 * The buffer module from node.js, for the browser.
 *
 * @author   Feross Aboukhadijeh <https://feross.org>
 * @license  MIT
 */
/* eslint-disable no-proto */



const base64 = __webpack_require__(/*! base64-js */ "./node_modules/base64-js/index.js")
const ieee754 = __webpack_require__(/*! ieee754 */ "./node_modules/ieee754/index.js")
const customInspectSymbol =
  (typeof Symbol === 'function' && typeof Symbol['for'] === 'function') // eslint-disable-line dot-notation
    ? Symbol['for']('nodejs.util.inspect.custom') // eslint-disable-line dot-notation
    : null

exports.Buffer = Buffer
exports.SlowBuffer = SlowBuffer
exports.INSPECT_MAX_BYTES = 50

const K_MAX_LENGTH = 0x7fffffff
exports.kMaxLength = K_MAX_LENGTH

/**
 * If `Buffer.TYPED_ARRAY_SUPPORT`:
 *   === true    Use Uint8Array implementation (fastest)
 *   === false   Print warning and recommend using `buffer` v4.x which has an Object
 *               implementation (most compatible, even IE6)
 *
 * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,
 * Opera 11.6+, iOS 4.2+.
 *
 * We report that the browser does not support typed arrays if the are not subclassable
 * using __proto__. Firefox 4-29 lacks support for adding new properties to `Uint8Array`
 * (See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438). IE 10 lacks support
 * for __proto__ and has a buggy typed array implementation.
 */
Buffer.TYPED_ARRAY_SUPPORT = typedArraySupport()

if (!Buffer.TYPED_ARRAY_SUPPORT && typeof console !== 'undefined' &&
    typeof console.error === 'function') {
  console.error(
    'This browser lacks typed array (Uint8Array) support which is required by ' +
    '`buffer` v5.x. Use `buffer` v4.x if you require old browser support.'
  )
}

function typedArraySupport () {
  // Can typed array instances can be augmented?
  try {
    const arr = new Uint8Array(1)
    const proto = { foo: function () { return 42 } }
    Object.setPrototypeOf(proto, Uint8Array.prototype)
    Object.setPrototypeOf(arr, proto)
    return arr.foo() === 42
  } catch (e) {
    return false
  }
}

Object.defineProperty(Buffer.prototype, 'parent', {
  enumerable: true,
  get: function () {
    if (!Buffer.isBuffer(this)) return undefined
    return this.buffer
  }
})

Object.defineProperty(Buffer.prototype, 'offset', {
  enumerable: true,
  get: function () {
    if (!Buffer.isBuffer(this)) return undefined
    return this.byteOffset
  }
})

function createBuffer (length) {
  if (length > K_MAX_LENGTH) {
    throw new RangeError('The value "' + length + '" is invalid for option "size"')
  }
  // Return an augmented `Uint8Array` instance
  const buf = new Uint8Array(length)
  Object.setPrototypeOf(buf, Buffer.prototype)
  return buf
}

/**
 * The Buffer constructor returns instances of `Uint8Array` that have their
 * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of
 * `Uint8Array`, so the returned instances will have all the node `Buffer` methods
 * and the `Uint8Array` methods. Square bracket notation works as expected -- it
 * returns a single octet.
 *
 * The `Uint8Array` prototype remains unmodified.
 */

function Buffer (arg, encodingOrOffset, length) {
  // Common case.
  if (typeof arg === 'number') {
    if (typeof encodingOrOffset === 'string') {
      throw new TypeError(
        'The "string" argument must be of type string. Received type number'
      )
    }
    return allocUnsafe(arg)
  }
  return from(arg, encodingOrOffset, length)
}

Buffer.poolSize = 8192 // not used by this implementation

function from (value, encodingOrOffset, length) {
  if (typeof value === 'string') {
    return fromString(value, encodingOrOffset)
  }

  if (ArrayBuffer.isView(value)) {
    return fromArrayView(value)
  }

  if (value == null) {
    throw new TypeError(
      'The first argument must be one of type string, Buffer, ArrayBuffer, Array, ' +
      'or Array-like Object. Received type ' + (typeof value)
    )
  }

  if (isInstance(value, ArrayBuffer) ||
      (value && isInstance(value.buffer, ArrayBuffer))) {
    return fromArrayBuffer(value, encodingOrOffset, length)
  }

  if (typeof SharedArrayBuffer !== 'undefined' &&
      (isInstance(value, SharedArrayBuffer) ||
      (value && isInstance(value.buffer, SharedArrayBuffer)))) {
    return fromArrayBuffer(value, encodingOrOffset, length)
  }

  if (typeof value === 'number') {
    throw new TypeError(
      'The "value" argument must not be of type number. Received type number'
    )
  }

  const valueOf = value.valueOf && value.valueOf()
  if (valueOf != null && valueOf !== value) {
    return Buffer.from(valueOf, encodingOrOffset, length)
  }

  const b = fromObject(value)
  if (b) return b

  if (typeof Symbol !== 'undefined' && Symbol.toPrimitive != null &&
      typeof value[Symbol.toPrimitive] === 'function') {
    return Buffer.from(value[Symbol.toPrimitive]('string'), encodingOrOffset, length)
  }

  throw new TypeError(
    'The first argument must be one of type string, Buffer, ArrayBuffer, Array, ' +
    'or Array-like Object. Received type ' + (typeof value)
  )
}

/**
 * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError
 * if value is a number.
 * Buffer.from(str[, encoding])
 * Buffer.from(array)
 * Buffer.from(buffer)
 * Buffer.from(arrayBuffer[, byteOffset[, length]])
 **/
Buffer.from = function (value, encodingOrOffset, length) {
  return from(value, encodingOrOffset, length)
}

// Note: Change prototype *after* Buffer.from is defined to workaround Chrome bug:
// https://github.com/feross/buffer/pull/148
Object.setPrototypeOf(Buffer.prototype, Uint8Array.prototype)
Object.setPrototypeOf(Buffer, Uint8Array)

function assertSize (size) {
  if (typeof size !== 'number') {
    throw new TypeError('"size" argument must be of type number')
  } else if (size < 0) {
    throw new RangeError('The value "' + size + '" is invalid for option "size"')
  }
}

function alloc (size, fill, encoding) {
  assertSize(size)
  if (size <= 0) {
    return createBuffer(size)
  }
  if (fill !== undefined) {
    // Only pay attention to encoding if it's a string. This
    // prevents accidentally sending in a number that would
    // be interpreted as a start offset.
    return typeof encoding === 'string'
      ? createBuffer(size).fill(fill, encoding)
      : createBuffer(size).fill(fill)
  }
  return createBuffer(size)
}

/**
 * Creates a new filled Buffer instance.
 * alloc(size[, fill[, encoding]])
 **/
Buffer.alloc = function (size, fill, encoding) {
  return alloc(size, fill, encoding)
}

function allocUnsafe (size) {
  assertSize(size)
  return createBuffer(size < 0 ? 0 : checked(size) | 0)
}

/**
 * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.
 * */
Buffer.allocUnsafe = function (size) {
  return allocUnsafe(size)
}
/**
 * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.
 */
Buffer.allocUnsafeSlow = function (size) {
  return allocUnsafe(size)
}

function fromString (string, encoding) {
  if (typeof encoding !== 'string' || encoding === '') {
    encoding = 'utf8'
  }

  if (!Buffer.isEncoding(encoding)) {
    throw new TypeError('Unknown encoding: ' + encoding)
  }

  const length = byteLength(string, encoding) | 0
  let buf = createBuffer(length)

  const actual = buf.write(string, encoding)

  if (actual !== length) {
    // Writing a hex string, for example, that contains invalid characters will
    // cause everything after the first invalid character to be ignored. (e.g.
    // 'abxxcd' will be treated as 'ab')
    buf = buf.slice(0, actual)
  }

  return buf
}

function fromArrayLike (array) {
  const length = array.length < 0 ? 0 : checked(array.length) | 0
  const buf = createBuffer(length)
  for (let i = 0; i < length; i += 1) {
    buf[i] = array[i] & 255
  }
  return buf
}

function fromArrayView (arrayView) {
  if (isInstance(arrayView, Uint8Array)) {
    const copy = new Uint8Array(arrayView)
    return fromArrayBuffer(copy.buffer, copy.byteOffset, copy.byteLength)
  }
  return fromArrayLike(arrayView)
}

function fromArrayBuffer (array, byteOffset, length) {
  if (byteOffset < 0 || array.byteLength < byteOffset) {
    throw new RangeError('"offset" is outside of buffer bounds')
  }

  if (array.byteLength < byteOffset + (length || 0)) {
    throw new RangeError('"length" is outside of buffer bounds')
  }

  let buf
  if (byteOffset === undefined && length === undefined) {
    buf = new Uint8Array(array)
  } else if (length === undefined) {
    buf = new Uint8Array(array, byteOffset)
  } else {
    buf = new Uint8Array(array, byteOffset, length)
  }

  // Return an augmented `Uint8Array` instance
  Object.setPrototypeOf(buf, Buffer.prototype)

  return buf
}

function fromObject (obj) {
  if (Buffer.isBuffer(obj)) {
    const len = checked(obj.length) | 0
    const buf = createBuffer(len)

    if (buf.length === 0) {
      return buf
    }

    obj.copy(buf, 0, 0, len)
    return buf
  }

  if (obj.length !== undefined) {
    if (typeof obj.length !== 'number' || numberIsNaN(obj.length)) {
      return createBuffer(0)
    }
    return fromArrayLike(obj)
  }

  if (obj.type === 'Buffer' && Array.isArray(obj.data)) {
    return fromArrayLike(obj.data)
  }
}

function checked (length) {
  // Note: cannot use `length < K_MAX_LENGTH` here because that fails when
  // length is NaN (which is otherwise coerced to zero.)
  if (length >= K_MAX_LENGTH) {
    throw new RangeError('Attempt to allocate Buffer larger than maximum ' +
                         'size: 0x' + K_MAX_LENGTH.toString(16) + ' bytes')
  }
  return length | 0
}

function SlowBuffer (length) {
  if (+length != length) { // eslint-disable-line eqeqeq
    length = 0
  }
  return Buffer.alloc(+length)
}

Buffer.isBuffer = function isBuffer (b) {
  return b != null && b._isBuffer === true &&
    b !== Buffer.prototype // so Buffer.isBuffer(Buffer.prototype) will be false
}

Buffer.compare = function compare (a, b) {
  if (isInstance(a, Uint8Array)) a = Buffer.from(a, a.offset, a.byteLength)
  if (isInstance(b, Uint8Array)) b = Buffer.from(b, b.offset, b.byteLength)
  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {
    throw new TypeError(
      'The "buf1", "buf2" arguments must be one of type Buffer or Uint8Array'
    )
  }

  if (a === b) return 0

  let x = a.length
  let y = b.length

  for (let i = 0, len = Math.min(x, y); i < len; ++i) {
    if (a[i] !== b[i]) {
      x = a[i]
      y = b[i]
      break
    }
  }

  if (x < y) return -1
  if (y < x) return 1
  return 0
}

Buffer.isEncoding = function isEncoding (encoding) {
  switch (String(encoding).toLowerCase()) {
    case 'hex':
    case 'utf8':
    case 'utf-8':
    case 'ascii':
    case 'latin1':
    case 'binary':
    case 'base64':
    case 'ucs2':
    case 'ucs-2':
    case 'utf16le':
    case 'utf-16le':
      return true
    default:
      return false
  }
}

Buffer.concat = function concat (list, length) {
  if (!Array.isArray(list)) {
    throw new TypeError('"list" argument must be an Array of Buffers')
  }

  if (list.length === 0) {
    return Buffer.alloc(0)
  }

  let i
  if (length === undefined) {
    length = 0
    for (i = 0; i < list.length; ++i) {
      length += list[i].length
    }
  }

  const buffer = Buffer.allocUnsafe(length)
  let pos = 0
  for (i = 0; i < list.length; ++i) {
    let buf = list[i]
    if (isInstance(buf, Uint8Array)) {
      if (pos + buf.length > buffer.length) {
        if (!Buffer.isBuffer(buf)) buf = Buffer.from(buf)
        buf.copy(buffer, pos)
      } else {
        Uint8Array.prototype.set.call(
          buffer,
          buf,
          pos
        )
      }
    } else if (!Buffer.isBuffer(buf)) {
      throw new TypeError('"list" argument must be an Array of Buffers')
    } else {
      buf.copy(buffer, pos)
    }
    pos += buf.length
  }
  return buffer
}

function byteLength (string, encoding) {
  if (Buffer.isBuffer(string)) {
    return string.length
  }
  if (ArrayBuffer.isView(string) || isInstance(string, ArrayBuffer)) {
    return string.byteLength
  }
  if (typeof string !== 'string') {
    throw new TypeError(
      'The "string" argument must be one of type string, Buffer, or ArrayBuffer. ' +
      'Received type ' + typeof string
    )
  }

  const len = string.length
  const mustMatch = (arguments.length > 2 && arguments[2] === true)
  if (!mustMatch && len === 0) return 0

  // Use a for loop to avoid recursion
  let loweredCase = false
  for (;;) {
    switch (encoding) {
      case 'ascii':
      case 'latin1':
      case 'binary':
        return len
      case 'utf8':
      case 'utf-8':
        return utf8ToBytes(string).length
      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return len * 2
      case 'hex':
        return len >>> 1
      case 'base64':
        return base64ToBytes(string).length
      default:
        if (loweredCase) {
          return mustMatch ? -1 : utf8ToBytes(string).length // assume utf8
        }
        encoding = ('' + encoding).toLowerCase()
        loweredCase = true
    }
  }
}
Buffer.byteLength = byteLength

function slowToString (encoding, start, end) {
  let loweredCase = false

  // No need to verify that "this.length <= MAX_UINT32" since it's a read-only
  // property of a typed array.

  // This behaves neither like String nor Uint8Array in that we set start/end
  // to their upper/lower bounds if the value passed is out of range.
  // undefined is handled specially as per ECMA-262 6th Edition,
  // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.
  if (start === undefined || start < 0) {
    start = 0
  }
  // Return early if start > this.length. Done here to prevent potential uint32
  // coercion fail below.
  if (start > this.length) {
    return ''
  }

  if (end === undefined || end > this.length) {
    end = this.length
  }

  if (end <= 0) {
    return ''
  }

  // Force coercion to uint32. This will also coerce falsey/NaN values to 0.
  end >>>= 0
  start >>>= 0

  if (end <= start) {
    return ''
  }

  if (!encoding) encoding = 'utf8'

  while (true) {
    switch (encoding) {
      case 'hex':
        return hexSlice(this, start, end)

      case 'utf8':
      case 'utf-8':
        return utf8Slice(this, start, end)

      case 'ascii':
        return asciiSlice(this, start, end)

      case 'latin1':
      case 'binary':
        return latin1Slice(this, start, end)

      case 'base64':
        return base64Slice(this, start, end)

      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return utf16leSlice(this, start, end)

      default:
        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
        encoding = (encoding + '').toLowerCase()
        loweredCase = true
    }
  }
}

// This property is used by `Buffer.isBuffer` (and the `is-buffer` npm package)
// to detect a Buffer instance. It's not possible to use `instanceof Buffer`
// reliably in a browserify context because there could be multiple different
// copies of the 'buffer' package in use. This method works even for Buffer
// instances that were created from another copy of the `buffer` package.
// See: https://github.com/feross/buffer/issues/154
Buffer.prototype._isBuffer = true

function swap (b, n, m) {
  const i = b[n]
  b[n] = b[m]
  b[m] = i
}

Buffer.prototype.swap16 = function swap16 () {
  const len = this.length
  if (len % 2 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 16-bits')
  }
  for (let i = 0; i < len; i += 2) {
    swap(this, i, i + 1)
  }
  return this
}

Buffer.prototype.swap32 = function swap32 () {
  const len = this.length
  if (len % 4 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 32-bits')
  }
  for (let i = 0; i < len; i += 4) {
    swap(this, i, i + 3)
    swap(this, i + 1, i + 2)
  }
  return this
}

Buffer.prototype.swap64 = function swap64 () {
  const len = this.length
  if (len % 8 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 64-bits')
  }
  for (let i = 0; i < len; i += 8) {
    swap(this, i, i + 7)
    swap(this, i + 1, i + 6)
    swap(this, i + 2, i + 5)
    swap(this, i + 3, i + 4)
  }
  return this
}

Buffer.prototype.toString = function toString () {
  const length = this.length
  if (length === 0) return ''
  if (arguments.length === 0) return utf8Slice(this, 0, length)
  return slowToString.apply(this, arguments)
}

Buffer.prototype.toLocaleString = Buffer.prototype.toString

Buffer.prototype.equals = function equals (b) {
  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')
  if (this === b) return true
  return Buffer.compare(this, b) === 0
}

Buffer.prototype.inspect = function inspect () {
  let str = ''
  const max = exports.INSPECT_MAX_BYTES
  str = this.toString('hex', 0, max).replace(/(.{2})/g, '$1 ').trim()
  if (this.length > max) str += ' ... '
  return '<Buffer ' + str + '>'
}
if (customInspectSymbol) {
  Buffer.prototype[customInspectSymbol] = Buffer.prototype.inspect
}

Buffer.prototype.compare = function compare (target, start, end, thisStart, thisEnd) {
  if (isInstance(target, Uint8Array)) {
    target = Buffer.from(target, target.offset, target.byteLength)
  }
  if (!Buffer.isBuffer(target)) {
    throw new TypeError(
      'The "target" argument must be one of type Buffer or Uint8Array. ' +
      'Received type ' + (typeof target)
    )
  }

  if (start === undefined) {
    start = 0
  }
  if (end === undefined) {
    end = target ? target.length : 0
  }
  if (thisStart === undefined) {
    thisStart = 0
  }
  if (thisEnd === undefined) {
    thisEnd = this.length
  }

  if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {
    throw new RangeError('out of range index')
  }

  if (thisStart >= thisEnd && start >= end) {
    return 0
  }
  if (thisStart >= thisEnd) {
    return -1
  }
  if (start >= end) {
    return 1
  }

  start >>>= 0
  end >>>= 0
  thisStart >>>= 0
  thisEnd >>>= 0

  if (this === target) return 0

  let x = thisEnd - thisStart
  let y = end - start
  const len = Math.min(x, y)

  const thisCopy = this.slice(thisStart, thisEnd)
  const targetCopy = target.slice(start, end)

  for (let i = 0; i < len; ++i) {
    if (thisCopy[i] !== targetCopy[i]) {
      x = thisCopy[i]
      y = targetCopy[i]
      break
    }
  }

  if (x < y) return -1
  if (y < x) return 1
  return 0
}

// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,
// OR the last index of `val` in `buffer` at offset <= `byteOffset`.
//
// Arguments:
// - buffer - a Buffer to search
// - val - a string, Buffer, or number
// - byteOffset - an index into `buffer`; will be clamped to an int32
// - encoding - an optional encoding, relevant is val is a string
// - dir - true for indexOf, false for lastIndexOf
function bidirectionalIndexOf (buffer, val, byteOffset, encoding, dir) {
  // Empty buffer means no match
  if (buffer.length === 0) return -1

  // Normalize byteOffset
  if (typeof byteOffset === 'string') {
    encoding = byteOffset
    byteOffset = 0
  } else if (byteOffset > 0x7fffffff) {
    byteOffset = 0x7fffffff
  } else if (byteOffset < -0x80000000) {
    byteOffset = -0x80000000
  }
  byteOffset = +byteOffset // Coerce to Number.
  if (numberIsNaN(byteOffset)) {
    // byteOffset: it it's undefined, null, NaN, "foo", etc, search whole buffer
    byteOffset = dir ? 0 : (buffer.length - 1)
  }

  // Normalize byteOffset: negative offsets start from the end of the buffer
  if (byteOffset < 0) byteOffset = buffer.length + byteOffset
  if (byteOffset >= buffer.length) {
    if (dir) return -1
    else byteOffset = buffer.length - 1
  } else if (byteOffset < 0) {
    if (dir) byteOffset = 0
    else return -1
  }

  // Normalize val
  if (typeof val === 'string') {
    val = Buffer.from(val, encoding)
  }

  // Finally, search either indexOf (if dir is true) or lastIndexOf
  if (Buffer.isBuffer(val)) {
    // Special case: looking for empty string/buffer always fails
    if (val.length === 0) {
      return -1
    }
    return arrayIndexOf(buffer, val, byteOffset, encoding, dir)
  } else if (typeof val === 'number') {
    val = val & 0xFF // Search for a byte value [0-255]
    if (typeof Uint8Array.prototype.indexOf === 'function') {
      if (dir) {
        return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset)
      } else {
        return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset)
      }
    }
    return arrayIndexOf(buffer, [val], byteOffset, encoding, dir)
  }

  throw new TypeError('val must be string, number or Buffer')
}

function arrayIndexOf (arr, val, byteOffset, encoding, dir) {
  let indexSize = 1
  let arrLength = arr.length
  let valLength = val.length

  if (encoding !== undefined) {
    encoding = String(encoding).toLowerCase()
    if (encoding === 'ucs2' || encoding === 'ucs-2' ||
        encoding === 'utf16le' || encoding === 'utf-16le') {
      if (arr.length < 2 || val.length < 2) {
        return -1
      }
      indexSize = 2
      arrLength /= 2
      valLength /= 2
      byteOffset /= 2
    }
  }

  function read (buf, i) {
    if (indexSize === 1) {
      return buf[i]
    } else {
      return buf.readUInt16BE(i * indexSize)
    }
  }

  let i
  if (dir) {
    let foundIndex = -1
    for (i = byteOffset; i < arrLength; i++) {
      if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {
        if (foundIndex === -1) foundIndex = i
        if (i - foundIndex + 1 === valLength) return foundIndex * indexSize
      } else {
        if (foundIndex !== -1) i -= i - foundIndex
        foundIndex = -1
      }
    }
  } else {
    if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength
    for (i = byteOffset; i >= 0; i--) {
      let found = true
      for (let j = 0; j < valLength; j++) {
        if (read(arr, i + j) !== read(val, j)) {
          found = false
          break
        }
      }
      if (found) return i
    }
  }

  return -1
}

Buffer.prototype.includes = function includes (val, byteOffset, encoding) {
  return this.indexOf(val, byteOffset, encoding) !== -1
}

Buffer.prototype.indexOf = function indexOf (val, byteOffset, encoding) {
  return bidirectionalIndexOf(this, val, byteOffset, encoding, true)
}

Buffer.prototype.lastIndexOf = function lastIndexOf (val, byteOffset, encoding) {
  return bidirectionalIndexOf(this, val, byteOffset, encoding, false)
}

function hexWrite (buf, string, offset, length) {
  offset = Number(offset) || 0
  const remaining = buf.length - offset
  if (!length) {
    length = remaining
  } else {
    length = Number(length)
    if (length > remaining) {
      length = remaining
    }
  }

  const strLen = string.length

  if (length > strLen / 2) {
    length = strLen / 2
  }
  let i
  for (i = 0; i < length; ++i) {
    const parsed = parseInt(string.substr(i * 2, 2), 16)
    if (numberIsNaN(parsed)) return i
    buf[offset + i] = parsed
  }
  return i
}

function utf8Write (buf, string, offset, length) {
  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)
}

function asciiWrite (buf, string, offset, length) {
  return blitBuffer(asciiToBytes(string), buf, offset, length)
}

function base64Write (buf, string, offset, length) {
  return blitBuffer(base64ToBytes(string), buf, offset, length)
}

function ucs2Write (buf, string, offset, length) {
  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)
}

Buffer.prototype.write = function write (string, offset, length, encoding) {
  // Buffer#write(string)
  if (offset === undefined) {
    encoding = 'utf8'
    length = this.length
    offset = 0
  // Buffer#write(string, encoding)
  } else if (length === undefined && typeof offset === 'string') {
    encoding = offset
    length = this.length
    offset = 0
  // Buffer#write(string, offset[, length][, encoding])
  } else if (isFinite(offset)) {
    offset = offset >>> 0
    if (isFinite(length)) {
      length = length >>> 0
      if (encoding === undefined) encoding = 'utf8'
    } else {
      encoding = length
      length = undefined
    }
  } else {
    throw new Error(
      'Buffer.write(string, encoding, offset[, length]) is no longer supported'
    )
  }

  const remaining = this.length - offset
  if (length === undefined || length > remaining) length = remaining

  if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {
    throw new RangeError('Attempt to write outside buffer bounds')
  }

  if (!encoding) encoding = 'utf8'

  let loweredCase = false
  for (;;) {
    switch (encoding) {
      case 'hex':
        return hexWrite(this, string, offset, length)

      case 'utf8':
      case 'utf-8':
        return utf8Write(this, string, offset, length)

      case 'ascii':
      case 'latin1':
      case 'binary':
        return asciiWrite(this, string, offset, length)

      case 'base64':
        // Warning: maxLength not taken into account in base64Write
        return base64Write(this, string, offset, length)

      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return ucs2Write(this, string, offset, length)

      default:
        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
        encoding = ('' + encoding).toLowerCase()
        loweredCase = true
    }
  }
}

Buffer.prototype.toJSON = function toJSON () {
  return {
    type: 'Buffer',
    data: Array.prototype.slice.call(this._arr || this, 0)
  }
}

function base64Slice (buf, start, end) {
  if (start === 0 && end === buf.length) {
    return base64.fromByteArray(buf)
  } else {
    return base64.fromByteArray(buf.slice(start, end))
  }
}

function utf8Slice (buf, start, end) {
  end = Math.min(buf.length, end)
  const res = []

  let i = start
  while (i < end) {
    const firstByte = buf[i]
    let codePoint = null
    let bytesPerSequence = (firstByte > 0xEF)
      ? 4
      : (firstByte > 0xDF)
          ? 3
          : (firstByte > 0xBF)
              ? 2
              : 1

    if (i + bytesPerSequence <= end) {
      let secondByte, thirdByte, fourthByte, tempCodePoint

      switch (bytesPerSequence) {
        case 1:
          if (firstByte < 0x80) {
            codePoint = firstByte
          }
          break
        case 2:
          secondByte = buf[i + 1]
          if ((secondByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F)
            if (tempCodePoint > 0x7F) {
              codePoint = tempCodePoint
            }
          }
          break
        case 3:
          secondByte = buf[i + 1]
          thirdByte = buf[i + 2]
          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F)
            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {
              codePoint = tempCodePoint
            }
          }
          break
        case 4:
          secondByte = buf[i + 1]
          thirdByte = buf[i + 2]
          fourthByte = buf[i + 3]
          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F)
            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {
              codePoint = tempCodePoint
            }
          }
      }
    }

    if (codePoint === null) {
      // we did not generate a valid codePoint so insert a
      // replacement char (U+FFFD) and advance only 1 byte
      codePoint = 0xFFFD
      bytesPerSequence = 1
    } else if (codePoint > 0xFFFF) {
      // encode to utf16 (surrogate pair dance)
      codePoint -= 0x10000
      res.push(codePoint >>> 10 & 0x3FF | 0xD800)
      codePoint = 0xDC00 | codePoint & 0x3FF
    }

    res.push(codePoint)
    i += bytesPerSequence
  }

  return decodeCodePointsArray(res)
}

// Based on http://stackoverflow.com/a/22747272/680742, the browser with
// the lowest limit is Chrome, with 0x10000 args.
// We go 1 magnitude less, for safety
const MAX_ARGUMENTS_LENGTH = 0x1000

function decodeCodePointsArray (codePoints) {
  const len = codePoints.length
  if (len <= MAX_ARGUMENTS_LENGTH) {
    return String.fromCharCode.apply(String, codePoints) // avoid extra slice()
  }

  // Decode in chunks to avoid "call stack size exceeded".
  let res = ''
  let i = 0
  while (i < len) {
    res += String.fromCharCode.apply(
      String,
      codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)
    )
  }
  return res
}

function asciiSlice (buf, start, end) {
  let ret = ''
  end = Math.min(buf.length, end)

  for (let i = start; i < end; ++i) {
    ret += String.fromCharCode(buf[i] & 0x7F)
  }
  return ret
}

function latin1Slice (buf, start, end) {
  let ret = ''
  end = Math.min(buf.length, end)

  for (let i = start; i < end; ++i) {
    ret += String.fromCharCode(buf[i])
  }
  return ret
}

function hexSlice (buf, start, end) {
  const len = buf.length

  if (!start || start < 0) start = 0
  if (!end || end < 0 || end > len) end = len

  let out = ''
  for (let i = start; i < end; ++i) {
    out += hexSliceLookupTable[buf[i]]
  }
  return out
}

function utf16leSlice (buf, start, end) {
  const bytes = buf.slice(start, end)
  let res = ''
  // If bytes.length is odd, the last 8 bits must be ignored (same as node.js)
  for (let i = 0; i < bytes.length - 1; i += 2) {
    res += String.fromCharCode(bytes[i] + (bytes[i + 1] * 256))
  }
  return res
}

Buffer.prototype.slice = function slice (start, end) {
  const len = this.length
  start = ~~start
  end = end === undefined ? len : ~~end

  if (start < 0) {
    start += len
    if (start < 0) start = 0
  } else if (start > len) {
    start = len
  }

  if (end < 0) {
    end += len
    if (end < 0) end = 0
  } else if (end > len) {
    end = len
  }

  if (end < start) end = start

  const newBuf = this.subarray(start, end)
  // Return an augmented `Uint8Array` instance
  Object.setPrototypeOf(newBuf, Buffer.prototype)

  return newBuf
}

/*
 * Need to make sure that buffer isn't trying to write out of bounds.
 */
function checkOffset (offset, ext, length) {
  if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')
  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')
}

Buffer.prototype.readUintLE =
Buffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {
  offset = offset >>> 0
  byteLength = byteLength >>> 0
  if (!noAssert) checkOffset(offset, byteLength, this.length)

  let val = this[offset]
  let mul = 1
  let i = 0
  while (++i < byteLength && (mul *= 0x100)) {
    val += this[offset + i] * mul
  }

  return val
}

Buffer.prototype.readUintBE =
Buffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {
  offset = offset >>> 0
  byteLength = byteLength >>> 0
  if (!noAssert) {
    checkOffset(offset, byteLength, this.length)
  }

  let val = this[offset + --byteLength]
  let mul = 1
  while (byteLength > 0 && (mul *= 0x100)) {
    val += this[offset + --byteLength] * mul
  }

  return val
}

Buffer.prototype.readUint8 =
Buffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 1, this.length)
  return this[offset]
}

Buffer.prototype.readUint16LE =
Buffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 2, this.length)
  return this[offset] | (this[offset + 1] << 8)
}

Buffer.prototype.readUint16BE =
Buffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 2, this.length)
  return (this[offset] << 8) | this[offset + 1]
}

Buffer.prototype.readUint32LE =
Buffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 4, this.length)

  return ((this[offset]) |
      (this[offset + 1] << 8) |
      (this[offset + 2] << 16)) +
      (this[offset + 3] * 0x1000000)
}

Buffer.prototype.readUint32BE =
Buffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 4, this.length)

  return (this[offset] * 0x1000000) +
    ((this[offset + 1] << 16) |
    (this[offset + 2] << 8) |
    this[offset + 3])
}

Buffer.prototype.readBigUInt64LE = defineBigIntMethod(function readBigUInt64LE (offset) {
  offset = offset >>> 0
  validateNumber(offset, 'offset')
  const first = this[offset]
  const last = this[offset + 7]
  if (first === undefined || last === undefined) {
    boundsError(offset, this.length - 8)
  }

  const lo = first +
    this[++offset] * 2 ** 8 +
    this[++offset] * 2 ** 16 +
    this[++offset] * 2 ** 24

  const hi = this[++offset] +
    this[++offset] * 2 ** 8 +
    this[++offset] * 2 ** 16 +
    last * 2 ** 24

  return BigInt(lo) + (BigInt(hi) << BigInt(32))
})

Buffer.prototype.readBigUInt64BE = defineBigIntMethod(function readBigUInt64BE (offset) {
  offset = offset >>> 0
  validateNumber(offset, 'offset')
  const first = this[offset]
  const last = this[offset + 7]
  if (first === undefined || last === undefined) {
    boundsError(offset, this.length - 8)
  }

  const hi = first * 2 ** 24 +
    this[++offset] * 2 ** 16 +
    this[++offset] * 2 ** 8 +
    this[++offset]

  const lo = this[++offset] * 2 ** 24 +
    this[++offset] * 2 ** 16 +
    this[++offset] * 2 ** 8 +
    last

  return (BigInt(hi) << BigInt(32)) + BigInt(lo)
})

Buffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {
  offset = offset >>> 0
  byteLength = byteLength >>> 0
  if (!noAssert) checkOffset(offset, byteLength, this.length)

  let val = this[offset]
  let mul = 1
  let i = 0
  while (++i < byteLength && (mul *= 0x100)) {
    val += this[offset + i] * mul
  }
  mul *= 0x80

  if (val >= mul) val -= Math.pow(2, 8 * byteLength)

  return val
}

Buffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {
  offset = offset >>> 0
  byteLength = byteLength >>> 0
  if (!noAssert) checkOffset(offset, byteLength, this.length)

  let i = byteLength
  let mul = 1
  let val = this[offset + --i]
  while (i > 0 && (mul *= 0x100)) {
    val += this[offset + --i] * mul
  }
  mul *= 0x80

  if (val >= mul) val -= Math.pow(2, 8 * byteLength)

  return val
}

Buffer.prototype.readInt8 = function readInt8 (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 1, this.length)
  if (!(this[offset] & 0x80)) return (this[offset])
  return ((0xff - this[offset] + 1) * -1)
}

Buffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 2, this.length)
  const val = this[offset] | (this[offset + 1] << 8)
  return (val & 0x8000) ? val | 0xFFFF0000 : val
}

Buffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 2, this.length)
  const val = this[offset + 1] | (this[offset] << 8)
  return (val & 0x8000) ? val | 0xFFFF0000 : val
}

Buffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 4, this.length)

  return (this[offset]) |
    (this[offset + 1] << 8) |
    (this[offset + 2] << 16) |
    (this[offset + 3] << 24)
}

Buffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 4, this.length)

  return (this[offset] << 24) |
    (this[offset + 1] << 16) |
    (this[offset + 2] << 8) |
    (this[offset + 3])
}

Buffer.prototype.readBigInt64LE = defineBigIntMethod(function readBigInt64LE (offset) {
  offset = offset >>> 0
  validateNumber(offset, 'offset')
  const first = this[offset]
  const last = this[offset + 7]
  if (first === undefined || last === undefined) {
    boundsError(offset, this.length - 8)
  }

  const val = this[offset + 4] +
    this[offset + 5] * 2 ** 8 +
    this[offset + 6] * 2 ** 16 +
    (last << 24) // Overflow

  return (BigInt(val) << BigInt(32)) +
    BigInt(first +
    this[++offset] * 2 ** 8 +
    this[++offset] * 2 ** 16 +
    this[++offset] * 2 ** 24)
})

Buffer.prototype.readBigInt64BE = defineBigIntMethod(function readBigInt64BE (offset) {
  offset = offset >>> 0
  validateNumber(offset, 'offset')
  const first = this[offset]
  const last = this[offset + 7]
  if (first === undefined || last === undefined) {
    boundsError(offset, this.length - 8)
  }

  const val = (first << 24) + // Overflow
    this[++offset] * 2 ** 16 +
    this[++offset] * 2 ** 8 +
    this[++offset]

  return (BigInt(val) << BigInt(32)) +
    BigInt(this[++offset] * 2 ** 24 +
    this[++offset] * 2 ** 16 +
    this[++offset] * 2 ** 8 +
    last)
})

Buffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 4, this.length)
  return ieee754.read(this, offset, true, 23, 4)
}

Buffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 4, this.length)
  return ieee754.read(this, offset, false, 23, 4)
}

Buffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 8, this.length)
  return ieee754.read(this, offset, true, 52, 8)
}

Buffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 8, this.length)
  return ieee754.read(this, offset, false, 52, 8)
}

function checkInt (buf, value, offset, ext, max, min) {
  if (!Buffer.isBuffer(buf)) throw new TypeError('"buffer" argument must be a Buffer instance')
  if (value > max || value < min) throw new RangeError('"value" argument is out of bounds')
  if (offset + ext > buf.length) throw new RangeError('Index out of range')
}

Buffer.prototype.writeUintLE =
Buffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset >>> 0
  byteLength = byteLength >>> 0
  if (!noAssert) {
    const maxBytes = Math.pow(2, 8 * byteLength) - 1
    checkInt(this, value, offset, byteLength, maxBytes, 0)
  }

  let mul = 1
  let i = 0
  this[offset] = value & 0xFF
  while (++i < byteLength && (mul *= 0x100)) {
    this[offset + i] = (value / mul) & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeUintBE =
Buffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset >>> 0
  byteLength = byteLength >>> 0
  if (!noAssert) {
    const maxBytes = Math.pow(2, 8 * byteLength) - 1
    checkInt(this, value, offset, byteLength, maxBytes, 0)
  }

  let i = byteLength - 1
  let mul = 1
  this[offset + i] = value & 0xFF
  while (--i >= 0 && (mul *= 0x100)) {
    this[offset + i] = (value / mul) & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeUint8 =
Buffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0)
  this[offset] = (value & 0xff)
  return offset + 1
}

Buffer.prototype.writeUint16LE =
Buffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)
  this[offset] = (value & 0xff)
  this[offset + 1] = (value >>> 8)
  return offset + 2
}

Buffer.prototype.writeUint16BE =
Buffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)
  this[offset] = (value >>> 8)
  this[offset + 1] = (value & 0xff)
  return offset + 2
}

Buffer.prototype.writeUint32LE =
Buffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)
  this[offset + 3] = (value >>> 24)
  this[offset + 2] = (value >>> 16)
  this[offset + 1] = (value >>> 8)
  this[offset] = (value & 0xff)
  return offset + 4
}

Buffer.prototype.writeUint32BE =
Buffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)
  this[offset] = (value >>> 24)
  this[offset + 1] = (value >>> 16)
  this[offset + 2] = (value >>> 8)
  this[offset + 3] = (value & 0xff)
  return offset + 4
}

function wrtBigUInt64LE (buf, value, offset, min, max) {
  checkIntBI(value, min, max, buf, offset, 7)

  let lo = Number(value & BigInt(0xffffffff))
  buf[offset++] = lo
  lo = lo >> 8
  buf[offset++] = lo
  lo = lo >> 8
  buf[offset++] = lo
  lo = lo >> 8
  buf[offset++] = lo
  let hi = Number(value >> BigInt(32) & BigInt(0xffffffff))
  buf[offset++] = hi
  hi = hi >> 8
  buf[offset++] = hi
  hi = hi >> 8
  buf[offset++] = hi
  hi = hi >> 8
  buf[offset++] = hi
  return offset
}

function wrtBigUInt64BE (buf, value, offset, min, max) {
  checkIntBI(value, min, max, buf, offset, 7)

  let lo = Number(value & BigInt(0xffffffff))
  buf[offset + 7] = lo
  lo = lo >> 8
  buf[offset + 6] = lo
  lo = lo >> 8
  buf[offset + 5] = lo
  lo = lo >> 8
  buf[offset + 4] = lo
  let hi = Number(value >> BigInt(32) & BigInt(0xffffffff))
  buf[offset + 3] = hi
  hi = hi >> 8
  buf[offset + 2] = hi
  hi = hi >> 8
  buf[offset + 1] = hi
  hi = hi >> 8
  buf[offset] = hi
  return offset + 8
}

Buffer.prototype.writeBigUInt64LE = defineBigIntMethod(function writeBigUInt64LE (value, offset = 0) {
  return wrtBigUInt64LE(this, value, offset, BigInt(0), BigInt('0xffffffffffffffff'))
})

Buffer.prototype.writeBigUInt64BE = defineBigIntMethod(function writeBigUInt64BE (value, offset = 0) {
  return wrtBigUInt64BE(this, value, offset, BigInt(0), BigInt('0xffffffffffffffff'))
})

Buffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) {
    const limit = Math.pow(2, (8 * byteLength) - 1)

    checkInt(this, value, offset, byteLength, limit - 1, -limit)
  }

  let i = 0
  let mul = 1
  let sub = 0
  this[offset] = value & 0xFF
  while (++i < byteLength && (mul *= 0x100)) {
    if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {
      sub = 1
    }
    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) {
    const limit = Math.pow(2, (8 * byteLength) - 1)

    checkInt(this, value, offset, byteLength, limit - 1, -limit)
  }

  let i = byteLength - 1
  let mul = 1
  let sub = 0
  this[offset + i] = value & 0xFF
  while (--i >= 0 && (mul *= 0x100)) {
    if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {
      sub = 1
    }
    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80)
  if (value < 0) value = 0xff + value + 1
  this[offset] = (value & 0xff)
  return offset + 1
}

Buffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)
  this[offset] = (value & 0xff)
  this[offset + 1] = (value >>> 8)
  return offset + 2
}

Buffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)
  this[offset] = (value >>> 8)
  this[offset + 1] = (value & 0xff)
  return offset + 2
}

Buffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
  this[offset] = (value & 0xff)
  this[offset + 1] = (value >>> 8)
  this[offset + 2] = (value >>> 16)
  this[offset + 3] = (value >>> 24)
  return offset + 4
}

Buffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
  if (value < 0) value = 0xffffffff + value + 1
  this[offset] = (value >>> 24)
  this[offset + 1] = (value >>> 16)
  this[offset + 2] = (value >>> 8)
  this[offset + 3] = (value & 0xff)
  return offset + 4
}

Buffer.prototype.writeBigInt64LE = defineBigIntMethod(function writeBigInt64LE (value, offset = 0) {
  return wrtBigUInt64LE(this, value, offset, -BigInt('0x8000000000000000'), BigInt('0x7fffffffffffffff'))
})

Buffer.prototype.writeBigInt64BE = defineBigIntMethod(function writeBigInt64BE (value, offset = 0) {
  return wrtBigUInt64BE(this, value, offset, -BigInt('0x8000000000000000'), BigInt('0x7fffffffffffffff'))
})

function checkIEEE754 (buf, value, offset, ext, max, min) {
  if (offset + ext > buf.length) throw new RangeError('Index out of range')
  if (offset < 0) throw new RangeError('Index out of range')
}

function writeFloat (buf, value, offset, littleEndian, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) {
    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38)
  }
  ieee754.write(buf, value, offset, littleEndian, 23, 4)
  return offset + 4
}

Buffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {
  return writeFloat(this, value, offset, true, noAssert)
}

Buffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {
  return writeFloat(this, value, offset, false, noAssert)
}

function writeDouble (buf, value, offset, littleEndian, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) {
    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308)
  }
  ieee754.write(buf, value, offset, littleEndian, 52, 8)
  return offset + 8
}

Buffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {
  return writeDouble(this, value, offset, true, noAssert)
}

Buffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {
  return writeDouble(this, value, offset, false, noAssert)
}

// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)
Buffer.prototype.copy = function copy (target, targetStart, start, end) {
  if (!Buffer.isBuffer(target)) throw new TypeError('argument should be a Buffer')
  if (!start) start = 0
  if (!end && end !== 0) end = this.length
  if (targetStart >= target.length) targetStart = target.length
  if (!targetStart) targetStart = 0
  if (end > 0 && end < start) end = start

  // Copy 0 bytes; we're done
  if (end === start) return 0
  if (target.length === 0 || this.length === 0) return 0

  // Fatal error conditions
  if (targetStart < 0) {
    throw new RangeError('targetStart out of bounds')
  }
  if (start < 0 || start >= this.length) throw new RangeError('Index out of range')
  if (end < 0) throw new RangeError('sourceEnd out of bounds')

  // Are we oob?
  if (end > this.length) end = this.length
  if (target.length - targetStart < end - start) {
    end = target.length - targetStart + start
  }

  const len = end - start

  if (this === target && typeof Uint8Array.prototype.copyWithin === 'function') {
    // Use built-in when available, missing from IE11
    this.copyWithin(targetStart, start, end)
  } else {
    Uint8Array.prototype.set.call(
      target,
      this.subarray(start, end),
      targetStart
    )
  }

  return len
}

// Usage:
//    buffer.fill(number[, offset[, end]])
//    buffer.fill(buffer[, offset[, end]])
//    buffer.fill(string[, offset[, end]][, encoding])
Buffer.prototype.fill = function fill (val, start, end, encoding) {
  // Handle string cases:
  if (typeof val === 'string') {
    if (typeof start === 'string') {
      encoding = start
      start = 0
      end = this.length
    } else if (typeof end === 'string') {
      encoding = end
      end = this.length
    }
    if (encoding !== undefined && typeof encoding !== 'string') {
      throw new TypeError('encoding must be a string')
    }
    if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {
      throw new TypeError('Unknown encoding: ' + encoding)
    }
    if (val.length === 1) {
      const code = val.charCodeAt(0)
      if ((encoding === 'utf8' && code < 128) ||
          encoding === 'latin1') {
        // Fast path: If `val` fits into a single byte, use that numeric value.
        val = code
      }
    }
  } else if (typeof val === 'number') {
    val = val & 255
  } else if (typeof val === 'boolean') {
    val = Number(val)
  }

  // Invalid ranges are not set to a default, so can range check early.
  if (start < 0 || this.length < start || this.length < end) {
    throw new RangeError('Out of range index')
  }

  if (end <= start) {
    return this
  }

  start = start >>> 0
  end = end === undefined ? this.length : end >>> 0

  if (!val) val = 0

  let i
  if (typeof val === 'number') {
    for (i = start; i < end; ++i) {
      this[i] = val
    }
  } else {
    const bytes = Buffer.isBuffer(val)
      ? val
      : Buffer.from(val, encoding)
    const len = bytes.length
    if (len === 0) {
      throw new TypeError('The value "' + val +
        '" is invalid for argument "value"')
    }
    for (i = 0; i < end - start; ++i) {
      this[i + start] = bytes[i % len]
    }
  }

  return this
}

// CUSTOM ERRORS
// =============

// Simplified versions from Node, changed for Buffer-only usage
const errors = {}
function E (sym, getMessage, Base) {
  errors[sym] = class NodeError extends Base {
    constructor () {
      super()

      Object.defineProperty(this, 'message', {
        value: getMessage.apply(this, arguments),
        writable: true,
        configurable: true
      })

      // Add the error code to the name to include it in the stack trace.
      this.name = `${this.name} [${sym}]`
      // Access the stack to generate the error message including the error code
      // from the name.
      this.stack // eslint-disable-line no-unused-expressions
      // Reset the name to the actual name.
      delete this.name
    }

    get code () {
      return sym
    }

    set code (value) {
      Object.defineProperty(this, 'code', {
        configurable: true,
        enumerable: true,
        value,
        writable: true
      })
    }

    toString () {
      return `${this.name} [${sym}]: ${this.message}`
    }
  }
}

E('ERR_BUFFER_OUT_OF_BOUNDS',
  function (name) {
    if (name) {
      return `${name} is outside of buffer bounds`
    }

    return 'Attempt to access memory outside buffer bounds'
  }, RangeError)
E('ERR_INVALID_ARG_TYPE',
  function (name, actual) {
    return `The "${name}" argument must be of type number. Received type ${typeof actual}`
  }, TypeError)
E('ERR_OUT_OF_RANGE',
  function (str, range, input) {
    let msg = `The value of "${str}" is out of range.`
    let received = input
    if (Number.isInteger(input) && Math.abs(input) > 2 ** 32) {
      received = addNumericalSeparator(String(input))
    } else if (typeof input === 'bigint') {
      received = String(input)
      if (input > BigInt(2) ** BigInt(32) || input < -(BigInt(2) ** BigInt(32))) {
        received = addNumericalSeparator(received)
      }
      received += 'n'
    }
    msg += ` It must be ${range}. Received ${received}`
    return msg
  }, RangeError)

function addNumericalSeparator (val) {
  let res = ''
  let i = val.length
  const start = val[0] === '-' ? 1 : 0
  for (; i >= start + 4; i -= 3) {
    res = `_${val.slice(i - 3, i)}${res}`
  }
  return `${val.slice(0, i)}${res}`
}

// CHECK FUNCTIONS
// ===============

function checkBounds (buf, offset, byteLength) {
  validateNumber(offset, 'offset')
  if (buf[offset] === undefined || buf[offset + byteLength] === undefined) {
    boundsError(offset, buf.length - (byteLength + 1))
  }
}

function checkIntBI (value, min, max, buf, offset, byteLength) {
  if (value > max || value < min) {
    const n = typeof min === 'bigint' ? 'n' : ''
    let range
    if (byteLength > 3) {
      if (min === 0 || min === BigInt(0)) {
        range = `>= 0${n} and < 2${n} ** ${(byteLength + 1) * 8}${n}`
      } else {
        range = `>= -(2${n} ** ${(byteLength + 1) * 8 - 1}${n}) and < 2 ** ` +
                `${(byteLength + 1) * 8 - 1}${n}`
      }
    } else {
      range = `>= ${min}${n} and <= ${max}${n}`
    }
    throw new errors.ERR_OUT_OF_RANGE('value', range, value)
  }
  checkBounds(buf, offset, byteLength)
}

function validateNumber (value, name) {
  if (typeof value !== 'number') {
    throw new errors.ERR_INVALID_ARG_TYPE(name, 'number', value)
  }
}

function boundsError (value, length, type) {
  if (Math.floor(value) !== value) {
    validateNumber(value, type)
    throw new errors.ERR_OUT_OF_RANGE(type || 'offset', 'an integer', value)
  }

  if (length < 0) {
    throw new errors.ERR_BUFFER_OUT_OF_BOUNDS()
  }

  throw new errors.ERR_OUT_OF_RANGE(type || 'offset',
                                    `>= ${type ? 1 : 0} and <= ${length}`,
                                    value)
}

// HELPER FUNCTIONS
// ================

const INVALID_BASE64_RE = /[^+/0-9A-Za-z-_]/g

function base64clean (str) {
  // Node takes equal signs as end of the Base64 encoding
  str = str.split('=')[0]
  // Node strips out invalid characters like \n and \t from the string, base64-js does not
  str = str.trim().replace(INVALID_BASE64_RE, '')
  // Node converts strings with length < 2 to ''
  if (str.length < 2) return ''
  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not
  while (str.length % 4 !== 0) {
    str = str + '='
  }
  return str
}

function utf8ToBytes (string, units) {
  units = units || Infinity
  let codePoint
  const length = string.length
  let leadSurrogate = null
  const bytes = []

  for (let i = 0; i < length; ++i) {
    codePoint = string.charCodeAt(i)

    // is surrogate component
    if (codePoint > 0xD7FF && codePoint < 0xE000) {
      // last char was a lead
      if (!leadSurrogate) {
        // no lead yet
        if (codePoint > 0xDBFF) {
          // unexpected trail
          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
          continue
        } else if (i + 1 === length) {
          // unpaired lead
          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
          continue
        }

        // valid lead
        leadSurrogate = codePoint

        continue
      }

      // 2 leads in a row
      if (codePoint < 0xDC00) {
        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
        leadSurrogate = codePoint
        continue
      }

      // valid surrogate pair
      codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000
    } else if (leadSurrogate) {
      // valid bmp char, but last char was a lead
      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
    }

    leadSurrogate = null

    // encode utf8
    if (codePoint < 0x80) {
      if ((units -= 1) < 0) break
      bytes.push(codePoint)
    } else if (codePoint < 0x800) {
      if ((units -= 2) < 0) break
      bytes.push(
        codePoint >> 0x6 | 0xC0,
        codePoint & 0x3F | 0x80
      )
    } else if (codePoint < 0x10000) {
      if ((units -= 3) < 0) break
      bytes.push(
        codePoint >> 0xC | 0xE0,
        codePoint >> 0x6 & 0x3F | 0x80,
        codePoint & 0x3F | 0x80
      )
    } else if (codePoint < 0x110000) {
      if ((units -= 4) < 0) break
      bytes.push(
        codePoint >> 0x12 | 0xF0,
        codePoint >> 0xC & 0x3F | 0x80,
        codePoint >> 0x6 & 0x3F | 0x80,
        codePoint & 0x3F | 0x80
      )
    } else {
      throw new Error('Invalid code point')
    }
  }

  return bytes
}

function asciiToBytes (str) {
  const byteArray = []
  for (let i = 0; i < str.length; ++i) {
    // Node's code seems to be doing this and not & 0x7F..
    byteArray.push(str.charCodeAt(i) & 0xFF)
  }
  return byteArray
}

function utf16leToBytes (str, units) {
  let c, hi, lo
  const byteArray = []
  for (let i = 0; i < str.length; ++i) {
    if ((units -= 2) < 0) break

    c = str.charCodeAt(i)
    hi = c >> 8
    lo = c % 256
    byteArray.push(lo)
    byteArray.push(hi)
  }

  return byteArray
}

function base64ToBytes (str) {
  return base64.toByteArray(base64clean(str))
}

function blitBuffer (src, dst, offset, length) {
  let i
  for (i = 0; i < length; ++i) {
    if ((i + offset >= dst.length) || (i >= src.length)) break
    dst[i + offset] = src[i]
  }
  return i
}

// ArrayBuffer or Uint8Array objects from other contexts (i.e. iframes) do not pass
// the `instanceof` check but they should be treated as of that type.
// See: https://github.com/feross/buffer/issues/166
function isInstance (obj, type) {
  return obj instanceof type ||
    (obj != null && obj.constructor != null && obj.constructor.name != null &&
      obj.constructor.name === type.name)
}
function numberIsNaN (obj) {
  // For IE11 support
  return obj !== obj // eslint-disable-line no-self-compare
}

// Create lookup table for `toString('hex')`
// See: https://github.com/feross/buffer/issues/219
const hexSliceLookupTable = (function () {
  const alphabet = '0123456789abcdef'
  const table = new Array(256)
  for (let i = 0; i < 16; ++i) {
    const i16 = i * 16
    for (let j = 0; j < 16; ++j) {
      table[i16 + j] = alphabet[i] + alphabet[j]
    }
  }
  return table
})()

// Return not function with Error if BigInt not supported
function defineBigIntMethod (fn) {
  return typeof BigInt === 'undefined' ? BufferBigIntNotDefined : fn
}

function BufferBigIntNotDefined () {
  throw new Error('BigInt not supported')
}


/***/ }),

/***/ "./ltbl-occt/ltbl-occt.wasm":
/*!**********************************!*\
  !*** ./ltbl-occt/ltbl-occt.wasm ***!
  \**********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ("wasm/e062d884200cb111856af2e5c0463b14.wasm");

/***/ }),

/***/ "./node_modules/ieee754/index.js":
/*!***************************************!*\
  !*** ./node_modules/ieee754/index.js ***!
  \***************************************/
/***/ ((__unused_webpack_module, exports) => {

/*! ieee754. BSD-3-Clause License. Feross Aboukhadijeh <https://feross.org/opensource> */
exports.read = function (buffer, offset, isLE, mLen, nBytes) {
  var e, m
  var eLen = (nBytes * 8) - mLen - 1
  var eMax = (1 << eLen) - 1
  var eBias = eMax >> 1
  var nBits = -7
  var i = isLE ? (nBytes - 1) : 0
  var d = isLE ? -1 : 1
  var s = buffer[offset + i]

  i += d

  e = s & ((1 << (-nBits)) - 1)
  s >>= (-nBits)
  nBits += eLen
  for (; nBits > 0; e = (e * 256) + buffer[offset + i], i += d, nBits -= 8) {}

  m = e & ((1 << (-nBits)) - 1)
  e >>= (-nBits)
  nBits += mLen
  for (; nBits > 0; m = (m * 256) + buffer[offset + i], i += d, nBits -= 8) {}

  if (e === 0) {
    e = 1 - eBias
  } else if (e === eMax) {
    return m ? NaN : ((s ? -1 : 1) * Infinity)
  } else {
    m = m + Math.pow(2, mLen)
    e = e - eBias
  }
  return (s ? -1 : 1) * m * Math.pow(2, e - mLen)
}

exports.write = function (buffer, value, offset, isLE, mLen, nBytes) {
  var e, m, c
  var eLen = (nBytes * 8) - mLen - 1
  var eMax = (1 << eLen) - 1
  var eBias = eMax >> 1
  var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0)
  var i = isLE ? 0 : (nBytes - 1)
  var d = isLE ? 1 : -1
  var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0

  value = Math.abs(value)

  if (isNaN(value) || value === Infinity) {
    m = isNaN(value) ? 1 : 0
    e = eMax
  } else {
    e = Math.floor(Math.log(value) / Math.LN2)
    if (value * (c = Math.pow(2, -e)) < 1) {
      e--
      c *= 2
    }
    if (e + eBias >= 1) {
      value += rt / c
    } else {
      value += rt * Math.pow(2, 1 - eBias)
    }
    if (value * c >= 2) {
      e++
      c /= 2
    }

    if (e + eBias >= eMax) {
      m = 0
      e = eMax
    } else if (e + eBias >= 1) {
      m = ((value * c) - 1) * Math.pow(2, mLen)
      e = e + eBias
    } else {
      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen)
      e = 0
    }
  }

  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}

  e = (e << mLen) | m
  eLen += mLen
  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}

  buffer[offset + i - d] |= s * 128
}


/***/ }),

/***/ "./node_modules/opentype.js/dist/opentype.module.js":
/*!**********************************************************!*\
  !*** ./node_modules/opentype.js/dist/opentype.module.js ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   BoundingBox: () => (/* binding */ BoundingBox),
/* harmony export */   Font: () => (/* binding */ Font),
/* harmony export */   Glyph: () => (/* binding */ Glyph),
/* harmony export */   Path: () => (/* binding */ Path),
/* harmony export */   _parse: () => (/* binding */ parse),
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__),
/* harmony export */   load: () => (/* binding */ load),
/* harmony export */   loadSync: () => (/* binding */ loadSync),
/* harmony export */   parse: () => (/* binding */ parseBuffer)
/* harmony export */ });
/**
 * https://opentype.js.org v1.3.4 | (c) Frederik De Bleser and other contributors | MIT License | Uses tiny-inflate by Devon Govett and string.prototype.codepointat polyfill by Mathias Bynens
 */

/*! https://mths.be/codepointat v0.2.0 by @mathias */
if (!String.prototype.codePointAt) {
	(function() {
		var defineProperty = (function() {
			// IE 8 only supports `Object.defineProperty` on DOM elements
			try {
				var object = {};
				var $defineProperty = Object.defineProperty;
				var result = $defineProperty(object, object, object) && $defineProperty;
			} catch(error) {}
			return result;
		}());
		var codePointAt = function(position) {
			if (this == null) {
				throw TypeError();
			}
			var string = String(this);
			var size = string.length;
			// `ToInteger`
			var index = position ? Number(position) : 0;
			if (index != index) { // better `isNaN`
				index = 0;
			}
			// Account for out-of-bounds indices:
			if (index < 0 || index >= size) {
				return undefined;
			}
			// Get the first code unit
			var first = string.charCodeAt(index);
			var second;
			if ( // check if it’s the start of a surrogate pair
				first >= 0xD800 && first <= 0xDBFF && // high surrogate
				size > index + 1 // there is a next code unit
			) {
				second = string.charCodeAt(index + 1);
				if (second >= 0xDC00 && second <= 0xDFFF) { // low surrogate
					// https://mathiasbynens.be/notes/javascript-encoding#surrogate-formulae
					return (first - 0xD800) * 0x400 + second - 0xDC00 + 0x10000;
				}
			}
			return first;
		};
		if (defineProperty) {
			defineProperty(String.prototype, 'codePointAt', {
				'value': codePointAt,
				'configurable': true,
				'writable': true
			});
		} else {
			String.prototype.codePointAt = codePointAt;
		}
	}());
}

var TINF_OK = 0;
var TINF_DATA_ERROR = -3;

function Tree() {
  this.table = new Uint16Array(16);   /* table of code length counts */
  this.trans = new Uint16Array(288);  /* code -> symbol translation table */
}

function Data(source, dest) {
  this.source = source;
  this.sourceIndex = 0;
  this.tag = 0;
  this.bitcount = 0;
  
  this.dest = dest;
  this.destLen = 0;
  
  this.ltree = new Tree();  /* dynamic length/symbol tree */
  this.dtree = new Tree();  /* dynamic distance tree */
}

/* --------------------------------------------------- *
 * -- uninitialized global data (static structures) -- *
 * --------------------------------------------------- */

var sltree = new Tree();
var sdtree = new Tree();

/* extra bits and base tables for length codes */
var length_bits = new Uint8Array(30);
var length_base = new Uint16Array(30);

/* extra bits and base tables for distance codes */
var dist_bits = new Uint8Array(30);
var dist_base = new Uint16Array(30);

/* special ordering of code length codes */
var clcidx = new Uint8Array([
  16, 17, 18, 0, 8, 7, 9, 6,
  10, 5, 11, 4, 12, 3, 13, 2,
  14, 1, 15
]);

/* used by tinf_decode_trees, avoids allocations every call */
var code_tree = new Tree();
var lengths = new Uint8Array(288 + 32);

/* ----------------------- *
 * -- utility functions -- *
 * ----------------------- */

/* build extra bits and base tables */
function tinf_build_bits_base(bits, base, delta, first) {
  var i, sum;

  /* build bits table */
  for (i = 0; i < delta; ++i) { bits[i] = 0; }
  for (i = 0; i < 30 - delta; ++i) { bits[i + delta] = i / delta | 0; }

  /* build base table */
  for (sum = first, i = 0; i < 30; ++i) {
    base[i] = sum;
    sum += 1 << bits[i];
  }
}

/* build the fixed huffman trees */
function tinf_build_fixed_trees(lt, dt) {
  var i;

  /* build fixed length tree */
  for (i = 0; i < 7; ++i) { lt.table[i] = 0; }

  lt.table[7] = 24;
  lt.table[8] = 152;
  lt.table[9] = 112;

  for (i = 0; i < 24; ++i) { lt.trans[i] = 256 + i; }
  for (i = 0; i < 144; ++i) { lt.trans[24 + i] = i; }
  for (i = 0; i < 8; ++i) { lt.trans[24 + 144 + i] = 280 + i; }
  for (i = 0; i < 112; ++i) { lt.trans[24 + 144 + 8 + i] = 144 + i; }

  /* build fixed distance tree */
  for (i = 0; i < 5; ++i) { dt.table[i] = 0; }

  dt.table[5] = 32;

  for (i = 0; i < 32; ++i) { dt.trans[i] = i; }
}

/* given an array of code lengths, build a tree */
var offs = new Uint16Array(16);

function tinf_build_tree(t, lengths, off, num) {
  var i, sum;

  /* clear code length count table */
  for (i = 0; i < 16; ++i) { t.table[i] = 0; }

  /* scan symbol lengths, and sum code length counts */
  for (i = 0; i < num; ++i) { t.table[lengths[off + i]]++; }

  t.table[0] = 0;

  /* compute offset table for distribution sort */
  for (sum = 0, i = 0; i < 16; ++i) {
    offs[i] = sum;
    sum += t.table[i];
  }

  /* create code->symbol translation table (symbols sorted by code) */
  for (i = 0; i < num; ++i) {
    if (lengths[off + i]) { t.trans[offs[lengths[off + i]]++] = i; }
  }
}

/* ---------------------- *
 * -- decode functions -- *
 * ---------------------- */

/* get one bit from source stream */
function tinf_getbit(d) {
  /* check if tag is empty */
  if (!d.bitcount--) {
    /* load next tag */
    d.tag = d.source[d.sourceIndex++];
    d.bitcount = 7;
  }

  /* shift bit out of tag */
  var bit = d.tag & 1;
  d.tag >>>= 1;

  return bit;
}

/* read a num bit value from a stream and add base */
function tinf_read_bits(d, num, base) {
  if (!num)
    { return base; }

  while (d.bitcount < 24) {
    d.tag |= d.source[d.sourceIndex++] << d.bitcount;
    d.bitcount += 8;
  }

  var val = d.tag & (0xffff >>> (16 - num));
  d.tag >>>= num;
  d.bitcount -= num;
  return val + base;
}

/* given a data stream and a tree, decode a symbol */
function tinf_decode_symbol(d, t) {
  while (d.bitcount < 24) {
    d.tag |= d.source[d.sourceIndex++] << d.bitcount;
    d.bitcount += 8;
  }
  
  var sum = 0, cur = 0, len = 0;
  var tag = d.tag;

  /* get more bits while code value is above sum */
  do {
    cur = 2 * cur + (tag & 1);
    tag >>>= 1;
    ++len;

    sum += t.table[len];
    cur -= t.table[len];
  } while (cur >= 0);
  
  d.tag = tag;
  d.bitcount -= len;

  return t.trans[sum + cur];
}

/* given a data stream, decode dynamic trees from it */
function tinf_decode_trees(d, lt, dt) {
  var hlit, hdist, hclen;
  var i, num, length;

  /* get 5 bits HLIT (257-286) */
  hlit = tinf_read_bits(d, 5, 257);

  /* get 5 bits HDIST (1-32) */
  hdist = tinf_read_bits(d, 5, 1);

  /* get 4 bits HCLEN (4-19) */
  hclen = tinf_read_bits(d, 4, 4);

  for (i = 0; i < 19; ++i) { lengths[i] = 0; }

  /* read code lengths for code length alphabet */
  for (i = 0; i < hclen; ++i) {
    /* get 3 bits code length (0-7) */
    var clen = tinf_read_bits(d, 3, 0);
    lengths[clcidx[i]] = clen;
  }

  /* build code length tree */
  tinf_build_tree(code_tree, lengths, 0, 19);

  /* decode code lengths for the dynamic trees */
  for (num = 0; num < hlit + hdist;) {
    var sym = tinf_decode_symbol(d, code_tree);

    switch (sym) {
      case 16:
        /* copy previous code length 3-6 times (read 2 bits) */
        var prev = lengths[num - 1];
        for (length = tinf_read_bits(d, 2, 3); length; --length) {
          lengths[num++] = prev;
        }
        break;
      case 17:
        /* repeat code length 0 for 3-10 times (read 3 bits) */
        for (length = tinf_read_bits(d, 3, 3); length; --length) {
          lengths[num++] = 0;
        }
        break;
      case 18:
        /* repeat code length 0 for 11-138 times (read 7 bits) */
        for (length = tinf_read_bits(d, 7, 11); length; --length) {
          lengths[num++] = 0;
        }
        break;
      default:
        /* values 0-15 represent the actual code lengths */
        lengths[num++] = sym;
        break;
    }
  }

  /* build dynamic trees */
  tinf_build_tree(lt, lengths, 0, hlit);
  tinf_build_tree(dt, lengths, hlit, hdist);
}

/* ----------------------------- *
 * -- block inflate functions -- *
 * ----------------------------- */

/* given a stream and two trees, inflate a block of data */
function tinf_inflate_block_data(d, lt, dt) {
  while (1) {
    var sym = tinf_decode_symbol(d, lt);

    /* check for end of block */
    if (sym === 256) {
      return TINF_OK;
    }

    if (sym < 256) {
      d.dest[d.destLen++] = sym;
    } else {
      var length, dist, offs;
      var i;

      sym -= 257;

      /* possibly get more bits from length code */
      length = tinf_read_bits(d, length_bits[sym], length_base[sym]);

      dist = tinf_decode_symbol(d, dt);

      /* possibly get more bits from distance code */
      offs = d.destLen - tinf_read_bits(d, dist_bits[dist], dist_base[dist]);

      /* copy match */
      for (i = offs; i < offs + length; ++i) {
        d.dest[d.destLen++] = d.dest[i];
      }
    }
  }
}

/* inflate an uncompressed block of data */
function tinf_inflate_uncompressed_block(d) {
  var length, invlength;
  var i;
  
  /* unread from bitbuffer */
  while (d.bitcount > 8) {
    d.sourceIndex--;
    d.bitcount -= 8;
  }

  /* get length */
  length = d.source[d.sourceIndex + 1];
  length = 256 * length + d.source[d.sourceIndex];

  /* get one's complement of length */
  invlength = d.source[d.sourceIndex + 3];
  invlength = 256 * invlength + d.source[d.sourceIndex + 2];

  /* check length */
  if (length !== (~invlength & 0x0000ffff))
    { return TINF_DATA_ERROR; }

  d.sourceIndex += 4;

  /* copy block */
  for (i = length; i; --i)
    { d.dest[d.destLen++] = d.source[d.sourceIndex++]; }

  /* make sure we start next block on a byte boundary */
  d.bitcount = 0;

  return TINF_OK;
}

/* inflate stream from source to dest */
function tinf_uncompress(source, dest) {
  var d = new Data(source, dest);
  var bfinal, btype, res;

  do {
    /* read final block flag */
    bfinal = tinf_getbit(d);

    /* read block type (2 bits) */
    btype = tinf_read_bits(d, 2, 0);

    /* decompress block */
    switch (btype) {
      case 0:
        /* decompress uncompressed block */
        res = tinf_inflate_uncompressed_block(d);
        break;
      case 1:
        /* decompress block with fixed huffman trees */
        res = tinf_inflate_block_data(d, sltree, sdtree);
        break;
      case 2:
        /* decompress block with dynamic huffman trees */
        tinf_decode_trees(d, d.ltree, d.dtree);
        res = tinf_inflate_block_data(d, d.ltree, d.dtree);
        break;
      default:
        res = TINF_DATA_ERROR;
    }

    if (res !== TINF_OK)
      { throw new Error('Data error'); }

  } while (!bfinal);

  if (d.destLen < d.dest.length) {
    if (typeof d.dest.slice === 'function')
      { return d.dest.slice(0, d.destLen); }
    else
      { return d.dest.subarray(0, d.destLen); }
  }
  
  return d.dest;
}

/* -------------------- *
 * -- initialization -- *
 * -------------------- */

/* build fixed huffman trees */
tinf_build_fixed_trees(sltree, sdtree);

/* build extra bits and base tables */
tinf_build_bits_base(length_bits, length_base, 4, 3);
tinf_build_bits_base(dist_bits, dist_base, 2, 1);

/* fix a special case */
length_bits[28] = 0;
length_base[28] = 258;

var tinyInflate = tinf_uncompress;

// The Bounding Box object

function derive(v0, v1, v2, v3, t) {
    return Math.pow(1 - t, 3) * v0 +
        3 * Math.pow(1 - t, 2) * t * v1 +
        3 * (1 - t) * Math.pow(t, 2) * v2 +
        Math.pow(t, 3) * v3;
}
/**
 * A bounding box is an enclosing box that describes the smallest measure within which all the points lie.
 * It is used to calculate the bounding box of a glyph or text path.
 *
 * On initialization, x1/y1/x2/y2 will be NaN. Check if the bounding box is empty using `isEmpty()`.
 *
 * @exports opentype.BoundingBox
 * @class
 * @constructor
 */
function BoundingBox() {
    this.x1 = Number.NaN;
    this.y1 = Number.NaN;
    this.x2 = Number.NaN;
    this.y2 = Number.NaN;
}

/**
 * Returns true if the bounding box is empty, that is, no points have been added to the box yet.
 */
BoundingBox.prototype.isEmpty = function() {
    return isNaN(this.x1) || isNaN(this.y1) || isNaN(this.x2) || isNaN(this.y2);
};

/**
 * Add the point to the bounding box.
 * The x1/y1/x2/y2 coordinates of the bounding box will now encompass the given point.
 * @param {number} x - The X coordinate of the point.
 * @param {number} y - The Y coordinate of the point.
 */
BoundingBox.prototype.addPoint = function(x, y) {
    if (typeof x === 'number') {
        if (isNaN(this.x1) || isNaN(this.x2)) {
            this.x1 = x;
            this.x2 = x;
        }
        if (x < this.x1) {
            this.x1 = x;
        }
        if (x > this.x2) {
            this.x2 = x;
        }
    }
    if (typeof y === 'number') {
        if (isNaN(this.y1) || isNaN(this.y2)) {
            this.y1 = y;
            this.y2 = y;
        }
        if (y < this.y1) {
            this.y1 = y;
        }
        if (y > this.y2) {
            this.y2 = y;
        }
    }
};

/**
 * Add a X coordinate to the bounding box.
 * This extends the bounding box to include the X coordinate.
 * This function is used internally inside of addBezier.
 * @param {number} x - The X coordinate of the point.
 */
BoundingBox.prototype.addX = function(x) {
    this.addPoint(x, null);
};

/**
 * Add a Y coordinate to the bounding box.
 * This extends the bounding box to include the Y coordinate.
 * This function is used internally inside of addBezier.
 * @param {number} y - The Y coordinate of the point.
 */
BoundingBox.prototype.addY = function(y) {
    this.addPoint(null, y);
};

/**
 * Add a Bézier curve to the bounding box.
 * This extends the bounding box to include the entire Bézier.
 * @param {number} x0 - The starting X coordinate.
 * @param {number} y0 - The starting Y coordinate.
 * @param {number} x1 - The X coordinate of the first control point.
 * @param {number} y1 - The Y coordinate of the first control point.
 * @param {number} x2 - The X coordinate of the second control point.
 * @param {number} y2 - The Y coordinate of the second control point.
 * @param {number} x - The ending X coordinate.
 * @param {number} y - The ending Y coordinate.
 */
BoundingBox.prototype.addBezier = function(x0, y0, x1, y1, x2, y2, x, y) {
    // This code is based on http://nishiohirokazu.blogspot.com/2009/06/how-to-calculate-bezier-curves-bounding.html
    // and https://github.com/icons8/svg-path-bounding-box

    var p0 = [x0, y0];
    var p1 = [x1, y1];
    var p2 = [x2, y2];
    var p3 = [x, y];

    this.addPoint(x0, y0);
    this.addPoint(x, y);

    for (var i = 0; i <= 1; i++) {
        var b = 6 * p0[i] - 12 * p1[i] + 6 * p2[i];
        var a = -3 * p0[i] + 9 * p1[i] - 9 * p2[i] + 3 * p3[i];
        var c = 3 * p1[i] - 3 * p0[i];

        if (a === 0) {
            if (b === 0) { continue; }
            var t = -c / b;
            if (0 < t && t < 1) {
                if (i === 0) { this.addX(derive(p0[i], p1[i], p2[i], p3[i], t)); }
                if (i === 1) { this.addY(derive(p0[i], p1[i], p2[i], p3[i], t)); }
            }
            continue;
        }

        var b2ac = Math.pow(b, 2) - 4 * c * a;
        if (b2ac < 0) { continue; }
        var t1 = (-b + Math.sqrt(b2ac)) / (2 * a);
        if (0 < t1 && t1 < 1) {
            if (i === 0) { this.addX(derive(p0[i], p1[i], p2[i], p3[i], t1)); }
            if (i === 1) { this.addY(derive(p0[i], p1[i], p2[i], p3[i], t1)); }
        }
        var t2 = (-b - Math.sqrt(b2ac)) / (2 * a);
        if (0 < t2 && t2 < 1) {
            if (i === 0) { this.addX(derive(p0[i], p1[i], p2[i], p3[i], t2)); }
            if (i === 1) { this.addY(derive(p0[i], p1[i], p2[i], p3[i], t2)); }
        }
    }
};

/**
 * Add a quadratic curve to the bounding box.
 * This extends the bounding box to include the entire quadratic curve.
 * @param {number} x0 - The starting X coordinate.
 * @param {number} y0 - The starting Y coordinate.
 * @param {number} x1 - The X coordinate of the control point.
 * @param {number} y1 - The Y coordinate of the control point.
 * @param {number} x - The ending X coordinate.
 * @param {number} y - The ending Y coordinate.
 */
BoundingBox.prototype.addQuad = function(x0, y0, x1, y1, x, y) {
    var cp1x = x0 + 2 / 3 * (x1 - x0);
    var cp1y = y0 + 2 / 3 * (y1 - y0);
    var cp2x = cp1x + 1 / 3 * (x - x0);
    var cp2y = cp1y + 1 / 3 * (y - y0);
    this.addBezier(x0, y0, cp1x, cp1y, cp2x, cp2y, x, y);
};

// Geometric objects

/**
 * A bézier path containing a set of path commands similar to a SVG path.
 * Paths can be drawn on a context using `draw`.
 * @exports opentype.Path
 * @class
 * @constructor
 */
function Path() {
    this.commands = [];
    this.fill = 'black';
    this.stroke = null;
    this.strokeWidth = 1;
}

/**
 * @param  {number} x
 * @param  {number} y
 */
Path.prototype.moveTo = function(x, y) {
    this.commands.push({
        type: 'M',
        x: x,
        y: y
    });
};

/**
 * @param  {number} x
 * @param  {number} y
 */
Path.prototype.lineTo = function(x, y) {
    this.commands.push({
        type: 'L',
        x: x,
        y: y
    });
};

/**
 * Draws cubic curve
 * @function
 * curveTo
 * @memberof opentype.Path.prototype
 * @param  {number} x1 - x of control 1
 * @param  {number} y1 - y of control 1
 * @param  {number} x2 - x of control 2
 * @param  {number} y2 - y of control 2
 * @param  {number} x - x of path point
 * @param  {number} y - y of path point
 */

/**
 * Draws cubic curve
 * @function
 * bezierCurveTo
 * @memberof opentype.Path.prototype
 * @param  {number} x1 - x of control 1
 * @param  {number} y1 - y of control 1
 * @param  {number} x2 - x of control 2
 * @param  {number} y2 - y of control 2
 * @param  {number} x - x of path point
 * @param  {number} y - y of path point
 * @see curveTo
 */
Path.prototype.curveTo = Path.prototype.bezierCurveTo = function(x1, y1, x2, y2, x, y) {
    this.commands.push({
        type: 'C',
        x1: x1,
        y1: y1,
        x2: x2,
        y2: y2,
        x: x,
        y: y
    });
};

/**
 * Draws quadratic curve
 * @function
 * quadraticCurveTo
 * @memberof opentype.Path.prototype
 * @param  {number} x1 - x of control
 * @param  {number} y1 - y of control
 * @param  {number} x - x of path point
 * @param  {number} y - y of path point
 */

/**
 * Draws quadratic curve
 * @function
 * quadTo
 * @memberof opentype.Path.prototype
 * @param  {number} x1 - x of control
 * @param  {number} y1 - y of control
 * @param  {number} x - x of path point
 * @param  {number} y - y of path point
 */
Path.prototype.quadTo = Path.prototype.quadraticCurveTo = function(x1, y1, x, y) {
    this.commands.push({
        type: 'Q',
        x1: x1,
        y1: y1,
        x: x,
        y: y
    });
};

/**
 * Closes the path
 * @function closePath
 * @memberof opentype.Path.prototype
 */

/**
 * Close the path
 * @function close
 * @memberof opentype.Path.prototype
 */
Path.prototype.close = Path.prototype.closePath = function() {
    this.commands.push({
        type: 'Z'
    });
};

/**
 * Add the given path or list of commands to the commands of this path.
 * @param  {Array} pathOrCommands - another opentype.Path, an opentype.BoundingBox, or an array of commands.
 */
Path.prototype.extend = function(pathOrCommands) {
    if (pathOrCommands.commands) {
        pathOrCommands = pathOrCommands.commands;
    } else if (pathOrCommands instanceof BoundingBox) {
        var box = pathOrCommands;
        this.moveTo(box.x1, box.y1);
        this.lineTo(box.x2, box.y1);
        this.lineTo(box.x2, box.y2);
        this.lineTo(box.x1, box.y2);
        this.close();
        return;
    }

    Array.prototype.push.apply(this.commands, pathOrCommands);
};

/**
 * Calculate the bounding box of the path.
 * @returns {opentype.BoundingBox}
 */
Path.prototype.getBoundingBox = function() {
    var box = new BoundingBox();

    var startX = 0;
    var startY = 0;
    var prevX = 0;
    var prevY = 0;
    for (var i = 0; i < this.commands.length; i++) {
        var cmd = this.commands[i];
        switch (cmd.type) {
            case 'M':
                box.addPoint(cmd.x, cmd.y);
                startX = prevX = cmd.x;
                startY = prevY = cmd.y;
                break;
            case 'L':
                box.addPoint(cmd.x, cmd.y);
                prevX = cmd.x;
                prevY = cmd.y;
                break;
            case 'Q':
                box.addQuad(prevX, prevY, cmd.x1, cmd.y1, cmd.x, cmd.y);
                prevX = cmd.x;
                prevY = cmd.y;
                break;
            case 'C':
                box.addBezier(prevX, prevY, cmd.x1, cmd.y1, cmd.x2, cmd.y2, cmd.x, cmd.y);
                prevX = cmd.x;
                prevY = cmd.y;
                break;
            case 'Z':
                prevX = startX;
                prevY = startY;
                break;
            default:
                throw new Error('Unexpected path command ' + cmd.type);
        }
    }
    if (box.isEmpty()) {
        box.addPoint(0, 0);
    }
    return box;
};

/**
 * Draw the path to a 2D context.
 * @param {CanvasRenderingContext2D} ctx - A 2D drawing context.
 */
Path.prototype.draw = function(ctx) {
    ctx.beginPath();
    for (var i = 0; i < this.commands.length; i += 1) {
        var cmd = this.commands[i];
        if (cmd.type === 'M') {
            ctx.moveTo(cmd.x, cmd.y);
        } else if (cmd.type === 'L') {
            ctx.lineTo(cmd.x, cmd.y);
        } else if (cmd.type === 'C') {
            ctx.bezierCurveTo(cmd.x1, cmd.y1, cmd.x2, cmd.y2, cmd.x, cmd.y);
        } else if (cmd.type === 'Q') {
            ctx.quadraticCurveTo(cmd.x1, cmd.y1, cmd.x, cmd.y);
        } else if (cmd.type === 'Z') {
            ctx.closePath();
        }
    }

    if (this.fill) {
        ctx.fillStyle = this.fill;
        ctx.fill();
    }

    if (this.stroke) {
        ctx.strokeStyle = this.stroke;
        ctx.lineWidth = this.strokeWidth;
        ctx.stroke();
    }
};

/**
 * Convert the Path to a string of path data instructions
 * See http://www.w3.org/TR/SVG/paths.html#PathData
 * @param  {number} [decimalPlaces=2] - The amount of decimal places for floating-point values
 * @return {string}
 */
Path.prototype.toPathData = function(decimalPlaces) {
    decimalPlaces = decimalPlaces !== undefined ? decimalPlaces : 2;

    function floatToString(v) {
        if (Math.round(v) === v) {
            return '' + Math.round(v);
        } else {
            return v.toFixed(decimalPlaces);
        }
    }

    function packValues() {
        var arguments$1 = arguments;

        var s = '';
        for (var i = 0; i < arguments.length; i += 1) {
            var v = arguments$1[i];
            if (v >= 0 && i > 0) {
                s += ' ';
            }

            s += floatToString(v);
        }

        return s;
    }

    var d = '';
    for (var i = 0; i < this.commands.length; i += 1) {
        var cmd = this.commands[i];
        if (cmd.type === 'M') {
            d += 'M' + packValues(cmd.x, cmd.y);
        } else if (cmd.type === 'L') {
            d += 'L' + packValues(cmd.x, cmd.y);
        } else if (cmd.type === 'C') {
            d += 'C' + packValues(cmd.x1, cmd.y1, cmd.x2, cmd.y2, cmd.x, cmd.y);
        } else if (cmd.type === 'Q') {
            d += 'Q' + packValues(cmd.x1, cmd.y1, cmd.x, cmd.y);
        } else if (cmd.type === 'Z') {
            d += 'Z';
        }
    }

    return d;
};

/**
 * Convert the path to an SVG <path> element, as a string.
 * @param  {number} [decimalPlaces=2] - The amount of decimal places for floating-point values
 * @return {string}
 */
Path.prototype.toSVG = function(decimalPlaces) {
    var svg = '<path d="';
    svg += this.toPathData(decimalPlaces);
    svg += '"';
    if (this.fill && this.fill !== 'black') {
        if (this.fill === null) {
            svg += ' fill="none"';
        } else {
            svg += ' fill="' + this.fill + '"';
        }
    }

    if (this.stroke) {
        svg += ' stroke="' + this.stroke + '" stroke-width="' + this.strokeWidth + '"';
    }

    svg += '/>';
    return svg;
};

/**
 * Convert the path to a DOM element.
 * @param  {number} [decimalPlaces=2] - The amount of decimal places for floating-point values
 * @return {SVGPathElement}
 */
Path.prototype.toDOMElement = function(decimalPlaces) {
    var temporaryPath = this.toPathData(decimalPlaces);
    var newPath = document.createElementNS('http://www.w3.org/2000/svg', 'path');

    newPath.setAttribute('d', temporaryPath);

    return newPath;
};

// Run-time checking of preconditions.

function fail(message) {
    throw new Error(message);
}

// Precondition function that checks if the given predicate is true.
// If not, it will throw an error.
function argument(predicate, message) {
    if (!predicate) {
        fail(message);
    }
}
var check = { fail: fail, argument: argument, assert: argument };

// Data types used in the OpenType font file.

var LIMIT16 = 32768; // The limit at which a 16-bit number switches signs == 2^15
var LIMIT32 = 2147483648; // The limit at which a 32-bit number switches signs == 2 ^ 31

/**
 * @exports opentype.decode
 * @class
 */
var decode = {};
/**
 * @exports opentype.encode
 * @class
 */
var encode = {};
/**
 * @exports opentype.sizeOf
 * @class
 */
var sizeOf = {};

// Return a function that always returns the same value.
function constant(v) {
    return function() {
        return v;
    };
}

// OpenType data types //////////////////////////////////////////////////////

/**
 * Convert an 8-bit unsigned integer to a list of 1 byte.
 * @param {number}
 * @returns {Array}
 */
encode.BYTE = function(v) {
    check.argument(v >= 0 && v <= 255, 'Byte value should be between 0 and 255.');
    return [v];
};
/**
 * @constant
 * @type {number}
 */
sizeOf.BYTE = constant(1);

/**
 * Convert a 8-bit signed integer to a list of 1 byte.
 * @param {string}
 * @returns {Array}
 */
encode.CHAR = function(v) {
    return [v.charCodeAt(0)];
};

/**
 * @constant
 * @type {number}
 */
sizeOf.CHAR = constant(1);

/**
 * Convert an ASCII string to a list of bytes.
 * @param {string}
 * @returns {Array}
 */
encode.CHARARRAY = function(v) {
    if (typeof v === 'undefined') {
        v = '';
        console.warn('Undefined CHARARRAY encountered and treated as an empty string. This is probably caused by a missing glyph name.');
    }
    var b = [];
    for (var i = 0; i < v.length; i += 1) {
        b[i] = v.charCodeAt(i);
    }

    return b;
};

/**
 * @param {Array}
 * @returns {number}
 */
sizeOf.CHARARRAY = function(v) {
    if (typeof v === 'undefined') {
        return 0;
    }
    return v.length;
};

/**
 * Convert a 16-bit unsigned integer to a list of 2 bytes.
 * @param {number}
 * @returns {Array}
 */
encode.USHORT = function(v) {
    return [(v >> 8) & 0xFF, v & 0xFF];
};

/**
 * @constant
 * @type {number}
 */
sizeOf.USHORT = constant(2);

/**
 * Convert a 16-bit signed integer to a list of 2 bytes.
 * @param {number}
 * @returns {Array}
 */
encode.SHORT = function(v) {
    // Two's complement
    if (v >= LIMIT16) {
        v = -(2 * LIMIT16 - v);
    }

    return [(v >> 8) & 0xFF, v & 0xFF];
};

/**
 * @constant
 * @type {number}
 */
sizeOf.SHORT = constant(2);

/**
 * Convert a 24-bit unsigned integer to a list of 3 bytes.
 * @param {number}
 * @returns {Array}
 */
encode.UINT24 = function(v) {
    return [(v >> 16) & 0xFF, (v >> 8) & 0xFF, v & 0xFF];
};

/**
 * @constant
 * @type {number}
 */
sizeOf.UINT24 = constant(3);

/**
 * Convert a 32-bit unsigned integer to a list of 4 bytes.
 * @param {number}
 * @returns {Array}
 */
encode.ULONG = function(v) {
    return [(v >> 24) & 0xFF, (v >> 16) & 0xFF, (v >> 8) & 0xFF, v & 0xFF];
};

/**
 * @constant
 * @type {number}
 */
sizeOf.ULONG = constant(4);

/**
 * Convert a 32-bit unsigned integer to a list of 4 bytes.
 * @param {number}
 * @returns {Array}
 */
encode.LONG = function(v) {
    // Two's complement
    if (v >= LIMIT32) {
        v = -(2 * LIMIT32 - v);
    }

    return [(v >> 24) & 0xFF, (v >> 16) & 0xFF, (v >> 8) & 0xFF, v & 0xFF];
};

/**
 * @constant
 * @type {number}
 */
sizeOf.LONG = constant(4);

encode.FIXED = encode.ULONG;
sizeOf.FIXED = sizeOf.ULONG;

encode.FWORD = encode.SHORT;
sizeOf.FWORD = sizeOf.SHORT;

encode.UFWORD = encode.USHORT;
sizeOf.UFWORD = sizeOf.USHORT;

/**
 * Convert a 32-bit Apple Mac timestamp integer to a list of 8 bytes, 64-bit timestamp.
 * @param {number}
 * @returns {Array}
 */
encode.LONGDATETIME = function(v) {
    return [0, 0, 0, 0, (v >> 24) & 0xFF, (v >> 16) & 0xFF, (v >> 8) & 0xFF, v & 0xFF];
};

/**
 * @constant
 * @type {number}
 */
sizeOf.LONGDATETIME = constant(8);

/**
 * Convert a 4-char tag to a list of 4 bytes.
 * @param {string}
 * @returns {Array}
 */
encode.TAG = function(v) {
    check.argument(v.length === 4, 'Tag should be exactly 4 ASCII characters.');
    return [v.charCodeAt(0),
            v.charCodeAt(1),
            v.charCodeAt(2),
            v.charCodeAt(3)];
};

/**
 * @constant
 * @type {number}
 */
sizeOf.TAG = constant(4);

// CFF data types ///////////////////////////////////////////////////////////

encode.Card8 = encode.BYTE;
sizeOf.Card8 = sizeOf.BYTE;

encode.Card16 = encode.USHORT;
sizeOf.Card16 = sizeOf.USHORT;

encode.OffSize = encode.BYTE;
sizeOf.OffSize = sizeOf.BYTE;

encode.SID = encode.USHORT;
sizeOf.SID = sizeOf.USHORT;

// Convert a numeric operand or charstring number to a variable-size list of bytes.
/**
 * Convert a numeric operand or charstring number to a variable-size list of bytes.
 * @param {number}
 * @returns {Array}
 */
encode.NUMBER = function(v) {
    if (v >= -107 && v <= 107) {
        return [v + 139];
    } else if (v >= 108 && v <= 1131) {
        v = v - 108;
        return [(v >> 8) + 247, v & 0xFF];
    } else if (v >= -1131 && v <= -108) {
        v = -v - 108;
        return [(v >> 8) + 251, v & 0xFF];
    } else if (v >= -32768 && v <= 32767) {
        return encode.NUMBER16(v);
    } else {
        return encode.NUMBER32(v);
    }
};

/**
 * @param {number}
 * @returns {number}
 */
sizeOf.NUMBER = function(v) {
    return encode.NUMBER(v).length;
};

/**
 * Convert a signed number between -32768 and +32767 to a three-byte value.
 * This ensures we always use three bytes, but is not the most compact format.
 * @param {number}
 * @returns {Array}
 */
encode.NUMBER16 = function(v) {
    return [28, (v >> 8) & 0xFF, v & 0xFF];
};

/**
 * @constant
 * @type {number}
 */
sizeOf.NUMBER16 = constant(3);

/**
 * Convert a signed number between -(2^31) and +(2^31-1) to a five-byte value.
 * This is useful if you want to be sure you always use four bytes,
 * at the expense of wasting a few bytes for smaller numbers.
 * @param {number}
 * @returns {Array}
 */
encode.NUMBER32 = function(v) {
    return [29, (v >> 24) & 0xFF, (v >> 16) & 0xFF, (v >> 8) & 0xFF, v & 0xFF];
};

/**
 * @constant
 * @type {number}
 */
sizeOf.NUMBER32 = constant(5);

/**
 * @param {number}
 * @returns {Array}
 */
encode.REAL = function(v) {
    var value = v.toString();

    // Some numbers use an epsilon to encode the value. (e.g. JavaScript will store 0.0000001 as 1e-7)
    // This code converts it back to a number without the epsilon.
    var m = /\.(\d*?)(?:9{5,20}|0{5,20})\d{0,2}(?:e(.+)|$)/.exec(value);
    if (m) {
        var epsilon = parseFloat('1e' + ((m[2] ? +m[2] : 0) + m[1].length));
        value = (Math.round(v * epsilon) / epsilon).toString();
    }

    var nibbles = '';
    for (var i = 0, ii = value.length; i < ii; i += 1) {
        var c = value[i];
        if (c === 'e') {
            nibbles += value[++i] === '-' ? 'c' : 'b';
        } else if (c === '.') {
            nibbles += 'a';
        } else if (c === '-') {
            nibbles += 'e';
        } else {
            nibbles += c;
        }
    }

    nibbles += (nibbles.length & 1) ? 'f' : 'ff';
    var out = [30];
    for (var i$1 = 0, ii$1 = nibbles.length; i$1 < ii$1; i$1 += 2) {
        out.push(parseInt(nibbles.substr(i$1, 2), 16));
    }

    return out;
};

/**
 * @param {number}
 * @returns {number}
 */
sizeOf.REAL = function(v) {
    return encode.REAL(v).length;
};

encode.NAME = encode.CHARARRAY;
sizeOf.NAME = sizeOf.CHARARRAY;

encode.STRING = encode.CHARARRAY;
sizeOf.STRING = sizeOf.CHARARRAY;

/**
 * @param {DataView} data
 * @param {number} offset
 * @param {number} numBytes
 * @returns {string}
 */
decode.UTF8 = function(data, offset, numBytes) {
    var codePoints = [];
    var numChars = numBytes;
    for (var j = 0; j < numChars; j++, offset += 1) {
        codePoints[j] = data.getUint8(offset);
    }

    return String.fromCharCode.apply(null, codePoints);
};

/**
 * @param {DataView} data
 * @param {number} offset
 * @param {number} numBytes
 * @returns {string}
 */
decode.UTF16 = function(data, offset, numBytes) {
    var codePoints = [];
    var numChars = numBytes / 2;
    for (var j = 0; j < numChars; j++, offset += 2) {
        codePoints[j] = data.getUint16(offset);
    }

    return String.fromCharCode.apply(null, codePoints);
};

/**
 * Convert a JavaScript string to UTF16-BE.
 * @param {string}
 * @returns {Array}
 */
encode.UTF16 = function(v) {
    var b = [];
    for (var i = 0; i < v.length; i += 1) {
        var codepoint = v.charCodeAt(i);
        b[b.length] = (codepoint >> 8) & 0xFF;
        b[b.length] = codepoint & 0xFF;
    }

    return b;
};

/**
 * @param {string}
 * @returns {number}
 */
sizeOf.UTF16 = function(v) {
    return v.length * 2;
};

// Data for converting old eight-bit Macintosh encodings to Unicode.
// This representation is optimized for decoding; encoding is slower
// and needs more memory. The assumption is that all opentype.js users
// want to open fonts, but saving a font will be comparatively rare
// so it can be more expensive. Keyed by IANA character set name.
//
// Python script for generating these strings:
//
//     s = u''.join([chr(c).decode('mac_greek') for c in range(128, 256)])
//     print(s.encode('utf-8'))
/**
 * @private
 */
var eightBitMacEncodings = {
    'x-mac-croatian':  // Python: 'mac_croatian'
    'ÄÅÇÉÑÖÜáàâäãåçéèêëíìîïñóòôöõúùûü†°¢£§•¶ß®Š™´¨≠ŽØ∞±≤≥∆µ∂∑∏š∫ªºΩžø' +
    '¿¡¬√ƒ≈Ć«Č… ÀÃÕŒœĐ—“”‘’÷◊©⁄€‹›Æ»–·‚„‰ÂćÁčÈÍÎÏÌÓÔđÒÚÛÙıˆ˜¯πË˚¸Êæˇ',
    'x-mac-cyrillic':  // Python: 'mac_cyrillic'
    'АБВГДЕЖЗИЙКЛМНОПРСТУФХЦЧШЩЪЫЬЭЮЯ†°Ґ£§•¶І®©™Ђђ≠Ѓѓ∞±≤≥іµґЈЄєЇїЉљЊњ' +
    'јЅ¬√ƒ≈∆«»… ЋћЌќѕ–—“”‘’÷„ЎўЏџ№Ёёяабвгдежзийклмнопрстуфхцчшщъыьэю',
    'x-mac-gaelic': // http://unicode.org/Public/MAPPINGS/VENDORS/APPLE/GAELIC.TXT
    'ÄÅÇÉÑÖÜáàâäãåçéèêëíìîïñóòôöõúùûü†°¢£§•¶ß®©™´¨≠ÆØḂ±≤≥ḃĊċḊḋḞḟĠġṀæø' +
    'ṁṖṗɼƒſṠ«»… ÀÃÕŒœ–—“”‘’ṡẛÿŸṪ€‹›Ŷŷṫ·Ỳỳ⁊ÂÊÁËÈÍÎÏÌÓÔ♣ÒÚÛÙıÝýŴŵẄẅẀẁẂẃ',
    'x-mac-greek':  // Python: 'mac_greek'
    'Ä¹²É³ÖÜ΅àâä΄¨çéèêë£™îï•½‰ôö¦€ùûü†ΓΔΘΛΞΠß®©ΣΪ§≠°·Α±≤≥¥ΒΕΖΗΙΚΜΦΫΨΩ' +
    'άΝ¬ΟΡ≈Τ«»… ΥΧΆΈœ–―“”‘’÷ΉΊΌΎέήίόΏύαβψδεφγηιξκλμνοπώρστθωςχυζϊϋΐΰ\u00AD',
    'x-mac-icelandic':  // Python: 'mac_iceland'
    'ÄÅÇÉÑÖÜáàâäãåçéèêëíìîïñóòôöõúùûüÝ°¢£§•¶ß®©™´¨≠ÆØ∞±≤≥¥µ∂∑∏π∫ªºΩæø' +
    '¿¡¬√ƒ≈∆«»… ÀÃÕŒœ–—“”‘’÷◊ÿŸ⁄€ÐðÞþý·‚„‰ÂÊÁËÈÍÎÏÌÓÔÒÚÛÙıˆ˜¯˘˙˚¸˝˛ˇ',
    'x-mac-inuit': // http://unicode.org/Public/MAPPINGS/VENDORS/APPLE/INUIT.TXT
    'ᐃᐄᐅᐆᐊᐋᐱᐲᐳᐴᐸᐹᑉᑎᑏᑐᑑᑕᑖᑦᑭᑮᑯᑰᑲᑳᒃᒋᒌᒍᒎᒐᒑ°ᒡᒥᒦ•¶ᒧ®©™ᒨᒪᒫᒻᓂᓃᓄᓅᓇᓈᓐᓯᓰᓱᓲᓴᓵᔅᓕᓖᓗ' +
    'ᓘᓚᓛᓪᔨᔩᔪᔫᔭ… ᔮᔾᕕᕖᕗ–—“”‘’ᕘᕙᕚᕝᕆᕇᕈᕉᕋᕌᕐᕿᖀᖁᖂᖃᖄᖅᖏᖐᖑᖒᖓᖔᖕᙱᙲᙳᙴᙵᙶᖖᖠᖡᖢᖣᖤᖥᖦᕼŁł',
    'x-mac-ce':  // Python: 'mac_latin2'
    'ÄĀāÉĄÖÜáąČäčĆćéŹźĎíďĒēĖóėôöõúĚěü†°Ę£§•¶ß®©™ę¨≠ģĮįĪ≤≥īĶ∂∑łĻļĽľĹĺŅ' +
    'ņŃ¬√ńŇ∆«»… ňŐÕőŌ–—“”‘’÷◊ōŔŕŘ‹›řŖŗŠ‚„šŚśÁŤťÍŽžŪÓÔūŮÚůŰűŲųÝýķŻŁżĢˇ',
    macintosh:  // Python: 'mac_roman'
    'ÄÅÇÉÑÖÜáàâäãåçéèêëíìîïñóòôöõúùûü†°¢£§•¶ß®©™´¨≠ÆØ∞±≤≥¥µ∂∑∏π∫ªºΩæø' +
    '¿¡¬√ƒ≈∆«»… ÀÃÕŒœ–—“”‘’÷◊ÿŸ⁄€‹›ﬁﬂ‡·‚„‰ÂÊÁËÈÍÎÏÌÓÔÒÚÛÙıˆ˜¯˘˙˚¸˝˛ˇ',
    'x-mac-romanian':  // Python: 'mac_romanian'
    'ÄÅÇÉÑÖÜáàâäãåçéèêëíìîïñóòôöõúùûü†°¢£§•¶ß®©™´¨≠ĂȘ∞±≤≥¥µ∂∑∏π∫ªºΩăș' +
    '¿¡¬√ƒ≈∆«»… ÀÃÕŒœ–—“”‘’÷◊ÿŸ⁄€‹›Țț‡·‚„‰ÂÊÁËÈÍÎÏÌÓÔÒÚÛÙıˆ˜¯˘˙˚¸˝˛ˇ',
    'x-mac-turkish':  // Python: 'mac_turkish'
    'ÄÅÇÉÑÖÜáàâäãåçéèêëíìîïñóòôöõúùûü†°¢£§•¶ß®©™´¨≠ÆØ∞±≤≥¥µ∂∑∏π∫ªºΩæø' +
    '¿¡¬√ƒ≈∆«»… ÀÃÕŒœ–—“”‘’÷◊ÿŸĞğİıŞş‡·‚„‰ÂÊÁËÈÍÎÏÌÓÔÒÚÛÙˆ˜¯˘˙˚¸˝˛ˇ'
};

/**
 * Decodes an old-style Macintosh string. Returns either a Unicode JavaScript
 * string, or 'undefined' if the encoding is unsupported. For example, we do
 * not support Chinese, Japanese or Korean because these would need large
 * mapping tables.
 * @param {DataView} dataView
 * @param {number} offset
 * @param {number} dataLength
 * @param {string} encoding
 * @returns {string}
 */
decode.MACSTRING = function(dataView, offset, dataLength, encoding) {
    var table = eightBitMacEncodings[encoding];
    if (table === undefined) {
        return undefined;
    }

    var result = '';
    for (var i = 0; i < dataLength; i++) {
        var c = dataView.getUint8(offset + i);
        // In all eight-bit Mac encodings, the characters 0x00..0x7F are
        // mapped to U+0000..U+007F; we only need to look up the others.
        if (c <= 0x7F) {
            result += String.fromCharCode(c);
        } else {
            result += table[c & 0x7F];
        }
    }

    return result;
};

// Helper function for encode.MACSTRING. Returns a dictionary for mapping
// Unicode character codes to their 8-bit MacOS equivalent. This table
// is not exactly a super cheap data structure, but we do not care because
// encoding Macintosh strings is only rarely needed in typical applications.
var macEncodingTableCache = typeof WeakMap === 'function' && new WeakMap();
var macEncodingCacheKeys;
var getMacEncodingTable = function (encoding) {
    // Since we use encoding as a cache key for WeakMap, it has to be
    // a String object and not a literal. And at least on NodeJS 2.10.1,
    // WeakMap requires that the same String instance is passed for cache hits.
    if (!macEncodingCacheKeys) {
        macEncodingCacheKeys = {};
        for (var e in eightBitMacEncodings) {
            /*jshint -W053 */  // Suppress "Do not use String as a constructor."
            macEncodingCacheKeys[e] = new String(e);
        }
    }

    var cacheKey = macEncodingCacheKeys[encoding];
    if (cacheKey === undefined) {
        return undefined;
    }

    // We can't do "if (cache.has(key)) {return cache.get(key)}" here:
    // since garbage collection may run at any time, it could also kick in
    // between the calls to cache.has() and cache.get(). In that case,
    // we would return 'undefined' even though we do support the encoding.
    if (macEncodingTableCache) {
        var cachedTable = macEncodingTableCache.get(cacheKey);
        if (cachedTable !== undefined) {
            return cachedTable;
        }
    }

    var decodingTable = eightBitMacEncodings[encoding];
    if (decodingTable === undefined) {
        return undefined;
    }

    var encodingTable = {};
    for (var i = 0; i < decodingTable.length; i++) {
        encodingTable[decodingTable.charCodeAt(i)] = i + 0x80;
    }

    if (macEncodingTableCache) {
        macEncodingTableCache.set(cacheKey, encodingTable);
    }

    return encodingTable;
};

/**
 * Encodes an old-style Macintosh string. Returns a byte array upon success.
 * If the requested encoding is unsupported, or if the input string contains
 * a character that cannot be expressed in the encoding, the function returns
 * 'undefined'.
 * @param {string} str
 * @param {string} encoding
 * @returns {Array}
 */
encode.MACSTRING = function(str, encoding) {
    var table = getMacEncodingTable(encoding);
    if (table === undefined) {
        return undefined;
    }

    var result = [];
    for (var i = 0; i < str.length; i++) {
        var c = str.charCodeAt(i);

        // In all eight-bit Mac encodings, the characters 0x00..0x7F are
        // mapped to U+0000..U+007F; we only need to look up the others.
        if (c >= 0x80) {
            c = table[c];
            if (c === undefined) {
                // str contains a Unicode character that cannot be encoded
                // in the requested encoding.
                return undefined;
            }
        }
        result[i] = c;
        // result.push(c);
    }

    return result;
};

/**
 * @param {string} str
 * @param {string} encoding
 * @returns {number}
 */
sizeOf.MACSTRING = function(str, encoding) {
    var b = encode.MACSTRING(str, encoding);
    if (b !== undefined) {
        return b.length;
    } else {
        return 0;
    }
};

// Helper for encode.VARDELTAS
function isByteEncodable(value) {
    return value >= -128 && value <= 127;
}

// Helper for encode.VARDELTAS
function encodeVarDeltaRunAsZeroes(deltas, pos, result) {
    var runLength = 0;
    var numDeltas = deltas.length;
    while (pos < numDeltas && runLength < 64 && deltas[pos] === 0) {
        ++pos;
        ++runLength;
    }
    result.push(0x80 | (runLength - 1));
    return pos;
}

// Helper for encode.VARDELTAS
function encodeVarDeltaRunAsBytes(deltas, offset, result) {
    var runLength = 0;
    var numDeltas = deltas.length;
    var pos = offset;
    while (pos < numDeltas && runLength < 64) {
        var value = deltas[pos];
        if (!isByteEncodable(value)) {
            break;
        }

        // Within a byte-encoded run of deltas, a single zero is best
        // stored literally as 0x00 value. However, if we have two or
        // more zeroes in a sequence, it is better to start a new run.
        // Fore example, the sequence of deltas [15, 15, 0, 15, 15]
        // becomes 6 bytes (04 0F 0F 00 0F 0F) when storing the zero
        // within the current run, but 7 bytes (01 0F 0F 80 01 0F 0F)
        // when starting a new run.
        if (value === 0 && pos + 1 < numDeltas && deltas[pos + 1] === 0) {
            break;
        }

        ++pos;
        ++runLength;
    }
    result.push(runLength - 1);
    for (var i = offset; i < pos; ++i) {
        result.push((deltas[i] + 256) & 0xff);
    }
    return pos;
}

// Helper for encode.VARDELTAS
function encodeVarDeltaRunAsWords(deltas, offset, result) {
    var runLength = 0;
    var numDeltas = deltas.length;
    var pos = offset;
    while (pos < numDeltas && runLength < 64) {
        var value = deltas[pos];

        // Within a word-encoded run of deltas, it is easiest to start
        // a new run (with a different encoding) whenever we encounter
        // a zero value. For example, the sequence [0x6666, 0, 0x7777]
        // needs 7 bytes when storing the zero inside the current run
        // (42 66 66 00 00 77 77), and equally 7 bytes when starting a
        // new run (40 66 66 80 40 77 77).
        if (value === 0) {
            break;
        }

        // Within a word-encoded run of deltas, a single value in the
        // range (-128..127) should be encoded within the current run
        // because it is more compact. For example, the sequence
        // [0x6666, 2, 0x7777] becomes 7 bytes when storing the value
        // literally (42 66 66 00 02 77 77), but 8 bytes when starting
        // a new run (40 66 66 00 02 40 77 77).
        if (isByteEncodable(value) && pos + 1 < numDeltas && isByteEncodable(deltas[pos + 1])) {
            break;
        }

        ++pos;
        ++runLength;
    }
    result.push(0x40 | (runLength - 1));
    for (var i = offset; i < pos; ++i) {
        var val = deltas[i];
        result.push(((val + 0x10000) >> 8) & 0xff, (val + 0x100) & 0xff);
    }
    return pos;
}

/**
 * Encode a list of variation adjustment deltas.
 *
 * Variation adjustment deltas are used in ‘gvar’ and ‘cvar’ tables.
 * They indicate how points (in ‘gvar’) or values (in ‘cvar’) get adjusted
 * when generating instances of variation fonts.
 *
 * @see https://www.microsoft.com/typography/otspec/gvar.htm
 * @see https://developer.apple.com/fonts/TrueType-Reference-Manual/RM06/Chap6gvar.html
 * @param {Array}
 * @return {Array}
 */
encode.VARDELTAS = function(deltas) {
    var pos = 0;
    var result = [];
    while (pos < deltas.length) {
        var value = deltas[pos];
        if (value === 0) {
            pos = encodeVarDeltaRunAsZeroes(deltas, pos, result);
        } else if (value >= -128 && value <= 127) {
            pos = encodeVarDeltaRunAsBytes(deltas, pos, result);
        } else {
            pos = encodeVarDeltaRunAsWords(deltas, pos, result);
        }
    }
    return result;
};

// Convert a list of values to a CFF INDEX structure.
// The values should be objects containing name / type / value.
/**
 * @param {Array} l
 * @returns {Array}
 */
encode.INDEX = function(l) {
    //var offset, offsets, offsetEncoder, encodedOffsets, encodedOffset, data,
    //    i, v;
    // Because we have to know which data type to use to encode the offsets,
    // we have to go through the values twice: once to encode the data and
    // calculate the offsets, then again to encode the offsets using the fitting data type.
    var offset = 1; // First offset is always 1.
    var offsets = [offset];
    var data = [];
    for (var i = 0; i < l.length; i += 1) {
        var v = encode.OBJECT(l[i]);
        Array.prototype.push.apply(data, v);
        offset += v.length;
        offsets.push(offset);
    }

    if (data.length === 0) {
        return [0, 0];
    }

    var encodedOffsets = [];
    var offSize = (1 + Math.floor(Math.log(offset) / Math.log(2)) / 8) | 0;
    var offsetEncoder = [undefined, encode.BYTE, encode.USHORT, encode.UINT24, encode.ULONG][offSize];
    for (var i$1 = 0; i$1 < offsets.length; i$1 += 1) {
        var encodedOffset = offsetEncoder(offsets[i$1]);
        Array.prototype.push.apply(encodedOffsets, encodedOffset);
    }

    return Array.prototype.concat(encode.Card16(l.length),
                           encode.OffSize(offSize),
                           encodedOffsets,
                           data);
};

/**
 * @param {Array}
 * @returns {number}
 */
sizeOf.INDEX = function(v) {
    return encode.INDEX(v).length;
};

/**
 * Convert an object to a CFF DICT structure.
 * The keys should be numeric.
 * The values should be objects containing name / type / value.
 * @param {Object} m
 * @returns {Array}
 */
encode.DICT = function(m) {
    var d = [];
    var keys = Object.keys(m);
    var length = keys.length;

    for (var i = 0; i < length; i += 1) {
        // Object.keys() return string keys, but our keys are always numeric.
        var k = parseInt(keys[i], 0);
        var v = m[k];
        // Value comes before the key.
        d = d.concat(encode.OPERAND(v.value, v.type));
        d = d.concat(encode.OPERATOR(k));
    }

    return d;
};

/**
 * @param {Object}
 * @returns {number}
 */
sizeOf.DICT = function(m) {
    return encode.DICT(m).length;
};

/**
 * @param {number}
 * @returns {Array}
 */
encode.OPERATOR = function(v) {
    if (v < 1200) {
        return [v];
    } else {
        return [12, v - 1200];
    }
};

/**
 * @param {Array} v
 * @param {string}
 * @returns {Array}
 */
encode.OPERAND = function(v, type) {
    var d = [];
    if (Array.isArray(type)) {
        for (var i = 0; i < type.length; i += 1) {
            check.argument(v.length === type.length, 'Not enough arguments given for type' + type);
            d = d.concat(encode.OPERAND(v[i], type[i]));
        }
    } else {
        if (type === 'SID') {
            d = d.concat(encode.NUMBER(v));
        } else if (type === 'offset') {
            // We make it easy for ourselves and always encode offsets as
            // 4 bytes. This makes offset calculation for the top dict easier.
            d = d.concat(encode.NUMBER32(v));
        } else if (type === 'number') {
            d = d.concat(encode.NUMBER(v));
        } else if (type === 'real') {
            d = d.concat(encode.REAL(v));
        } else {
            throw new Error('Unknown operand type ' + type);
            // FIXME Add support for booleans
        }
    }

    return d;
};

encode.OP = encode.BYTE;
sizeOf.OP = sizeOf.BYTE;

// memoize charstring encoding using WeakMap if available
var wmm = typeof WeakMap === 'function' && new WeakMap();

/**
 * Convert a list of CharString operations to bytes.
 * @param {Array}
 * @returns {Array}
 */
encode.CHARSTRING = function(ops) {
    // See encode.MACSTRING for why we don't do "if (wmm && wmm.has(ops))".
    if (wmm) {
        var cachedValue = wmm.get(ops);
        if (cachedValue !== undefined) {
            return cachedValue;
        }
    }

    var d = [];
    var length = ops.length;

    for (var i = 0; i < length; i += 1) {
        var op = ops[i];
        d = d.concat(encode[op.type](op.value));
    }

    if (wmm) {
        wmm.set(ops, d);
    }

    return d;
};

/**
 * @param {Array}
 * @returns {number}
 */
sizeOf.CHARSTRING = function(ops) {
    return encode.CHARSTRING(ops).length;
};

// Utility functions ////////////////////////////////////////////////////////

/**
 * Convert an object containing name / type / value to bytes.
 * @param {Object}
 * @returns {Array}
 */
encode.OBJECT = function(v) {
    var encodingFunction = encode[v.type];
    check.argument(encodingFunction !== undefined, 'No encoding function for type ' + v.type);
    return encodingFunction(v.value);
};

/**
 * @param {Object}
 * @returns {number}
 */
sizeOf.OBJECT = function(v) {
    var sizeOfFunction = sizeOf[v.type];
    check.argument(sizeOfFunction !== undefined, 'No sizeOf function for type ' + v.type);
    return sizeOfFunction(v.value);
};

/**
 * Convert a table object to bytes.
 * A table contains a list of fields containing the metadata (name, type and default value).
 * The table itself has the field values set as attributes.
 * @param {opentype.Table}
 * @returns {Array}
 */
encode.TABLE = function(table) {
    var d = [];
    var length = table.fields.length;
    var subtables = [];
    var subtableOffsets = [];

    for (var i = 0; i < length; i += 1) {
        var field = table.fields[i];
        var encodingFunction = encode[field.type];
        check.argument(encodingFunction !== undefined, 'No encoding function for field type ' + field.type + ' (' + field.name + ')');
        var value = table[field.name];
        if (value === undefined) {
            value = field.value;
        }

        var bytes = encodingFunction(value);

        if (field.type === 'TABLE') {
            subtableOffsets.push(d.length);
            d = d.concat([0, 0]);
            subtables.push(bytes);
        } else {
            d = d.concat(bytes);
        }
    }

    for (var i$1 = 0; i$1 < subtables.length; i$1 += 1) {
        var o = subtableOffsets[i$1];
        var offset = d.length;
        check.argument(offset < 65536, 'Table ' + table.tableName + ' too big.');
        d[o] = offset >> 8;
        d[o + 1] = offset & 0xff;
        d = d.concat(subtables[i$1]);
    }

    return d;
};

/**
 * @param {opentype.Table}
 * @returns {number}
 */
sizeOf.TABLE = function(table) {
    var numBytes = 0;
    var length = table.fields.length;

    for (var i = 0; i < length; i += 1) {
        var field = table.fields[i];
        var sizeOfFunction = sizeOf[field.type];
        check.argument(sizeOfFunction !== undefined, 'No sizeOf function for field type ' + field.type + ' (' + field.name + ')');
        var value = table[field.name];
        if (value === undefined) {
            value = field.value;
        }

        numBytes += sizeOfFunction(value);

        // Subtables take 2 more bytes for offsets.
        if (field.type === 'TABLE') {
            numBytes += 2;
        }
    }

    return numBytes;
};

encode.RECORD = encode.TABLE;
sizeOf.RECORD = sizeOf.TABLE;

// Merge in a list of bytes.
encode.LITERAL = function(v) {
    return v;
};

sizeOf.LITERAL = function(v) {
    return v.length;
};

// Table metadata

/**
 * @exports opentype.Table
 * @class
 * @param {string} tableName
 * @param {Array} fields
 * @param {Object} options
 * @constructor
 */
function Table(tableName, fields, options) {
    // For coverage tables with coverage format 2, we do not want to add the coverage data directly to the table object,
    // as this will result in wrong encoding order of the coverage data on serialization to bytes.
    // The fallback of using the field values directly when not present on the table is handled in types.encode.TABLE() already.
    if (fields.length && (fields[0].name !== 'coverageFormat' || fields[0].value === 1)) {
        for (var i = 0; i < fields.length; i += 1) {
            var field = fields[i];
            this[field.name] = field.value;
        }
    }

    this.tableName = tableName;
    this.fields = fields;
    if (options) {
        var optionKeys = Object.keys(options);
        for (var i$1 = 0; i$1 < optionKeys.length; i$1 += 1) {
            var k = optionKeys[i$1];
            var v = options[k];
            if (this[k] !== undefined) {
                this[k] = v;
            }
        }
    }
}

/**
 * Encodes the table and returns an array of bytes
 * @return {Array}
 */
Table.prototype.encode = function() {
    return encode.TABLE(this);
};

/**
 * Get the size of the table.
 * @return {number}
 */
Table.prototype.sizeOf = function() {
    return sizeOf.TABLE(this);
};

/**
 * @private
 */
function ushortList(itemName, list, count) {
    if (count === undefined) {
        count = list.length;
    }
    var fields = new Array(list.length + 1);
    fields[0] = {name: itemName + 'Count', type: 'USHORT', value: count};
    for (var i = 0; i < list.length; i++) {
        fields[i + 1] = {name: itemName + i, type: 'USHORT', value: list[i]};
    }
    return fields;
}

/**
 * @private
 */
function tableList(itemName, records, itemCallback) {
    var count = records.length;
    var fields = new Array(count + 1);
    fields[0] = {name: itemName + 'Count', type: 'USHORT', value: count};
    for (var i = 0; i < count; i++) {
        fields[i + 1] = {name: itemName + i, type: 'TABLE', value: itemCallback(records[i], i)};
    }
    return fields;
}

/**
 * @private
 */
function recordList(itemName, records, itemCallback) {
    var count = records.length;
    var fields = [];
    fields[0] = {name: itemName + 'Count', type: 'USHORT', value: count};
    for (var i = 0; i < count; i++) {
        fields = fields.concat(itemCallback(records[i], i));
    }
    return fields;
}

// Common Layout Tables

/**
 * @exports opentype.Coverage
 * @class
 * @param {opentype.Table}
 * @constructor
 * @extends opentype.Table
 */
function Coverage(coverageTable) {
    if (coverageTable.format === 1) {
        Table.call(this, 'coverageTable',
            [{name: 'coverageFormat', type: 'USHORT', value: 1}]
            .concat(ushortList('glyph', coverageTable.glyphs))
        );
    } else if (coverageTable.format === 2) {
        Table.call(this, 'coverageTable',
            [{name: 'coverageFormat', type: 'USHORT', value: 2}]
            .concat(recordList('rangeRecord', coverageTable.ranges, function(RangeRecord) {
                return [
                    {name: 'startGlyphID', type: 'USHORT', value: RangeRecord.start},
                    {name: 'endGlyphID', type: 'USHORT', value: RangeRecord.end},
                    {name: 'startCoverageIndex', type: 'USHORT', value: RangeRecord.index} ];
            }))
        );
    } else {
        check.assert(false, 'Coverage format must be 1 or 2.');
    }
}
Coverage.prototype = Object.create(Table.prototype);
Coverage.prototype.constructor = Coverage;

function ScriptList(scriptListTable) {
    Table.call(this, 'scriptListTable',
        recordList('scriptRecord', scriptListTable, function(scriptRecord, i) {
            var script = scriptRecord.script;
            var defaultLangSys = script.defaultLangSys;
            check.assert(!!defaultLangSys, 'Unable to write GSUB: script ' + scriptRecord.tag + ' has no default language system.');
            return [
                {name: 'scriptTag' + i, type: 'TAG', value: scriptRecord.tag},
                {name: 'script' + i, type: 'TABLE', value: new Table('scriptTable', [
                    {name: 'defaultLangSys', type: 'TABLE', value: new Table('defaultLangSys', [
                        {name: 'lookupOrder', type: 'USHORT', value: 0},
                        {name: 'reqFeatureIndex', type: 'USHORT', value: defaultLangSys.reqFeatureIndex}]
                        .concat(ushortList('featureIndex', defaultLangSys.featureIndexes)))}
                    ].concat(recordList('langSys', script.langSysRecords, function(langSysRecord, i) {
                        var langSys = langSysRecord.langSys;
                        return [
                            {name: 'langSysTag' + i, type: 'TAG', value: langSysRecord.tag},
                            {name: 'langSys' + i, type: 'TABLE', value: new Table('langSys', [
                                {name: 'lookupOrder', type: 'USHORT', value: 0},
                                {name: 'reqFeatureIndex', type: 'USHORT', value: langSys.reqFeatureIndex}
                                ].concat(ushortList('featureIndex', langSys.featureIndexes)))}
                        ];
                    })))}
            ];
        })
    );
}
ScriptList.prototype = Object.create(Table.prototype);
ScriptList.prototype.constructor = ScriptList;

/**
 * @exports opentype.FeatureList
 * @class
 * @param {opentype.Table}
 * @constructor
 * @extends opentype.Table
 */
function FeatureList(featureListTable) {
    Table.call(this, 'featureListTable',
        recordList('featureRecord', featureListTable, function(featureRecord, i) {
            var feature = featureRecord.feature;
            return [
                {name: 'featureTag' + i, type: 'TAG', value: featureRecord.tag},
                {name: 'feature' + i, type: 'TABLE', value: new Table('featureTable', [
                    {name: 'featureParams', type: 'USHORT', value: feature.featureParams} ].concat(ushortList('lookupListIndex', feature.lookupListIndexes)))}
            ];
        })
    );
}
FeatureList.prototype = Object.create(Table.prototype);
FeatureList.prototype.constructor = FeatureList;

/**
 * @exports opentype.LookupList
 * @class
 * @param {opentype.Table}
 * @param {Object}
 * @constructor
 * @extends opentype.Table
 */
function LookupList(lookupListTable, subtableMakers) {
    Table.call(this, 'lookupListTable', tableList('lookup', lookupListTable, function(lookupTable) {
        var subtableCallback = subtableMakers[lookupTable.lookupType];
        check.assert(!!subtableCallback, 'Unable to write GSUB lookup type ' + lookupTable.lookupType + ' tables.');
        return new Table('lookupTable', [
            {name: 'lookupType', type: 'USHORT', value: lookupTable.lookupType},
            {name: 'lookupFlag', type: 'USHORT', value: lookupTable.lookupFlag}
        ].concat(tableList('subtable', lookupTable.subtables, subtableCallback)));
    }));
}
LookupList.prototype = Object.create(Table.prototype);
LookupList.prototype.constructor = LookupList;

// Record = same as Table, but inlined (a Table has an offset and its data is further in the stream)
// Don't use offsets inside Records (probable bug), only in Tables.
var table = {
    Table: Table,
    Record: Table,
    Coverage: Coverage,
    ScriptList: ScriptList,
    FeatureList: FeatureList,
    LookupList: LookupList,
    ushortList: ushortList,
    tableList: tableList,
    recordList: recordList,
};

// Parsing utility functions

// Retrieve an unsigned byte from the DataView.
function getByte(dataView, offset) {
    return dataView.getUint8(offset);
}

// Retrieve an unsigned 16-bit short from the DataView.
// The value is stored in big endian.
function getUShort(dataView, offset) {
    return dataView.getUint16(offset, false);
}

// Retrieve a signed 16-bit short from the DataView.
// The value is stored in big endian.
function getShort(dataView, offset) {
    return dataView.getInt16(offset, false);
}

// Retrieve an unsigned 32-bit long from the DataView.
// The value is stored in big endian.
function getULong(dataView, offset) {
    return dataView.getUint32(offset, false);
}

// Retrieve a 32-bit signed fixed-point number (16.16) from the DataView.
// The value is stored in big endian.
function getFixed(dataView, offset) {
    var decimal = dataView.getInt16(offset, false);
    var fraction = dataView.getUint16(offset + 2, false);
    return decimal + fraction / 65535;
}

// Retrieve a 4-character tag from the DataView.
// Tags are used to identify tables.
function getTag(dataView, offset) {
    var tag = '';
    for (var i = offset; i < offset + 4; i += 1) {
        tag += String.fromCharCode(dataView.getInt8(i));
    }

    return tag;
}

// Retrieve an offset from the DataView.
// Offsets are 1 to 4 bytes in length, depending on the offSize argument.
function getOffset(dataView, offset, offSize) {
    var v = 0;
    for (var i = 0; i < offSize; i += 1) {
        v <<= 8;
        v += dataView.getUint8(offset + i);
    }

    return v;
}

// Retrieve a number of bytes from start offset to the end offset from the DataView.
function getBytes(dataView, startOffset, endOffset) {
    var bytes = [];
    for (var i = startOffset; i < endOffset; i += 1) {
        bytes.push(dataView.getUint8(i));
    }

    return bytes;
}

// Convert the list of bytes to a string.
function bytesToString(bytes) {
    var s = '';
    for (var i = 0; i < bytes.length; i += 1) {
        s += String.fromCharCode(bytes[i]);
    }

    return s;
}

var typeOffsets = {
    byte: 1,
    uShort: 2,
    short: 2,
    uLong: 4,
    fixed: 4,
    longDateTime: 8,
    tag: 4
};

// A stateful parser that changes the offset whenever a value is retrieved.
// The data is a DataView.
function Parser(data, offset) {
    this.data = data;
    this.offset = offset;
    this.relativeOffset = 0;
}

Parser.prototype.parseByte = function() {
    var v = this.data.getUint8(this.offset + this.relativeOffset);
    this.relativeOffset += 1;
    return v;
};

Parser.prototype.parseChar = function() {
    var v = this.data.getInt8(this.offset + this.relativeOffset);
    this.relativeOffset += 1;
    return v;
};

Parser.prototype.parseCard8 = Parser.prototype.parseByte;

Parser.prototype.parseUShort = function() {
    var v = this.data.getUint16(this.offset + this.relativeOffset);
    this.relativeOffset += 2;
    return v;
};

Parser.prototype.parseCard16 = Parser.prototype.parseUShort;
Parser.prototype.parseSID = Parser.prototype.parseUShort;
Parser.prototype.parseOffset16 = Parser.prototype.parseUShort;

Parser.prototype.parseShort = function() {
    var v = this.data.getInt16(this.offset + this.relativeOffset);
    this.relativeOffset += 2;
    return v;
};

Parser.prototype.parseF2Dot14 = function() {
    var v = this.data.getInt16(this.offset + this.relativeOffset) / 16384;
    this.relativeOffset += 2;
    return v;
};

Parser.prototype.parseULong = function() {
    var v = getULong(this.data, this.offset + this.relativeOffset);
    this.relativeOffset += 4;
    return v;
};

Parser.prototype.parseOffset32 = Parser.prototype.parseULong;

Parser.prototype.parseFixed = function() {
    var v = getFixed(this.data, this.offset + this.relativeOffset);
    this.relativeOffset += 4;
    return v;
};

Parser.prototype.parseString = function(length) {
    var dataView = this.data;
    var offset = this.offset + this.relativeOffset;
    var string = '';
    this.relativeOffset += length;
    for (var i = 0; i < length; i++) {
        string += String.fromCharCode(dataView.getUint8(offset + i));
    }

    return string;
};

Parser.prototype.parseTag = function() {
    return this.parseString(4);
};

// LONGDATETIME is a 64-bit integer.
// JavaScript and unix timestamps traditionally use 32 bits, so we
// only take the last 32 bits.
// + Since until 2038 those bits will be filled by zeros we can ignore them.
Parser.prototype.parseLongDateTime = function() {
    var v = getULong(this.data, this.offset + this.relativeOffset + 4);
    // Subtract seconds between 01/01/1904 and 01/01/1970
    // to convert Apple Mac timestamp to Standard Unix timestamp
    v -= 2082844800;
    this.relativeOffset += 8;
    return v;
};

Parser.prototype.parseVersion = function(minorBase) {
    var major = getUShort(this.data, this.offset + this.relativeOffset);

    // How to interpret the minor version is very vague in the spec. 0x5000 is 5, 0x1000 is 1
    // Default returns the correct number if minor = 0xN000 where N is 0-9
    // Set minorBase to 1 for tables that use minor = N where N is 0-9
    var minor = getUShort(this.data, this.offset + this.relativeOffset + 2);
    this.relativeOffset += 4;
    if (minorBase === undefined) { minorBase = 0x1000; }
    return major + minor / minorBase / 10;
};

Parser.prototype.skip = function(type, amount) {
    if (amount === undefined) {
        amount = 1;
    }

    this.relativeOffset += typeOffsets[type] * amount;
};

///// Parsing lists and records ///////////////////////////////

// Parse a list of 32 bit unsigned integers.
Parser.prototype.parseULongList = function(count) {
    if (count === undefined) { count = this.parseULong(); }
    var offsets = new Array(count);
    var dataView = this.data;
    var offset = this.offset + this.relativeOffset;
    for (var i = 0; i < count; i++) {
        offsets[i] = dataView.getUint32(offset);
        offset += 4;
    }

    this.relativeOffset += count * 4;
    return offsets;
};

// Parse a list of 16 bit unsigned integers. The length of the list can be read on the stream
// or provided as an argument.
Parser.prototype.parseOffset16List =
Parser.prototype.parseUShortList = function(count) {
    if (count === undefined) { count = this.parseUShort(); }
    var offsets = new Array(count);
    var dataView = this.data;
    var offset = this.offset + this.relativeOffset;
    for (var i = 0; i < count; i++) {
        offsets[i] = dataView.getUint16(offset);
        offset += 2;
    }

    this.relativeOffset += count * 2;
    return offsets;
};

// Parses a list of 16 bit signed integers.
Parser.prototype.parseShortList = function(count) {
    var list = new Array(count);
    var dataView = this.data;
    var offset = this.offset + this.relativeOffset;
    for (var i = 0; i < count; i++) {
        list[i] = dataView.getInt16(offset);
        offset += 2;
    }

    this.relativeOffset += count * 2;
    return list;
};

// Parses a list of bytes.
Parser.prototype.parseByteList = function(count) {
    var list = new Array(count);
    var dataView = this.data;
    var offset = this.offset + this.relativeOffset;
    for (var i = 0; i < count; i++) {
        list[i] = dataView.getUint8(offset++);
    }

    this.relativeOffset += count;
    return list;
};

/**
 * Parse a list of items.
 * Record count is optional, if omitted it is read from the stream.
 * itemCallback is one of the Parser methods.
 */
Parser.prototype.parseList = function(count, itemCallback) {
    if (!itemCallback) {
        itemCallback = count;
        count = this.parseUShort();
    }
    var list = new Array(count);
    for (var i = 0; i < count; i++) {
        list[i] = itemCallback.call(this);
    }
    return list;
};

Parser.prototype.parseList32 = function(count, itemCallback) {
    if (!itemCallback) {
        itemCallback = count;
        count = this.parseULong();
    }
    var list = new Array(count);
    for (var i = 0; i < count; i++) {
        list[i] = itemCallback.call(this);
    }
    return list;
};

/**
 * Parse a list of records.
 * Record count is optional, if omitted it is read from the stream.
 * Example of recordDescription: { sequenceIndex: Parser.uShort, lookupListIndex: Parser.uShort }
 */
Parser.prototype.parseRecordList = function(count, recordDescription) {
    // If the count argument is absent, read it in the stream.
    if (!recordDescription) {
        recordDescription = count;
        count = this.parseUShort();
    }
    var records = new Array(count);
    var fields = Object.keys(recordDescription);
    for (var i = 0; i < count; i++) {
        var rec = {};
        for (var j = 0; j < fields.length; j++) {
            var fieldName = fields[j];
            var fieldType = recordDescription[fieldName];
            rec[fieldName] = fieldType.call(this);
        }
        records[i] = rec;
    }
    return records;
};

Parser.prototype.parseRecordList32 = function(count, recordDescription) {
    // If the count argument is absent, read it in the stream.
    if (!recordDescription) {
        recordDescription = count;
        count = this.parseULong();
    }
    var records = new Array(count);
    var fields = Object.keys(recordDescription);
    for (var i = 0; i < count; i++) {
        var rec = {};
        for (var j = 0; j < fields.length; j++) {
            var fieldName = fields[j];
            var fieldType = recordDescription[fieldName];
            rec[fieldName] = fieldType.call(this);
        }
        records[i] = rec;
    }
    return records;
};

// Parse a data structure into an object
// Example of description: { sequenceIndex: Parser.uShort, lookupListIndex: Parser.uShort }
Parser.prototype.parseStruct = function(description) {
    if (typeof description === 'function') {
        return description.call(this);
    } else {
        var fields = Object.keys(description);
        var struct = {};
        for (var j = 0; j < fields.length; j++) {
            var fieldName = fields[j];
            var fieldType = description[fieldName];
            struct[fieldName] = fieldType.call(this);
        }
        return struct;
    }
};

/**
 * Parse a GPOS valueRecord
 * https://docs.microsoft.com/en-us/typography/opentype/spec/gpos#value-record
 * valueFormat is optional, if omitted it is read from the stream.
 */
Parser.prototype.parseValueRecord = function(valueFormat) {
    if (valueFormat === undefined) {
        valueFormat = this.parseUShort();
    }
    if (valueFormat === 0) {
        // valueFormat2 in kerning pairs is most often 0
        // in this case return undefined instead of an empty object, to save space
        return;
    }
    var valueRecord = {};

    if (valueFormat & 0x0001) { valueRecord.xPlacement = this.parseShort(); }
    if (valueFormat & 0x0002) { valueRecord.yPlacement = this.parseShort(); }
    if (valueFormat & 0x0004) { valueRecord.xAdvance = this.parseShort(); }
    if (valueFormat & 0x0008) { valueRecord.yAdvance = this.parseShort(); }

    // Device table (non-variable font) / VariationIndex table (variable font) not supported
    // https://docs.microsoft.com/fr-fr/typography/opentype/spec/chapter2#devVarIdxTbls
    if (valueFormat & 0x0010) { valueRecord.xPlaDevice = undefined; this.parseShort(); }
    if (valueFormat & 0x0020) { valueRecord.yPlaDevice = undefined; this.parseShort(); }
    if (valueFormat & 0x0040) { valueRecord.xAdvDevice = undefined; this.parseShort(); }
    if (valueFormat & 0x0080) { valueRecord.yAdvDevice = undefined; this.parseShort(); }

    return valueRecord;
};

/**
 * Parse a list of GPOS valueRecords
 * https://docs.microsoft.com/en-us/typography/opentype/spec/gpos#value-record
 * valueFormat and valueCount are read from the stream.
 */
Parser.prototype.parseValueRecordList = function() {
    var valueFormat = this.parseUShort();
    var valueCount = this.parseUShort();
    var values = new Array(valueCount);
    for (var i = 0; i < valueCount; i++) {
        values[i] = this.parseValueRecord(valueFormat);
    }
    return values;
};

Parser.prototype.parsePointer = function(description) {
    var structOffset = this.parseOffset16();
    if (structOffset > 0) {
        // NULL offset => return undefined
        return new Parser(this.data, this.offset + structOffset).parseStruct(description);
    }
    return undefined;
};

Parser.prototype.parsePointer32 = function(description) {
    var structOffset = this.parseOffset32();
    if (structOffset > 0) {
        // NULL offset => return undefined
        return new Parser(this.data, this.offset + structOffset).parseStruct(description);
    }
    return undefined;
};

/**
 * Parse a list of offsets to lists of 16-bit integers,
 * or a list of offsets to lists of offsets to any kind of items.
 * If itemCallback is not provided, a list of list of UShort is assumed.
 * If provided, itemCallback is called on each item and must parse the item.
 * See examples in tables/gsub.js
 */
Parser.prototype.parseListOfLists = function(itemCallback) {
    var offsets = this.parseOffset16List();
    var count = offsets.length;
    var relativeOffset = this.relativeOffset;
    var list = new Array(count);
    for (var i = 0; i < count; i++) {
        var start = offsets[i];
        if (start === 0) {
            // NULL offset
            // Add i as owned property to list. Convenient with assert.
            list[i] = undefined;
            continue;
        }
        this.relativeOffset = start;
        if (itemCallback) {
            var subOffsets = this.parseOffset16List();
            var subList = new Array(subOffsets.length);
            for (var j = 0; j < subOffsets.length; j++) {
                this.relativeOffset = start + subOffsets[j];
                subList[j] = itemCallback.call(this);
            }
            list[i] = subList;
        } else {
            list[i] = this.parseUShortList();
        }
    }
    this.relativeOffset = relativeOffset;
    return list;
};

///// Complex tables parsing //////////////////////////////////

// Parse a coverage table in a GSUB, GPOS or GDEF table.
// https://www.microsoft.com/typography/OTSPEC/chapter2.htm
// parser.offset must point to the start of the table containing the coverage.
Parser.prototype.parseCoverage = function() {
    var startOffset = this.offset + this.relativeOffset;
    var format = this.parseUShort();
    var count = this.parseUShort();
    if (format === 1) {
        return {
            format: 1,
            glyphs: this.parseUShortList(count)
        };
    } else if (format === 2) {
        var ranges = new Array(count);
        for (var i = 0; i < count; i++) {
            ranges[i] = {
                start: this.parseUShort(),
                end: this.parseUShort(),
                index: this.parseUShort()
            };
        }
        return {
            format: 2,
            ranges: ranges
        };
    }
    throw new Error('0x' + startOffset.toString(16) + ': Coverage format must be 1 or 2.');
};

// Parse a Class Definition Table in a GSUB, GPOS or GDEF table.
// https://www.microsoft.com/typography/OTSPEC/chapter2.htm
Parser.prototype.parseClassDef = function() {
    var startOffset = this.offset + this.relativeOffset;
    var format = this.parseUShort();
    if (format === 1) {
        return {
            format: 1,
            startGlyph: this.parseUShort(),
            classes: this.parseUShortList()
        };
    } else if (format === 2) {
        return {
            format: 2,
            ranges: this.parseRecordList({
                start: Parser.uShort,
                end: Parser.uShort,
                classId: Parser.uShort
            })
        };
    }
    throw new Error('0x' + startOffset.toString(16) + ': ClassDef format must be 1 or 2.');
};

///// Static methods ///////////////////////////////////
// These convenience methods can be used as callbacks and should be called with "this" context set to a Parser instance.

Parser.list = function(count, itemCallback) {
    return function() {
        return this.parseList(count, itemCallback);
    };
};

Parser.list32 = function(count, itemCallback) {
    return function() {
        return this.parseList32(count, itemCallback);
    };
};

Parser.recordList = function(count, recordDescription) {
    return function() {
        return this.parseRecordList(count, recordDescription);
    };
};

Parser.recordList32 = function(count, recordDescription) {
    return function() {
        return this.parseRecordList32(count, recordDescription);
    };
};

Parser.pointer = function(description) {
    return function() {
        return this.parsePointer(description);
    };
};

Parser.pointer32 = function(description) {
    return function() {
        return this.parsePointer32(description);
    };
};

Parser.tag = Parser.prototype.parseTag;
Parser.byte = Parser.prototype.parseByte;
Parser.uShort = Parser.offset16 = Parser.prototype.parseUShort;
Parser.uShortList = Parser.prototype.parseUShortList;
Parser.uLong = Parser.offset32 = Parser.prototype.parseULong;
Parser.uLongList = Parser.prototype.parseULongList;
Parser.struct = Parser.prototype.parseStruct;
Parser.coverage = Parser.prototype.parseCoverage;
Parser.classDef = Parser.prototype.parseClassDef;

///// Script, Feature, Lookup lists ///////////////////////////////////////////////
// https://www.microsoft.com/typography/OTSPEC/chapter2.htm

var langSysTable = {
    reserved: Parser.uShort,
    reqFeatureIndex: Parser.uShort,
    featureIndexes: Parser.uShortList
};

Parser.prototype.parseScriptList = function() {
    return this.parsePointer(Parser.recordList({
        tag: Parser.tag,
        script: Parser.pointer({
            defaultLangSys: Parser.pointer(langSysTable),
            langSysRecords: Parser.recordList({
                tag: Parser.tag,
                langSys: Parser.pointer(langSysTable)
            })
        })
    })) || [];
};

Parser.prototype.parseFeatureList = function() {
    return this.parsePointer(Parser.recordList({
        tag: Parser.tag,
        feature: Parser.pointer({
            featureParams: Parser.offset16,
            lookupListIndexes: Parser.uShortList
        })
    })) || [];
};

Parser.prototype.parseLookupList = function(lookupTableParsers) {
    return this.parsePointer(Parser.list(Parser.pointer(function() {
        var lookupType = this.parseUShort();
        check.argument(1 <= lookupType && lookupType <= 9, 'GPOS/GSUB lookup type ' + lookupType + ' unknown.');
        var lookupFlag = this.parseUShort();
        var useMarkFilteringSet = lookupFlag & 0x10;
        return {
            lookupType: lookupType,
            lookupFlag: lookupFlag,
            subtables: this.parseList(Parser.pointer(lookupTableParsers[lookupType])),
            markFilteringSet: useMarkFilteringSet ? this.parseUShort() : undefined
        };
    }))) || [];
};

Parser.prototype.parseFeatureVariationsList = function() {
    return this.parsePointer32(function() {
        var majorVersion = this.parseUShort();
        var minorVersion = this.parseUShort();
        check.argument(majorVersion === 1 && minorVersion < 1, 'GPOS/GSUB feature variations table unknown.');
        var featureVariations = this.parseRecordList32({
            conditionSetOffset: Parser.offset32,
            featureTableSubstitutionOffset: Parser.offset32
        });
        return featureVariations;
    }) || [];
};

var parse = {
    getByte: getByte,
    getCard8: getByte,
    getUShort: getUShort,
    getCard16: getUShort,
    getShort: getShort,
    getULong: getULong,
    getFixed: getFixed,
    getTag: getTag,
    getOffset: getOffset,
    getBytes: getBytes,
    bytesToString: bytesToString,
    Parser: Parser,
};

// The `cmap` table stores the mappings from characters to glyphs.

function parseCmapTableFormat12(cmap, p) {
    //Skip reserved.
    p.parseUShort();

    // Length in bytes of the sub-tables.
    cmap.length = p.parseULong();
    cmap.language = p.parseULong();

    var groupCount;
    cmap.groupCount = groupCount = p.parseULong();
    cmap.glyphIndexMap = {};

    for (var i = 0; i < groupCount; i += 1) {
        var startCharCode = p.parseULong();
        var endCharCode = p.parseULong();
        var startGlyphId = p.parseULong();

        for (var c = startCharCode; c <= endCharCode; c += 1) {
            cmap.glyphIndexMap[c] = startGlyphId;
            startGlyphId++;
        }
    }
}

function parseCmapTableFormat4(cmap, p, data, start, offset) {
    // Length in bytes of the sub-tables.
    cmap.length = p.parseUShort();
    cmap.language = p.parseUShort();

    // segCount is stored x 2.
    var segCount;
    cmap.segCount = segCount = p.parseUShort() >> 1;

    // Skip searchRange, entrySelector, rangeShift.
    p.skip('uShort', 3);

    // The "unrolled" mapping from character codes to glyph indices.
    cmap.glyphIndexMap = {};
    var endCountParser = new parse.Parser(data, start + offset + 14);
    var startCountParser = new parse.Parser(data, start + offset + 16 + segCount * 2);
    var idDeltaParser = new parse.Parser(data, start + offset + 16 + segCount * 4);
    var idRangeOffsetParser = new parse.Parser(data, start + offset + 16 + segCount * 6);
    var glyphIndexOffset = start + offset + 16 + segCount * 8;
    for (var i = 0; i < segCount - 1; i += 1) {
        var glyphIndex = (void 0);
        var endCount = endCountParser.parseUShort();
        var startCount = startCountParser.parseUShort();
        var idDelta = idDeltaParser.parseShort();
        var idRangeOffset = idRangeOffsetParser.parseUShort();
        for (var c = startCount; c <= endCount; c += 1) {
            if (idRangeOffset !== 0) {
                // The idRangeOffset is relative to the current position in the idRangeOffset array.
                // Take the current offset in the idRangeOffset array.
                glyphIndexOffset = (idRangeOffsetParser.offset + idRangeOffsetParser.relativeOffset - 2);

                // Add the value of the idRangeOffset, which will move us into the glyphIndex array.
                glyphIndexOffset += idRangeOffset;

                // Then add the character index of the current segment, multiplied by 2 for USHORTs.
                glyphIndexOffset += (c - startCount) * 2;
                glyphIndex = parse.getUShort(data, glyphIndexOffset);
                if (glyphIndex !== 0) {
                    glyphIndex = (glyphIndex + idDelta) & 0xFFFF;
                }
            } else {
                glyphIndex = (c + idDelta) & 0xFFFF;
            }

            cmap.glyphIndexMap[c] = glyphIndex;
        }
    }
}

// Parse the `cmap` table. This table stores the mappings from characters to glyphs.
// There are many available formats, but we only support the Windows format 4 and 12.
// This function returns a `CmapEncoding` object or null if no supported format could be found.
function parseCmapTable(data, start) {
    var cmap = {};
    cmap.version = parse.getUShort(data, start);
    check.argument(cmap.version === 0, 'cmap table version should be 0.');

    // The cmap table can contain many sub-tables, each with their own format.
    // We're only interested in a "platform 0" (Unicode format) and "platform 3" (Windows format) table.
    cmap.numTables = parse.getUShort(data, start + 2);
    var offset = -1;
    for (var i = cmap.numTables - 1; i >= 0; i -= 1) {
        var platformId = parse.getUShort(data, start + 4 + (i * 8));
        var encodingId = parse.getUShort(data, start + 4 + (i * 8) + 2);
        if ((platformId === 3 && (encodingId === 0 || encodingId === 1 || encodingId === 10)) ||
            (platformId === 0 && (encodingId === 0 || encodingId === 1 || encodingId === 2 || encodingId === 3 || encodingId === 4))) {
            offset = parse.getULong(data, start + 4 + (i * 8) + 4);
            break;
        }
    }

    if (offset === -1) {
        // There is no cmap table in the font that we support.
        throw new Error('No valid cmap sub-tables found.');
    }

    var p = new parse.Parser(data, start + offset);
    cmap.format = p.parseUShort();

    if (cmap.format === 12) {
        parseCmapTableFormat12(cmap, p);
    } else if (cmap.format === 4) {
        parseCmapTableFormat4(cmap, p, data, start, offset);
    } else {
        throw new Error('Only format 4 and 12 cmap tables are supported (found format ' + cmap.format + ').');
    }

    return cmap;
}

function addSegment(t, code, glyphIndex) {
    t.segments.push({
        end: code,
        start: code,
        delta: -(code - glyphIndex),
        offset: 0,
        glyphIndex: glyphIndex
    });
}

function addTerminatorSegment(t) {
    t.segments.push({
        end: 0xFFFF,
        start: 0xFFFF,
        delta: 1,
        offset: 0
    });
}

// Make cmap table, format 4 by default, 12 if needed only
function makeCmapTable(glyphs) {
    // Plan 0 is the base Unicode Plan but emojis, for example are on another plan, and needs cmap 12 format (with 32bit)
    var isPlan0Only = true;
    var i;

    // Check if we need to add cmap format 12 or if format 4 only is fine
    for (i = glyphs.length - 1; i > 0; i -= 1) {
        var g = glyphs.get(i);
        if (g.unicode > 65535) {
            console.log('Adding CMAP format 12 (needed!)');
            isPlan0Only = false;
            break;
        }
    }

    var cmapTable = [
        {name: 'version', type: 'USHORT', value: 0},
        {name: 'numTables', type: 'USHORT', value: isPlan0Only ? 1 : 2},

        // CMAP 4 header
        {name: 'platformID', type: 'USHORT', value: 3},
        {name: 'encodingID', type: 'USHORT', value: 1},
        {name: 'offset', type: 'ULONG', value: isPlan0Only ? 12 : (12 + 8)}
    ];

    if (!isPlan0Only)
        { cmapTable = cmapTable.concat([
            // CMAP 12 header
            {name: 'cmap12PlatformID', type: 'USHORT', value: 3}, // We encode only for PlatformID = 3 (Windows) because it is supported everywhere
            {name: 'cmap12EncodingID', type: 'USHORT', value: 10},
            {name: 'cmap12Offset', type: 'ULONG', value: 0}
        ]); }

    cmapTable = cmapTable.concat([
        // CMAP 4 Subtable
        {name: 'format', type: 'USHORT', value: 4},
        {name: 'cmap4Length', type: 'USHORT', value: 0},
        {name: 'language', type: 'USHORT', value: 0},
        {name: 'segCountX2', type: 'USHORT', value: 0},
        {name: 'searchRange', type: 'USHORT', value: 0},
        {name: 'entrySelector', type: 'USHORT', value: 0},
        {name: 'rangeShift', type: 'USHORT', value: 0}
    ]);

    var t = new table.Table('cmap', cmapTable);

    t.segments = [];
    for (i = 0; i < glyphs.length; i += 1) {
        var glyph = glyphs.get(i);
        for (var j = 0; j < glyph.unicodes.length; j += 1) {
            addSegment(t, glyph.unicodes[j], i);
        }

        t.segments = t.segments.sort(function (a, b) {
            return a.start - b.start;
        });
    }

    addTerminatorSegment(t);

    var segCount = t.segments.length;
    var segCountToRemove = 0;

    // CMAP 4
    // Set up parallel segment arrays.
    var endCounts = [];
    var startCounts = [];
    var idDeltas = [];
    var idRangeOffsets = [];
    var glyphIds = [];

    // CMAP 12
    var cmap12Groups = [];

    // Reminder this loop is not following the specification at 100%
    // The specification -> find suites of characters and make a group
    // Here we're doing one group for each letter
    // Doing as the spec can save 8 times (or more) space
    for (i = 0; i < segCount; i += 1) {
        var segment = t.segments[i];

        // CMAP 4
        if (segment.end <= 65535 && segment.start <= 65535) {
            endCounts = endCounts.concat({name: 'end_' + i, type: 'USHORT', value: segment.end});
            startCounts = startCounts.concat({name: 'start_' + i, type: 'USHORT', value: segment.start});
            idDeltas = idDeltas.concat({name: 'idDelta_' + i, type: 'SHORT', value: segment.delta});
            idRangeOffsets = idRangeOffsets.concat({name: 'idRangeOffset_' + i, type: 'USHORT', value: segment.offset});
            if (segment.glyphId !== undefined) {
                glyphIds = glyphIds.concat({name: 'glyph_' + i, type: 'USHORT', value: segment.glyphId});
            }
        } else {
            // Skip Unicode > 65535 (16bit unsigned max) for CMAP 4, will be added in CMAP 12
            segCountToRemove += 1;
        }

        // CMAP 12
        // Skip Terminator Segment
        if (!isPlan0Only && segment.glyphIndex !== undefined) {
            cmap12Groups = cmap12Groups.concat({name: 'cmap12Start_' + i, type: 'ULONG', value: segment.start});
            cmap12Groups = cmap12Groups.concat({name: 'cmap12End_' + i, type: 'ULONG', value: segment.end});
            cmap12Groups = cmap12Groups.concat({name: 'cmap12Glyph_' + i, type: 'ULONG', value: segment.glyphIndex});
        }
    }

    // CMAP 4 Subtable
    t.segCountX2 = (segCount - segCountToRemove) * 2;
    t.searchRange = Math.pow(2, Math.floor(Math.log((segCount - segCountToRemove)) / Math.log(2))) * 2;
    t.entrySelector = Math.log(t.searchRange / 2) / Math.log(2);
    t.rangeShift = t.segCountX2 - t.searchRange;

    t.fields = t.fields.concat(endCounts);
    t.fields.push({name: 'reservedPad', type: 'USHORT', value: 0});
    t.fields = t.fields.concat(startCounts);
    t.fields = t.fields.concat(idDeltas);
    t.fields = t.fields.concat(idRangeOffsets);
    t.fields = t.fields.concat(glyphIds);

    t.cmap4Length = 14 + // Subtable header
        endCounts.length * 2 +
        2 + // reservedPad
        startCounts.length * 2 +
        idDeltas.length * 2 +
        idRangeOffsets.length * 2 +
        glyphIds.length * 2;

    if (!isPlan0Only) {
        // CMAP 12 Subtable
        var cmap12Length = 16 + // Subtable header
            cmap12Groups.length * 4;

        t.cmap12Offset = 12 + (2 * 2) + 4 + t.cmap4Length;
        t.fields = t.fields.concat([
            {name: 'cmap12Format', type: 'USHORT', value: 12},
            {name: 'cmap12Reserved', type: 'USHORT', value: 0},
            {name: 'cmap12Length', type: 'ULONG', value: cmap12Length},
            {name: 'cmap12Language', type: 'ULONG', value: 0},
            {name: 'cmap12nGroups', type: 'ULONG', value: cmap12Groups.length / 3}
        ]);

        t.fields = t.fields.concat(cmap12Groups);
    }

    return t;
}

var cmap = { parse: parseCmapTable, make: makeCmapTable };

// Glyph encoding

var cffStandardStrings = [
    '.notdef', 'space', 'exclam', 'quotedbl', 'numbersign', 'dollar', 'percent', 'ampersand', 'quoteright',
    'parenleft', 'parenright', 'asterisk', 'plus', 'comma', 'hyphen', 'period', 'slash', 'zero', 'one', 'two',
    'three', 'four', 'five', 'six', 'seven', 'eight', 'nine', 'colon', 'semicolon', 'less', 'equal', 'greater',
    'question', 'at', 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S',
    'T', 'U', 'V', 'W', 'X', 'Y', 'Z', 'bracketleft', 'backslash', 'bracketright', 'asciicircum', 'underscore',
    'quoteleft', 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't',
    'u', 'v', 'w', 'x', 'y', 'z', 'braceleft', 'bar', 'braceright', 'asciitilde', 'exclamdown', 'cent', 'sterling',
    'fraction', 'yen', 'florin', 'section', 'currency', 'quotesingle', 'quotedblleft', 'guillemotleft',
    'guilsinglleft', 'guilsinglright', 'fi', 'fl', 'endash', 'dagger', 'daggerdbl', 'periodcentered', 'paragraph',
    'bullet', 'quotesinglbase', 'quotedblbase', 'quotedblright', 'guillemotright', 'ellipsis', 'perthousand',
    'questiondown', 'grave', 'acute', 'circumflex', 'tilde', 'macron', 'breve', 'dotaccent', 'dieresis', 'ring',
    'cedilla', 'hungarumlaut', 'ogonek', 'caron', 'emdash', 'AE', 'ordfeminine', 'Lslash', 'Oslash', 'OE',
    'ordmasculine', 'ae', 'dotlessi', 'lslash', 'oslash', 'oe', 'germandbls', 'onesuperior', 'logicalnot', 'mu',
    'trademark', 'Eth', 'onehalf', 'plusminus', 'Thorn', 'onequarter', 'divide', 'brokenbar', 'degree', 'thorn',
    'threequarters', 'twosuperior', 'registered', 'minus', 'eth', 'multiply', 'threesuperior', 'copyright',
    'Aacute', 'Acircumflex', 'Adieresis', 'Agrave', 'Aring', 'Atilde', 'Ccedilla', 'Eacute', 'Ecircumflex',
    'Edieresis', 'Egrave', 'Iacute', 'Icircumflex', 'Idieresis', 'Igrave', 'Ntilde', 'Oacute', 'Ocircumflex',
    'Odieresis', 'Ograve', 'Otilde', 'Scaron', 'Uacute', 'Ucircumflex', 'Udieresis', 'Ugrave', 'Yacute',
    'Ydieresis', 'Zcaron', 'aacute', 'acircumflex', 'adieresis', 'agrave', 'aring', 'atilde', 'ccedilla', 'eacute',
    'ecircumflex', 'edieresis', 'egrave', 'iacute', 'icircumflex', 'idieresis', 'igrave', 'ntilde', 'oacute',
    'ocircumflex', 'odieresis', 'ograve', 'otilde', 'scaron', 'uacute', 'ucircumflex', 'udieresis', 'ugrave',
    'yacute', 'ydieresis', 'zcaron', 'exclamsmall', 'Hungarumlautsmall', 'dollaroldstyle', 'dollarsuperior',
    'ampersandsmall', 'Acutesmall', 'parenleftsuperior', 'parenrightsuperior', '266 ff', 'onedotenleader',
    'zerooldstyle', 'oneoldstyle', 'twooldstyle', 'threeoldstyle', 'fouroldstyle', 'fiveoldstyle', 'sixoldstyle',
    'sevenoldstyle', 'eightoldstyle', 'nineoldstyle', 'commasuperior', 'threequartersemdash', 'periodsuperior',
    'questionsmall', 'asuperior', 'bsuperior', 'centsuperior', 'dsuperior', 'esuperior', 'isuperior', 'lsuperior',
    'msuperior', 'nsuperior', 'osuperior', 'rsuperior', 'ssuperior', 'tsuperior', 'ff', 'ffi', 'ffl',
    'parenleftinferior', 'parenrightinferior', 'Circumflexsmall', 'hyphensuperior', 'Gravesmall', 'Asmall',
    'Bsmall', 'Csmall', 'Dsmall', 'Esmall', 'Fsmall', 'Gsmall', 'Hsmall', 'Ismall', 'Jsmall', 'Ksmall', 'Lsmall',
    'Msmall', 'Nsmall', 'Osmall', 'Psmall', 'Qsmall', 'Rsmall', 'Ssmall', 'Tsmall', 'Usmall', 'Vsmall', 'Wsmall',
    'Xsmall', 'Ysmall', 'Zsmall', 'colonmonetary', 'onefitted', 'rupiah', 'Tildesmall', 'exclamdownsmall',
    'centoldstyle', 'Lslashsmall', 'Scaronsmall', 'Zcaronsmall', 'Dieresissmall', 'Brevesmall', 'Caronsmall',
    'Dotaccentsmall', 'Macronsmall', 'figuredash', 'hypheninferior', 'Ogoneksmall', 'Ringsmall', 'Cedillasmall',
    'questiondownsmall', 'oneeighth', 'threeeighths', 'fiveeighths', 'seveneighths', 'onethird', 'twothirds',
    'zerosuperior', 'foursuperior', 'fivesuperior', 'sixsuperior', 'sevensuperior', 'eightsuperior', 'ninesuperior',
    'zeroinferior', 'oneinferior', 'twoinferior', 'threeinferior', 'fourinferior', 'fiveinferior', 'sixinferior',
    'seveninferior', 'eightinferior', 'nineinferior', 'centinferior', 'dollarinferior', 'periodinferior',
    'commainferior', 'Agravesmall', 'Aacutesmall', 'Acircumflexsmall', 'Atildesmall', 'Adieresissmall',
    'Aringsmall', 'AEsmall', 'Ccedillasmall', 'Egravesmall', 'Eacutesmall', 'Ecircumflexsmall', 'Edieresissmall',
    'Igravesmall', 'Iacutesmall', 'Icircumflexsmall', 'Idieresissmall', 'Ethsmall', 'Ntildesmall', 'Ogravesmall',
    'Oacutesmall', 'Ocircumflexsmall', 'Otildesmall', 'Odieresissmall', 'OEsmall', 'Oslashsmall', 'Ugravesmall',
    'Uacutesmall', 'Ucircumflexsmall', 'Udieresissmall', 'Yacutesmall', 'Thornsmall', 'Ydieresissmall', '001.000',
    '001.001', '001.002', '001.003', 'Black', 'Bold', 'Book', 'Light', 'Medium', 'Regular', 'Roman', 'Semibold'];

var cffStandardEncoding = [
    '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '',
    '', '', '', '', 'space', 'exclam', 'quotedbl', 'numbersign', 'dollar', 'percent', 'ampersand', 'quoteright',
    'parenleft', 'parenright', 'asterisk', 'plus', 'comma', 'hyphen', 'period', 'slash', 'zero', 'one', 'two',
    'three', 'four', 'five', 'six', 'seven', 'eight', 'nine', 'colon', 'semicolon', 'less', 'equal', 'greater',
    'question', 'at', 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S',
    'T', 'U', 'V', 'W', 'X', 'Y', 'Z', 'bracketleft', 'backslash', 'bracketright', 'asciicircum', 'underscore',
    'quoteleft', 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't',
    'u', 'v', 'w', 'x', 'y', 'z', 'braceleft', 'bar', 'braceright', 'asciitilde', '', '', '', '', '', '', '', '',
    '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '',
    'exclamdown', 'cent', 'sterling', 'fraction', 'yen', 'florin', 'section', 'currency', 'quotesingle',
    'quotedblleft', 'guillemotleft', 'guilsinglleft', 'guilsinglright', 'fi', 'fl', '', 'endash', 'dagger',
    'daggerdbl', 'periodcentered', '', 'paragraph', 'bullet', 'quotesinglbase', 'quotedblbase', 'quotedblright',
    'guillemotright', 'ellipsis', 'perthousand', '', 'questiondown', '', 'grave', 'acute', 'circumflex', 'tilde',
    'macron', 'breve', 'dotaccent', 'dieresis', '', 'ring', 'cedilla', '', 'hungarumlaut', 'ogonek', 'caron',
    'emdash', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', 'AE', '', 'ordfeminine', '', '', '',
    '', 'Lslash', 'Oslash', 'OE', 'ordmasculine', '', '', '', '', '', 'ae', '', '', '', 'dotlessi', '', '',
    'lslash', 'oslash', 'oe', 'germandbls'];

var cffExpertEncoding = [
    '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '',
    '', '', '', '', 'space', 'exclamsmall', 'Hungarumlautsmall', '', 'dollaroldstyle', 'dollarsuperior',
    'ampersandsmall', 'Acutesmall', 'parenleftsuperior', 'parenrightsuperior', 'twodotenleader', 'onedotenleader',
    'comma', 'hyphen', 'period', 'fraction', 'zerooldstyle', 'oneoldstyle', 'twooldstyle', 'threeoldstyle',
    'fouroldstyle', 'fiveoldstyle', 'sixoldstyle', 'sevenoldstyle', 'eightoldstyle', 'nineoldstyle', 'colon',
    'semicolon', 'commasuperior', 'threequartersemdash', 'periodsuperior', 'questionsmall', '', 'asuperior',
    'bsuperior', 'centsuperior', 'dsuperior', 'esuperior', '', '', 'isuperior', '', '', 'lsuperior', 'msuperior',
    'nsuperior', 'osuperior', '', '', 'rsuperior', 'ssuperior', 'tsuperior', '', 'ff', 'fi', 'fl', 'ffi', 'ffl',
    'parenleftinferior', '', 'parenrightinferior', 'Circumflexsmall', 'hyphensuperior', 'Gravesmall', 'Asmall',
    'Bsmall', 'Csmall', 'Dsmall', 'Esmall', 'Fsmall', 'Gsmall', 'Hsmall', 'Ismall', 'Jsmall', 'Ksmall', 'Lsmall',
    'Msmall', 'Nsmall', 'Osmall', 'Psmall', 'Qsmall', 'Rsmall', 'Ssmall', 'Tsmall', 'Usmall', 'Vsmall', 'Wsmall',
    'Xsmall', 'Ysmall', 'Zsmall', 'colonmonetary', 'onefitted', 'rupiah', 'Tildesmall', '', '', '', '', '', '', '',
    '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '',
    'exclamdownsmall', 'centoldstyle', 'Lslashsmall', '', '', 'Scaronsmall', 'Zcaronsmall', 'Dieresissmall',
    'Brevesmall', 'Caronsmall', '', 'Dotaccentsmall', '', '', 'Macronsmall', '', '', 'figuredash', 'hypheninferior',
    '', '', 'Ogoneksmall', 'Ringsmall', 'Cedillasmall', '', '', '', 'onequarter', 'onehalf', 'threequarters',
    'questiondownsmall', 'oneeighth', 'threeeighths', 'fiveeighths', 'seveneighths', 'onethird', 'twothirds', '',
    '', 'zerosuperior', 'onesuperior', 'twosuperior', 'threesuperior', 'foursuperior', 'fivesuperior',
    'sixsuperior', 'sevensuperior', 'eightsuperior', 'ninesuperior', 'zeroinferior', 'oneinferior', 'twoinferior',
    'threeinferior', 'fourinferior', 'fiveinferior', 'sixinferior', 'seveninferior', 'eightinferior',
    'nineinferior', 'centinferior', 'dollarinferior', 'periodinferior', 'commainferior', 'Agravesmall',
    'Aacutesmall', 'Acircumflexsmall', 'Atildesmall', 'Adieresissmall', 'Aringsmall', 'AEsmall', 'Ccedillasmall',
    'Egravesmall', 'Eacutesmall', 'Ecircumflexsmall', 'Edieresissmall', 'Igravesmall', 'Iacutesmall',
    'Icircumflexsmall', 'Idieresissmall', 'Ethsmall', 'Ntildesmall', 'Ogravesmall', 'Oacutesmall',
    'Ocircumflexsmall', 'Otildesmall', 'Odieresissmall', 'OEsmall', 'Oslashsmall', 'Ugravesmall', 'Uacutesmall',
    'Ucircumflexsmall', 'Udieresissmall', 'Yacutesmall', 'Thornsmall', 'Ydieresissmall'];

var standardNames = [
    '.notdef', '.null', 'nonmarkingreturn', 'space', 'exclam', 'quotedbl', 'numbersign', 'dollar', 'percent',
    'ampersand', 'quotesingle', 'parenleft', 'parenright', 'asterisk', 'plus', 'comma', 'hyphen', 'period', 'slash',
    'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine', 'colon', 'semicolon', 'less',
    'equal', 'greater', 'question', 'at', 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O',
    'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z', 'bracketleft', 'backslash', 'bracketright',
    'asciicircum', 'underscore', 'grave', 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o',
    'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z', 'braceleft', 'bar', 'braceright', 'asciitilde',
    'Adieresis', 'Aring', 'Ccedilla', 'Eacute', 'Ntilde', 'Odieresis', 'Udieresis', 'aacute', 'agrave',
    'acircumflex', 'adieresis', 'atilde', 'aring', 'ccedilla', 'eacute', 'egrave', 'ecircumflex', 'edieresis',
    'iacute', 'igrave', 'icircumflex', 'idieresis', 'ntilde', 'oacute', 'ograve', 'ocircumflex', 'odieresis',
    'otilde', 'uacute', 'ugrave', 'ucircumflex', 'udieresis', 'dagger', 'degree', 'cent', 'sterling', 'section',
    'bullet', 'paragraph', 'germandbls', 'registered', 'copyright', 'trademark', 'acute', 'dieresis', 'notequal',
    'AE', 'Oslash', 'infinity', 'plusminus', 'lessequal', 'greaterequal', 'yen', 'mu', 'partialdiff', 'summation',
    'product', 'pi', 'integral', 'ordfeminine', 'ordmasculine', 'Omega', 'ae', 'oslash', 'questiondown',
    'exclamdown', 'logicalnot', 'radical', 'florin', 'approxequal', 'Delta', 'guillemotleft', 'guillemotright',
    'ellipsis', 'nonbreakingspace', 'Agrave', 'Atilde', 'Otilde', 'OE', 'oe', 'endash', 'emdash', 'quotedblleft',
    'quotedblright', 'quoteleft', 'quoteright', 'divide', 'lozenge', 'ydieresis', 'Ydieresis', 'fraction',
    'currency', 'guilsinglleft', 'guilsinglright', 'fi', 'fl', 'daggerdbl', 'periodcentered', 'quotesinglbase',
    'quotedblbase', 'perthousand', 'Acircumflex', 'Ecircumflex', 'Aacute', 'Edieresis', 'Egrave', 'Iacute',
    'Icircumflex', 'Idieresis', 'Igrave', 'Oacute', 'Ocircumflex', 'apple', 'Ograve', 'Uacute', 'Ucircumflex',
    'Ugrave', 'dotlessi', 'circumflex', 'tilde', 'macron', 'breve', 'dotaccent', 'ring', 'cedilla', 'hungarumlaut',
    'ogonek', 'caron', 'Lslash', 'lslash', 'Scaron', 'scaron', 'Zcaron', 'zcaron', 'brokenbar', 'Eth', 'eth',
    'Yacute', 'yacute', 'Thorn', 'thorn', 'minus', 'multiply', 'onesuperior', 'twosuperior', 'threesuperior',
    'onehalf', 'onequarter', 'threequarters', 'franc', 'Gbreve', 'gbreve', 'Idotaccent', 'Scedilla', 'scedilla',
    'Cacute', 'cacute', 'Ccaron', 'ccaron', 'dcroat'];

/**
 * This is the encoding used for fonts created from scratch.
 * It loops through all glyphs and finds the appropriate unicode value.
 * Since it's linear time, other encodings will be faster.
 * @exports opentype.DefaultEncoding
 * @class
 * @constructor
 * @param {opentype.Font}
 */
function DefaultEncoding(font) {
    this.font = font;
}

DefaultEncoding.prototype.charToGlyphIndex = function(c) {
    var code = c.codePointAt(0);
    var glyphs = this.font.glyphs;
    if (glyphs) {
        for (var i = 0; i < glyphs.length; i += 1) {
            var glyph = glyphs.get(i);
            for (var j = 0; j < glyph.unicodes.length; j += 1) {
                if (glyph.unicodes[j] === code) {
                    return i;
                }
            }
        }
    }
    return null;
};

/**
 * @exports opentype.CmapEncoding
 * @class
 * @constructor
 * @param {Object} cmap - a object with the cmap encoded data
 */
function CmapEncoding(cmap) {
    this.cmap = cmap;
}

/**
 * @param  {string} c - the character
 * @return {number} The glyph index.
 */
CmapEncoding.prototype.charToGlyphIndex = function(c) {
    return this.cmap.glyphIndexMap[c.codePointAt(0)] || 0;
};

/**
 * @exports opentype.CffEncoding
 * @class
 * @constructor
 * @param {string} encoding - The encoding
 * @param {Array} charset - The character set.
 */
function CffEncoding(encoding, charset) {
    this.encoding = encoding;
    this.charset = charset;
}

/**
 * @param  {string} s - The character
 * @return {number} The index.
 */
CffEncoding.prototype.charToGlyphIndex = function(s) {
    var code = s.codePointAt(0);
    var charName = this.encoding[code];
    return this.charset.indexOf(charName);
};

/**
 * @exports opentype.GlyphNames
 * @class
 * @constructor
 * @param {Object} post
 */
function GlyphNames(post) {
    switch (post.version) {
        case 1:
            this.names = standardNames.slice();
            break;
        case 2:
            this.names = new Array(post.numberOfGlyphs);
            for (var i = 0; i < post.numberOfGlyphs; i++) {
                if (post.glyphNameIndex[i] < standardNames.length) {
                    this.names[i] = standardNames[post.glyphNameIndex[i]];
                } else {
                    this.names[i] = post.names[post.glyphNameIndex[i] - standardNames.length];
                }
            }

            break;
        case 2.5:
            this.names = new Array(post.numberOfGlyphs);
            for (var i$1 = 0; i$1 < post.numberOfGlyphs; i$1++) {
                this.names[i$1] = standardNames[i$1 + post.glyphNameIndex[i$1]];
            }

            break;
        case 3:
            this.names = [];
            break;
        default:
            this.names = [];
            break;
    }
}

/**
 * Gets the index of a glyph by name.
 * @param  {string} name - The glyph name
 * @return {number} The index
 */
GlyphNames.prototype.nameToGlyphIndex = function(name) {
    return this.names.indexOf(name);
};

/**
 * @param  {number} gid
 * @return {string}
 */
GlyphNames.prototype.glyphIndexToName = function(gid) {
    return this.names[gid];
};

function addGlyphNamesAll(font) {
    var glyph;
    var glyphIndexMap = font.tables.cmap.glyphIndexMap;
    var charCodes = Object.keys(glyphIndexMap);

    for (var i = 0; i < charCodes.length; i += 1) {
        var c = charCodes[i];
        var glyphIndex = glyphIndexMap[c];
        glyph = font.glyphs.get(glyphIndex);
        glyph.addUnicode(parseInt(c));
    }

    for (var i$1 = 0; i$1 < font.glyphs.length; i$1 += 1) {
        glyph = font.glyphs.get(i$1);
        if (font.cffEncoding) {
            if (font.isCIDFont) {
                glyph.name = 'gid' + i$1;
            } else {
                glyph.name = font.cffEncoding.charset[i$1];
            }
        } else if (font.glyphNames.names) {
            glyph.name = font.glyphNames.glyphIndexToName(i$1);
        }
    }
}

function addGlyphNamesToUnicodeMap(font) {
    font._IndexToUnicodeMap = {};

    var glyphIndexMap = font.tables.cmap.glyphIndexMap;
    var charCodes = Object.keys(glyphIndexMap);

    for (var i = 0; i < charCodes.length; i += 1) {
        var c = charCodes[i];
        var glyphIndex = glyphIndexMap[c];
        if (font._IndexToUnicodeMap[glyphIndex] === undefined) {
            font._IndexToUnicodeMap[glyphIndex] = {
                unicodes: [parseInt(c)]
            };
        } else {
            font._IndexToUnicodeMap[glyphIndex].unicodes.push(parseInt(c));
        }
    }
}

/**
 * @alias opentype.addGlyphNames
 * @param {opentype.Font}
 * @param {Object}
 */
function addGlyphNames(font, opt) {
    if (opt.lowMemory) {
        addGlyphNamesToUnicodeMap(font);
    } else {
        addGlyphNamesAll(font);
    }
}

// Drawing utility functions.

// Draw a line on the given context from point `x1,y1` to point `x2,y2`.
function line(ctx, x1, y1, x2, y2) {
    ctx.beginPath();
    ctx.moveTo(x1, y1);
    ctx.lineTo(x2, y2);
    ctx.stroke();
}

var draw = { line: line };

// The Glyph object
// import glyf from './tables/glyf' Can't be imported here, because it's a circular dependency

function getPathDefinition(glyph, path) {
    var _path = path || new Path();
    return {
        configurable: true,

        get: function() {
            if (typeof _path === 'function') {
                _path = _path();
            }

            return _path;
        },

        set: function(p) {
            _path = p;
        }
    };
}
/**
 * @typedef GlyphOptions
 * @type Object
 * @property {string} [name] - The glyph name
 * @property {number} [unicode]
 * @property {Array} [unicodes]
 * @property {number} [xMin]
 * @property {number} [yMin]
 * @property {number} [xMax]
 * @property {number} [yMax]
 * @property {number} [advanceWidth]
 */

// A Glyph is an individual mark that often corresponds to a character.
// Some glyphs, such as ligatures, are a combination of many characters.
// Glyphs are the basic building blocks of a font.
//
// The `Glyph` class contains utility methods for drawing the path and its points.
/**
 * @exports opentype.Glyph
 * @class
 * @param {GlyphOptions}
 * @constructor
 */
function Glyph(options) {
    // By putting all the code on a prototype function (which is only declared once)
    // we reduce the memory requirements for larger fonts by some 2%
    this.bindConstructorValues(options);
}

/**
 * @param  {GlyphOptions}
 */
Glyph.prototype.bindConstructorValues = function(options) {
    this.index = options.index || 0;

    // These three values cannot be deferred for memory optimization:
    this.name = options.name || null;
    this.unicode = options.unicode || undefined;
    this.unicodes = options.unicodes || options.unicode !== undefined ? [options.unicode] : [];

    // But by binding these values only when necessary, we reduce can
    // the memory requirements by almost 3% for larger fonts.
    if ('xMin' in options) {
        this.xMin = options.xMin;
    }

    if ('yMin' in options) {
        this.yMin = options.yMin;
    }

    if ('xMax' in options) {
        this.xMax = options.xMax;
    }

    if ('yMax' in options) {
        this.yMax = options.yMax;
    }

    if ('advanceWidth' in options) {
        this.advanceWidth = options.advanceWidth;
    }

    // The path for a glyph is the most memory intensive, and is bound as a value
    // with a getter/setter to ensure we actually do path parsing only once the
    // path is actually needed by anything.
    Object.defineProperty(this, 'path', getPathDefinition(this, options.path));
};

/**
 * @param {number}
 */
Glyph.prototype.addUnicode = function(unicode) {
    if (this.unicodes.length === 0) {
        this.unicode = unicode;
    }

    this.unicodes.push(unicode);
};

/**
 * Calculate the minimum bounding box for this glyph.
 * @return {opentype.BoundingBox}
 */
Glyph.prototype.getBoundingBox = function() {
    return this.path.getBoundingBox();
};

/**
 * Convert the glyph to a Path we can draw on a drawing context.
 * @param  {number} [x=0] - Horizontal position of the beginning of the text.
 * @param  {number} [y=0] - Vertical position of the *baseline* of the text.
 * @param  {number} [fontSize=72] - Font size in pixels. We scale the glyph units by `1 / unitsPerEm * fontSize`.
 * @param  {Object=} options - xScale, yScale to stretch the glyph.
 * @param  {opentype.Font} if hinting is to be used, the font
 * @return {opentype.Path}
 */
Glyph.prototype.getPath = function(x, y, fontSize, options, font) {
    x = x !== undefined ? x : 0;
    y = y !== undefined ? y : 0;
    fontSize = fontSize !== undefined ? fontSize : 72;
    var commands;
    var hPoints;
    if (!options) { options = { }; }
    var xScale = options.xScale;
    var yScale = options.yScale;

    if (options.hinting && font && font.hinting) {
        // in case of hinting, the hinting engine takes care
        // of scaling the points (not the path) before hinting.
        hPoints = this.path && font.hinting.exec(this, fontSize);
        // in case the hinting engine failed hPoints is undefined
        // and thus reverts to plain rending
    }

    if (hPoints) {
        // Call font.hinting.getCommands instead of `glyf.getPath(hPoints).commands` to avoid a circular dependency
        commands = font.hinting.getCommands(hPoints);
        x = Math.round(x);
        y = Math.round(y);
        // TODO in case of hinting xyScaling is not yet supported
        xScale = yScale = 1;
    } else {
        commands = this.path.commands;
        var scale = 1 / (this.path.unitsPerEm || 1000) * fontSize;
        if (xScale === undefined) { xScale = scale; }
        if (yScale === undefined) { yScale = scale; }
    }

    var p = new Path();
    for (var i = 0; i < commands.length; i += 1) {
        var cmd = commands[i];
        if (cmd.type === 'M') {
            p.moveTo(x + (cmd.x * xScale), y + (-cmd.y * yScale));
        } else if (cmd.type === 'L') {
            p.lineTo(x + (cmd.x * xScale), y + (-cmd.y * yScale));
        } else if (cmd.type === 'Q') {
            p.quadraticCurveTo(x + (cmd.x1 * xScale), y + (-cmd.y1 * yScale),
                               x + (cmd.x * xScale), y + (-cmd.y * yScale));
        } else if (cmd.type === 'C') {
            p.curveTo(x + (cmd.x1 * xScale), y + (-cmd.y1 * yScale),
                      x + (cmd.x2 * xScale), y + (-cmd.y2 * yScale),
                      x + (cmd.x * xScale), y + (-cmd.y * yScale));
        } else if (cmd.type === 'Z') {
            p.closePath();
        }
    }

    return p;
};

/**
 * Split the glyph into contours.
 * This function is here for backwards compatibility, and to
 * provide raw access to the TrueType glyph outlines.
 * @return {Array}
 */
Glyph.prototype.getContours = function() {
    if (this.points === undefined) {
        return [];
    }

    var contours = [];
    var currentContour = [];
    for (var i = 0; i < this.points.length; i += 1) {
        var pt = this.points[i];
        currentContour.push(pt);
        if (pt.lastPointOfContour) {
            contours.push(currentContour);
            currentContour = [];
        }
    }

    check.argument(currentContour.length === 0, 'There are still points left in the current contour.');
    return contours;
};

/**
 * Calculate the xMin/yMin/xMax/yMax/lsb/rsb for a Glyph.
 * @return {Object}
 */
Glyph.prototype.getMetrics = function() {
    var commands = this.path.commands;
    var xCoords = [];
    var yCoords = [];
    for (var i = 0; i < commands.length; i += 1) {
        var cmd = commands[i];
        if (cmd.type !== 'Z') {
            xCoords.push(cmd.x);
            yCoords.push(cmd.y);
        }

        if (cmd.type === 'Q' || cmd.type === 'C') {
            xCoords.push(cmd.x1);
            yCoords.push(cmd.y1);
        }

        if (cmd.type === 'C') {
            xCoords.push(cmd.x2);
            yCoords.push(cmd.y2);
        }
    }

    var metrics = {
        xMin: Math.min.apply(null, xCoords),
        yMin: Math.min.apply(null, yCoords),
        xMax: Math.max.apply(null, xCoords),
        yMax: Math.max.apply(null, yCoords),
        leftSideBearing: this.leftSideBearing
    };

    if (!isFinite(metrics.xMin)) {
        metrics.xMin = 0;
    }

    if (!isFinite(metrics.xMax)) {
        metrics.xMax = this.advanceWidth;
    }

    if (!isFinite(metrics.yMin)) {
        metrics.yMin = 0;
    }

    if (!isFinite(metrics.yMax)) {
        metrics.yMax = 0;
    }

    metrics.rightSideBearing = this.advanceWidth - metrics.leftSideBearing - (metrics.xMax - metrics.xMin);
    return metrics;
};

/**
 * Draw the glyph on the given context.
 * @param  {CanvasRenderingContext2D} ctx - A 2D drawing context, like Canvas.
 * @param  {number} [x=0] - Horizontal position of the beginning of the text.
 * @param  {number} [y=0] - Vertical position of the *baseline* of the text.
 * @param  {number} [fontSize=72] - Font size in pixels. We scale the glyph units by `1 / unitsPerEm * fontSize`.
 * @param  {Object=} options - xScale, yScale to stretch the glyph.
 */
Glyph.prototype.draw = function(ctx, x, y, fontSize, options) {
    this.getPath(x, y, fontSize, options).draw(ctx);
};

/**
 * Draw the points of the glyph.
 * On-curve points will be drawn in blue, off-curve points will be drawn in red.
 * @param  {CanvasRenderingContext2D} ctx - A 2D drawing context, like Canvas.
 * @param  {number} [x=0] - Horizontal position of the beginning of the text.
 * @param  {number} [y=0] - Vertical position of the *baseline* of the text.
 * @param  {number} [fontSize=72] - Font size in pixels. We scale the glyph units by `1 / unitsPerEm * fontSize`.
 */
Glyph.prototype.drawPoints = function(ctx, x, y, fontSize) {
    function drawCircles(l, x, y, scale) {
        ctx.beginPath();
        for (var j = 0; j < l.length; j += 1) {
            ctx.moveTo(x + (l[j].x * scale), y + (l[j].y * scale));
            ctx.arc(x + (l[j].x * scale), y + (l[j].y * scale), 2, 0, Math.PI * 2, false);
        }

        ctx.closePath();
        ctx.fill();
    }

    x = x !== undefined ? x : 0;
    y = y !== undefined ? y : 0;
    fontSize = fontSize !== undefined ? fontSize : 24;
    var scale = 1 / this.path.unitsPerEm * fontSize;

    var blueCircles = [];
    var redCircles = [];
    var path = this.path;
    for (var i = 0; i < path.commands.length; i += 1) {
        var cmd = path.commands[i];
        if (cmd.x !== undefined) {
            blueCircles.push({x: cmd.x, y: -cmd.y});
        }

        if (cmd.x1 !== undefined) {
            redCircles.push({x: cmd.x1, y: -cmd.y1});
        }

        if (cmd.x2 !== undefined) {
            redCircles.push({x: cmd.x2, y: -cmd.y2});
        }
    }

    ctx.fillStyle = 'blue';
    drawCircles(blueCircles, x, y, scale);
    ctx.fillStyle = 'red';
    drawCircles(redCircles, x, y, scale);
};

/**
 * Draw lines indicating important font measurements.
 * Black lines indicate the origin of the coordinate system (point 0,0).
 * Blue lines indicate the glyph bounding box.
 * Green line indicates the advance width of the glyph.
 * @param  {CanvasRenderingContext2D} ctx - A 2D drawing context, like Canvas.
 * @param  {number} [x=0] - Horizontal position of the beginning of the text.
 * @param  {number} [y=0] - Vertical position of the *baseline* of the text.
 * @param  {number} [fontSize=72] - Font size in pixels. We scale the glyph units by `1 / unitsPerEm * fontSize`.
 */
Glyph.prototype.drawMetrics = function(ctx, x, y, fontSize) {
    var scale;
    x = x !== undefined ? x : 0;
    y = y !== undefined ? y : 0;
    fontSize = fontSize !== undefined ? fontSize : 24;
    scale = 1 / this.path.unitsPerEm * fontSize;
    ctx.lineWidth = 1;

    // Draw the origin
    ctx.strokeStyle = 'black';
    draw.line(ctx, x, -10000, x, 10000);
    draw.line(ctx, -10000, y, 10000, y);

    // This code is here due to memory optimization: by not using
    // defaults in the constructor, we save a notable amount of memory.
    var xMin = this.xMin || 0;
    var yMin = this.yMin || 0;
    var xMax = this.xMax || 0;
    var yMax = this.yMax || 0;
    var advanceWidth = this.advanceWidth || 0;

    // Draw the glyph box
    ctx.strokeStyle = 'blue';
    draw.line(ctx, x + (xMin * scale), -10000, x + (xMin * scale), 10000);
    draw.line(ctx, x + (xMax * scale), -10000, x + (xMax * scale), 10000);
    draw.line(ctx, -10000, y + (-yMin * scale), 10000, y + (-yMin * scale));
    draw.line(ctx, -10000, y + (-yMax * scale), 10000, y + (-yMax * scale));

    // Draw the advance width
    ctx.strokeStyle = 'green';
    draw.line(ctx, x + (advanceWidth * scale), -10000, x + (advanceWidth * scale), 10000);
};

// The GlyphSet object

// Define a property on the glyph that depends on the path being loaded.
function defineDependentProperty(glyph, externalName, internalName) {
    Object.defineProperty(glyph, externalName, {
        get: function() {
            // Request the path property to make sure the path is loaded.
            glyph.path; // jshint ignore:line
            return glyph[internalName];
        },
        set: function(newValue) {
            glyph[internalName] = newValue;
        },
        enumerable: true,
        configurable: true
    });
}

/**
 * A GlyphSet represents all glyphs available in the font, but modelled using
 * a deferred glyph loader, for retrieving glyphs only once they are absolutely
 * necessary, to keep the memory footprint down.
 * @exports opentype.GlyphSet
 * @class
 * @param {opentype.Font}
 * @param {Array}
 */
function GlyphSet(font, glyphs) {
    this.font = font;
    this.glyphs = {};
    if (Array.isArray(glyphs)) {
        for (var i = 0; i < glyphs.length; i++) {
            var glyph = glyphs[i];
            glyph.path.unitsPerEm = font.unitsPerEm;
            this.glyphs[i] = glyph;
        }
    }

    this.length = (glyphs && glyphs.length) || 0;
}

/**
 * @param  {number} index
 * @return {opentype.Glyph}
 */
GlyphSet.prototype.get = function(index) {
    // this.glyphs[index] is 'undefined' when low memory mode is on. glyph is pushed on request only.
    if (this.glyphs[index] === undefined) {
        this.font._push(index);
        if (typeof this.glyphs[index] === 'function') {
            this.glyphs[index] = this.glyphs[index]();
        }

        var glyph = this.glyphs[index];
        var unicodeObj = this.font._IndexToUnicodeMap[index];

        if (unicodeObj) {
            for (var j = 0; j < unicodeObj.unicodes.length; j++)
                { glyph.addUnicode(unicodeObj.unicodes[j]); }
        }

        if (this.font.cffEncoding) {
            if (this.font.isCIDFont) {
                glyph.name = 'gid' + index;
            } else {
                glyph.name = this.font.cffEncoding.charset[index];
            }
        } else if (this.font.glyphNames.names) {
            glyph.name = this.font.glyphNames.glyphIndexToName(index);
        }

        this.glyphs[index].advanceWidth = this.font._hmtxTableData[index].advanceWidth;
        this.glyphs[index].leftSideBearing = this.font._hmtxTableData[index].leftSideBearing;
    } else {
        if (typeof this.glyphs[index] === 'function') {
            this.glyphs[index] = this.glyphs[index]();
        }
    }

    return this.glyphs[index];
};

/**
 * @param  {number} index
 * @param  {Object}
 */
GlyphSet.prototype.push = function(index, loader) {
    this.glyphs[index] = loader;
    this.length++;
};

/**
 * @alias opentype.glyphLoader
 * @param  {opentype.Font} font
 * @param  {number} index
 * @return {opentype.Glyph}
 */
function glyphLoader(font, index) {
    return new Glyph({index: index, font: font});
}

/**
 * Generate a stub glyph that can be filled with all metadata *except*
 * the "points" and "path" properties, which must be loaded only once
 * the glyph's path is actually requested for text shaping.
 * @alias opentype.ttfGlyphLoader
 * @param  {opentype.Font} font
 * @param  {number} index
 * @param  {Function} parseGlyph
 * @param  {Object} data
 * @param  {number} position
 * @param  {Function} buildPath
 * @return {opentype.Glyph}
 */
function ttfGlyphLoader(font, index, parseGlyph, data, position, buildPath) {
    return function() {
        var glyph = new Glyph({index: index, font: font});

        glyph.path = function() {
            parseGlyph(glyph, data, position);
            var path = buildPath(font.glyphs, glyph);
            path.unitsPerEm = font.unitsPerEm;
            return path;
        };

        defineDependentProperty(glyph, 'xMin', '_xMin');
        defineDependentProperty(glyph, 'xMax', '_xMax');
        defineDependentProperty(glyph, 'yMin', '_yMin');
        defineDependentProperty(glyph, 'yMax', '_yMax');

        return glyph;
    };
}
/**
 * @alias opentype.cffGlyphLoader
 * @param  {opentype.Font} font
 * @param  {number} index
 * @param  {Function} parseCFFCharstring
 * @param  {string} charstring
 * @return {opentype.Glyph}
 */
function cffGlyphLoader(font, index, parseCFFCharstring, charstring) {
    return function() {
        var glyph = new Glyph({index: index, font: font});

        glyph.path = function() {
            var path = parseCFFCharstring(font, glyph, charstring);
            path.unitsPerEm = font.unitsPerEm;
            return path;
        };

        return glyph;
    };
}

var glyphset = { GlyphSet: GlyphSet, glyphLoader: glyphLoader, ttfGlyphLoader: ttfGlyphLoader, cffGlyphLoader: cffGlyphLoader };

// The `CFF` table contains the glyph outlines in PostScript format.

// Custom equals function that can also check lists.
function equals(a, b) {
    if (a === b) {
        return true;
    } else if (Array.isArray(a) && Array.isArray(b)) {
        if (a.length !== b.length) {
            return false;
        }

        for (var i = 0; i < a.length; i += 1) {
            if (!equals(a[i], b[i])) {
                return false;
            }
        }

        return true;
    } else {
        return false;
    }
}

// Subroutines are encoded using the negative half of the number space.
// See type 2 chapter 4.7 "Subroutine operators".
function calcCFFSubroutineBias(subrs) {
    var bias;
    if (subrs.length < 1240) {
        bias = 107;
    } else if (subrs.length < 33900) {
        bias = 1131;
    } else {
        bias = 32768;
    }

    return bias;
}

// Parse a `CFF` INDEX array.
// An index array consists of a list of offsets, then a list of objects at those offsets.
function parseCFFIndex(data, start, conversionFn) {
    var offsets = [];
    var objects = [];
    var count = parse.getCard16(data, start);
    var objectOffset;
    var endOffset;
    if (count !== 0) {
        var offsetSize = parse.getByte(data, start + 2);
        objectOffset = start + ((count + 1) * offsetSize) + 2;
        var pos = start + 3;
        for (var i = 0; i < count + 1; i += 1) {
            offsets.push(parse.getOffset(data, pos, offsetSize));
            pos += offsetSize;
        }

        // The total size of the index array is 4 header bytes + the value of the last offset.
        endOffset = objectOffset + offsets[count];
    } else {
        endOffset = start + 2;
    }

    for (var i$1 = 0; i$1 < offsets.length - 1; i$1 += 1) {
        var value = parse.getBytes(data, objectOffset + offsets[i$1], objectOffset + offsets[i$1 + 1]);
        if (conversionFn) {
            value = conversionFn(value);
        }

        objects.push(value);
    }

    return {objects: objects, startOffset: start, endOffset: endOffset};
}

function parseCFFIndexLowMemory(data, start) {
    var offsets = [];
    var count = parse.getCard16(data, start);
    var objectOffset;
    var endOffset;
    if (count !== 0) {
        var offsetSize = parse.getByte(data, start + 2);
        objectOffset = start + ((count + 1) * offsetSize) + 2;
        var pos = start + 3;
        for (var i = 0; i < count + 1; i += 1) {
            offsets.push(parse.getOffset(data, pos, offsetSize));
            pos += offsetSize;
        }

        // The total size of the index array is 4 header bytes + the value of the last offset.
        endOffset = objectOffset + offsets[count];
    } else {
        endOffset = start + 2;
    }

    return {offsets: offsets, startOffset: start, endOffset: endOffset};
}
function getCffIndexObject(i, offsets, data, start, conversionFn) {
    var count = parse.getCard16(data, start);
    var objectOffset = 0;
    if (count !== 0) {
        var offsetSize = parse.getByte(data, start + 2);
        objectOffset = start + ((count + 1) * offsetSize) + 2;
    }

    var value = parse.getBytes(data, objectOffset + offsets[i], objectOffset + offsets[i + 1]);
    if (conversionFn) {
        value = conversionFn(value);
    }
    return value;
}

// Parse a `CFF` DICT real value.
function parseFloatOperand(parser) {
    var s = '';
    var eof = 15;
    var lookup = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '.', 'E', 'E-', null, '-'];
    while (true) {
        var b = parser.parseByte();
        var n1 = b >> 4;
        var n2 = b & 15;

        if (n1 === eof) {
            break;
        }

        s += lookup[n1];

        if (n2 === eof) {
            break;
        }

        s += lookup[n2];
    }

    return parseFloat(s);
}

// Parse a `CFF` DICT operand.
function parseOperand(parser, b0) {
    var b1;
    var b2;
    var b3;
    var b4;
    if (b0 === 28) {
        b1 = parser.parseByte();
        b2 = parser.parseByte();
        return b1 << 8 | b2;
    }

    if (b0 === 29) {
        b1 = parser.parseByte();
        b2 = parser.parseByte();
        b3 = parser.parseByte();
        b4 = parser.parseByte();
        return b1 << 24 | b2 << 16 | b3 << 8 | b4;
    }

    if (b0 === 30) {
        return parseFloatOperand(parser);
    }

    if (b0 >= 32 && b0 <= 246) {
        return b0 - 139;
    }

    if (b0 >= 247 && b0 <= 250) {
        b1 = parser.parseByte();
        return (b0 - 247) * 256 + b1 + 108;
    }

    if (b0 >= 251 && b0 <= 254) {
        b1 = parser.parseByte();
        return -(b0 - 251) * 256 - b1 - 108;
    }

    throw new Error('Invalid b0 ' + b0);
}

// Convert the entries returned by `parseDict` to a proper dictionary.
// If a value is a list of one, it is unpacked.
function entriesToObject(entries) {
    var o = {};
    for (var i = 0; i < entries.length; i += 1) {
        var key = entries[i][0];
        var values = entries[i][1];
        var value = (void 0);
        if (values.length === 1) {
            value = values[0];
        } else {
            value = values;
        }

        if (o.hasOwnProperty(key) && !isNaN(o[key])) {
            throw new Error('Object ' + o + ' already has key ' + key);
        }

        o[key] = value;
    }

    return o;
}

// Parse a `CFF` DICT object.
// A dictionary contains key-value pairs in a compact tokenized format.
function parseCFFDict(data, start, size) {
    start = start !== undefined ? start : 0;
    var parser = new parse.Parser(data, start);
    var entries = [];
    var operands = [];
    size = size !== undefined ? size : data.length;

    while (parser.relativeOffset < size) {
        var op = parser.parseByte();

        // The first byte for each dict item distinguishes between operator (key) and operand (value).
        // Values <= 21 are operators.
        if (op <= 21) {
            // Two-byte operators have an initial escape byte of 12.
            if (op === 12) {
                op = 1200 + parser.parseByte();
            }

            entries.push([op, operands]);
            operands = [];
        } else {
            // Since the operands (values) come before the operators (keys), we store all operands in a list
            // until we encounter an operator.
            operands.push(parseOperand(parser, op));
        }
    }

    return entriesToObject(entries);
}

// Given a String Index (SID), return the value of the string.
// Strings below index 392 are standard CFF strings and are not encoded in the font.
function getCFFString(strings, index) {
    if (index <= 390) {
        index = cffStandardStrings[index];
    } else {
        index = strings[index - 391];
    }

    return index;
}

// Interpret a dictionary and return a new dictionary with readable keys and values for missing entries.
// This function takes `meta` which is a list of objects containing `operand`, `name` and `default`.
function interpretDict(dict, meta, strings) {
    var newDict = {};
    var value;

    // Because we also want to include missing values, we start out from the meta list
    // and lookup values in the dict.
    for (var i = 0; i < meta.length; i += 1) {
        var m = meta[i];

        if (Array.isArray(m.type)) {
            var values = [];
            values.length = m.type.length;
            for (var j = 0; j < m.type.length; j++) {
                value = dict[m.op] !== undefined ? dict[m.op][j] : undefined;
                if (value === undefined) {
                    value = m.value !== undefined && m.value[j] !== undefined ? m.value[j] : null;
                }
                if (m.type[j] === 'SID') {
                    value = getCFFString(strings, value);
                }
                values[j] = value;
            }
            newDict[m.name] = values;
        } else {
            value = dict[m.op];
            if (value === undefined) {
                value = m.value !== undefined ? m.value : null;
            }

            if (m.type === 'SID') {
                value = getCFFString(strings, value);
            }
            newDict[m.name] = value;
        }
    }

    return newDict;
}

// Parse the CFF header.
function parseCFFHeader(data, start) {
    var header = {};
    header.formatMajor = parse.getCard8(data, start);
    header.formatMinor = parse.getCard8(data, start + 1);
    header.size = parse.getCard8(data, start + 2);
    header.offsetSize = parse.getCard8(data, start + 3);
    header.startOffset = start;
    header.endOffset = start + 4;
    return header;
}

var TOP_DICT_META = [
    {name: 'version', op: 0, type: 'SID'},
    {name: 'notice', op: 1, type: 'SID'},
    {name: 'copyright', op: 1200, type: 'SID'},
    {name: 'fullName', op: 2, type: 'SID'},
    {name: 'familyName', op: 3, type: 'SID'},
    {name: 'weight', op: 4, type: 'SID'},
    {name: 'isFixedPitch', op: 1201, type: 'number', value: 0},
    {name: 'italicAngle', op: 1202, type: 'number', value: 0},
    {name: 'underlinePosition', op: 1203, type: 'number', value: -100},
    {name: 'underlineThickness', op: 1204, type: 'number', value: 50},
    {name: 'paintType', op: 1205, type: 'number', value: 0},
    {name: 'charstringType', op: 1206, type: 'number', value: 2},
    {
        name: 'fontMatrix',
        op: 1207,
        type: ['real', 'real', 'real', 'real', 'real', 'real'],
        value: [0.001, 0, 0, 0.001, 0, 0]
    },
    {name: 'uniqueId', op: 13, type: 'number'},
    {name: 'fontBBox', op: 5, type: ['number', 'number', 'number', 'number'], value: [0, 0, 0, 0]},
    {name: 'strokeWidth', op: 1208, type: 'number', value: 0},
    {name: 'xuid', op: 14, type: [], value: null},
    {name: 'charset', op: 15, type: 'offset', value: 0},
    {name: 'encoding', op: 16, type: 'offset', value: 0},
    {name: 'charStrings', op: 17, type: 'offset', value: 0},
    {name: 'private', op: 18, type: ['number', 'offset'], value: [0, 0]},
    {name: 'ros', op: 1230, type: ['SID', 'SID', 'number']},
    {name: 'cidFontVersion', op: 1231, type: 'number', value: 0},
    {name: 'cidFontRevision', op: 1232, type: 'number', value: 0},
    {name: 'cidFontType', op: 1233, type: 'number', value: 0},
    {name: 'cidCount', op: 1234, type: 'number', value: 8720},
    {name: 'uidBase', op: 1235, type: 'number'},
    {name: 'fdArray', op: 1236, type: 'offset'},
    {name: 'fdSelect', op: 1237, type: 'offset'},
    {name: 'fontName', op: 1238, type: 'SID'}
];

var PRIVATE_DICT_META = [
    {name: 'subrs', op: 19, type: 'offset', value: 0},
    {name: 'defaultWidthX', op: 20, type: 'number', value: 0},
    {name: 'nominalWidthX', op: 21, type: 'number', value: 0}
];

// Parse the CFF top dictionary. A CFF table can contain multiple fonts, each with their own top dictionary.
// The top dictionary contains the essential metadata for the font, together with the private dictionary.
function parseCFFTopDict(data, strings) {
    var dict = parseCFFDict(data, 0, data.byteLength);
    return interpretDict(dict, TOP_DICT_META, strings);
}

// Parse the CFF private dictionary. We don't fully parse out all the values, only the ones we need.
function parseCFFPrivateDict(data, start, size, strings) {
    var dict = parseCFFDict(data, start, size);
    return interpretDict(dict, PRIVATE_DICT_META, strings);
}

// Returns a list of "Top DICT"s found using an INDEX list.
// Used to read both the usual high-level Top DICTs and also the FDArray
// discovered inside CID-keyed fonts.  When a Top DICT has a reference to
// a Private DICT that is read and saved into the Top DICT.
//
// In addition to the expected/optional values as outlined in TOP_DICT_META
// the following values might be saved into the Top DICT.
//
//    _subrs []        array of local CFF subroutines from Private DICT
//    _subrsBias       bias value computed from number of subroutines
//                      (see calcCFFSubroutineBias() and parseCFFCharstring())
//    _defaultWidthX   default widths for CFF characters
//    _nominalWidthX   bias added to width embedded within glyph description
//
//    _privateDict     saved copy of parsed Private DICT from Top DICT
function gatherCFFTopDicts(data, start, cffIndex, strings) {
    var topDictArray = [];
    for (var iTopDict = 0; iTopDict < cffIndex.length; iTopDict += 1) {
        var topDictData = new DataView(new Uint8Array(cffIndex[iTopDict]).buffer);
        var topDict = parseCFFTopDict(topDictData, strings);
        topDict._subrs = [];
        topDict._subrsBias = 0;
        topDict._defaultWidthX = 0;
        topDict._nominalWidthX = 0;
        var privateSize = topDict.private[0];
        var privateOffset = topDict.private[1];
        if (privateSize !== 0 && privateOffset !== 0) {
            var privateDict = parseCFFPrivateDict(data, privateOffset + start, privateSize, strings);
            topDict._defaultWidthX = privateDict.defaultWidthX;
            topDict._nominalWidthX = privateDict.nominalWidthX;
            if (privateDict.subrs !== 0) {
                var subrOffset = privateOffset + privateDict.subrs;
                var subrIndex = parseCFFIndex(data, subrOffset + start);
                topDict._subrs = subrIndex.objects;
                topDict._subrsBias = calcCFFSubroutineBias(topDict._subrs);
            }
            topDict._privateDict = privateDict;
        }
        topDictArray.push(topDict);
    }
    return topDictArray;
}

// Parse the CFF charset table, which contains internal names for all the glyphs.
// This function will return a list of glyph names.
// See Adobe TN #5176 chapter 13, "Charsets".
function parseCFFCharset(data, start, nGlyphs, strings) {
    var sid;
    var count;
    var parser = new parse.Parser(data, start);

    // The .notdef glyph is not included, so subtract 1.
    nGlyphs -= 1;
    var charset = ['.notdef'];

    var format = parser.parseCard8();
    if (format === 0) {
        for (var i = 0; i < nGlyphs; i += 1) {
            sid = parser.parseSID();
            charset.push(getCFFString(strings, sid));
        }
    } else if (format === 1) {
        while (charset.length <= nGlyphs) {
            sid = parser.parseSID();
            count = parser.parseCard8();
            for (var i$1 = 0; i$1 <= count; i$1 += 1) {
                charset.push(getCFFString(strings, sid));
                sid += 1;
            }
        }
    } else if (format === 2) {
        while (charset.length <= nGlyphs) {
            sid = parser.parseSID();
            count = parser.parseCard16();
            for (var i$2 = 0; i$2 <= count; i$2 += 1) {
                charset.push(getCFFString(strings, sid));
                sid += 1;
            }
        }
    } else {
        throw new Error('Unknown charset format ' + format);
    }

    return charset;
}

// Parse the CFF encoding data. Only one encoding can be specified per font.
// See Adobe TN #5176 chapter 12, "Encodings".
function parseCFFEncoding(data, start, charset) {
    var code;
    var enc = {};
    var parser = new parse.Parser(data, start);
    var format = parser.parseCard8();
    if (format === 0) {
        var nCodes = parser.parseCard8();
        for (var i = 0; i < nCodes; i += 1) {
            code = parser.parseCard8();
            enc[code] = i;
        }
    } else if (format === 1) {
        var nRanges = parser.parseCard8();
        code = 1;
        for (var i$1 = 0; i$1 < nRanges; i$1 += 1) {
            var first = parser.parseCard8();
            var nLeft = parser.parseCard8();
            for (var j = first; j <= first + nLeft; j += 1) {
                enc[j] = code;
                code += 1;
            }
        }
    } else {
        throw new Error('Unknown encoding format ' + format);
    }

    return new CffEncoding(enc, charset);
}

// Take in charstring code and return a Glyph object.
// The encoding is described in the Type 2 Charstring Format
// https://www.microsoft.com/typography/OTSPEC/charstr2.htm
function parseCFFCharstring(font, glyph, code) {
    var c1x;
    var c1y;
    var c2x;
    var c2y;
    var p = new Path();
    var stack = [];
    var nStems = 0;
    var haveWidth = false;
    var open = false;
    var x = 0;
    var y = 0;
    var subrs;
    var subrsBias;
    var defaultWidthX;
    var nominalWidthX;
    if (font.isCIDFont) {
        var fdIndex = font.tables.cff.topDict._fdSelect[glyph.index];
        var fdDict = font.tables.cff.topDict._fdArray[fdIndex];
        subrs = fdDict._subrs;
        subrsBias = fdDict._subrsBias;
        defaultWidthX = fdDict._defaultWidthX;
        nominalWidthX = fdDict._nominalWidthX;
    } else {
        subrs = font.tables.cff.topDict._subrs;
        subrsBias = font.tables.cff.topDict._subrsBias;
        defaultWidthX = font.tables.cff.topDict._defaultWidthX;
        nominalWidthX = font.tables.cff.topDict._nominalWidthX;
    }
    var width = defaultWidthX;

    function newContour(x, y) {
        if (open) {
            p.closePath();
        }

        p.moveTo(x, y);
        open = true;
    }

    function parseStems() {
        var hasWidthArg;

        // The number of stem operators on the stack is always even.
        // If the value is uneven, that means a width is specified.
        hasWidthArg = stack.length % 2 !== 0;
        if (hasWidthArg && !haveWidth) {
            width = stack.shift() + nominalWidthX;
        }

        nStems += stack.length >> 1;
        stack.length = 0;
        haveWidth = true;
    }

    function parse(code) {
        var b1;
        var b2;
        var b3;
        var b4;
        var codeIndex;
        var subrCode;
        var jpx;
        var jpy;
        var c3x;
        var c3y;
        var c4x;
        var c4y;

        var i = 0;
        while (i < code.length) {
            var v = code[i];
            i += 1;
            switch (v) {
                case 1: // hstem
                    parseStems();
                    break;
                case 3: // vstem
                    parseStems();
                    break;
                case 4: // vmoveto
                    if (stack.length > 1 && !haveWidth) {
                        width = stack.shift() + nominalWidthX;
                        haveWidth = true;
                    }

                    y += stack.pop();
                    newContour(x, y);
                    break;
                case 5: // rlineto
                    while (stack.length > 0) {
                        x += stack.shift();
                        y += stack.shift();
                        p.lineTo(x, y);
                    }

                    break;
                case 6: // hlineto
                    while (stack.length > 0) {
                        x += stack.shift();
                        p.lineTo(x, y);
                        if (stack.length === 0) {
                            break;
                        }

                        y += stack.shift();
                        p.lineTo(x, y);
                    }

                    break;
                case 7: // vlineto
                    while (stack.length > 0) {
                        y += stack.shift();
                        p.lineTo(x, y);
                        if (stack.length === 0) {
                            break;
                        }

                        x += stack.shift();
                        p.lineTo(x, y);
                    }

                    break;
                case 8: // rrcurveto
                    while (stack.length > 0) {
                        c1x = x + stack.shift();
                        c1y = y + stack.shift();
                        c2x = c1x + stack.shift();
                        c2y = c1y + stack.shift();
                        x = c2x + stack.shift();
                        y = c2y + stack.shift();
                        p.curveTo(c1x, c1y, c2x, c2y, x, y);
                    }

                    break;
                case 10: // callsubr
                    codeIndex = stack.pop() + subrsBias;
                    subrCode = subrs[codeIndex];
                    if (subrCode) {
                        parse(subrCode);
                    }

                    break;
                case 11: // return
                    return;
                case 12: // flex operators
                    v = code[i];
                    i += 1;
                    switch (v) {
                        case 35: // flex
                            // |- dx1 dy1 dx2 dy2 dx3 dy3 dx4 dy4 dx5 dy5 dx6 dy6 fd flex (12 35) |-
                            c1x = x   + stack.shift();    // dx1
                            c1y = y   + stack.shift();    // dy1
                            c2x = c1x + stack.shift();    // dx2
                            c2y = c1y + stack.shift();    // dy2
                            jpx = c2x + stack.shift();    // dx3
                            jpy = c2y + stack.shift();    // dy3
                            c3x = jpx + stack.shift();    // dx4
                            c3y = jpy + stack.shift();    // dy4
                            c4x = c3x + stack.shift();    // dx5
                            c4y = c3y + stack.shift();    // dy5
                            x = c4x   + stack.shift();    // dx6
                            y = c4y   + stack.shift();    // dy6
                            stack.shift();                // flex depth
                            p.curveTo(c1x, c1y, c2x, c2y, jpx, jpy);
                            p.curveTo(c3x, c3y, c4x, c4y, x, y);
                            break;
                        case 34: // hflex
                            // |- dx1 dx2 dy2 dx3 dx4 dx5 dx6 hflex (12 34) |-
                            c1x = x   + stack.shift();    // dx1
                            c1y = y;                      // dy1
                            c2x = c1x + stack.shift();    // dx2
                            c2y = c1y + stack.shift();    // dy2
                            jpx = c2x + stack.shift();    // dx3
                            jpy = c2y;                    // dy3
                            c3x = jpx + stack.shift();    // dx4
                            c3y = c2y;                    // dy4
                            c4x = c3x + stack.shift();    // dx5
                            c4y = y;                      // dy5
                            x = c4x + stack.shift();      // dx6
                            p.curveTo(c1x, c1y, c2x, c2y, jpx, jpy);
                            p.curveTo(c3x, c3y, c4x, c4y, x, y);
                            break;
                        case 36: // hflex1
                            // |- dx1 dy1 dx2 dy2 dx3 dx4 dx5 dy5 dx6 hflex1 (12 36) |-
                            c1x = x   + stack.shift();    // dx1
                            c1y = y   + stack.shift();    // dy1
                            c2x = c1x + stack.shift();    // dx2
                            c2y = c1y + stack.shift();    // dy2
                            jpx = c2x + stack.shift();    // dx3
                            jpy = c2y;                    // dy3
                            c3x = jpx + stack.shift();    // dx4
                            c3y = c2y;                    // dy4
                            c4x = c3x + stack.shift();    // dx5
                            c4y = c3y + stack.shift();    // dy5
                            x = c4x + stack.shift();      // dx6
                            p.curveTo(c1x, c1y, c2x, c2y, jpx, jpy);
                            p.curveTo(c3x, c3y, c4x, c4y, x, y);
                            break;
                        case 37: // flex1
                            // |- dx1 dy1 dx2 dy2 dx3 dy3 dx4 dy4 dx5 dy5 d6 flex1 (12 37) |-
                            c1x = x   + stack.shift();    // dx1
                            c1y = y   + stack.shift();    // dy1
                            c2x = c1x + stack.shift();    // dx2
                            c2y = c1y + stack.shift();    // dy2
                            jpx = c2x + stack.shift();    // dx3
                            jpy = c2y + stack.shift();    // dy3
                            c3x = jpx + stack.shift();    // dx4
                            c3y = jpy + stack.shift();    // dy4
                            c4x = c3x + stack.shift();    // dx5
                            c4y = c3y + stack.shift();    // dy5
                            if (Math.abs(c4x - x) > Math.abs(c4y - y)) {
                                x = c4x + stack.shift();
                            } else {
                                y = c4y + stack.shift();
                            }

                            p.curveTo(c1x, c1y, c2x, c2y, jpx, jpy);
                            p.curveTo(c3x, c3y, c4x, c4y, x, y);
                            break;
                        default:
                            console.log('Glyph ' + glyph.index + ': unknown operator ' + 1200 + v);
                            stack.length = 0;
                    }
                    break;
                case 14: // endchar
                    if (stack.length > 0 && !haveWidth) {
                        width = stack.shift() + nominalWidthX;
                        haveWidth = true;
                    }

                    if (open) {
                        p.closePath();
                        open = false;
                    }

                    break;
                case 18: // hstemhm
                    parseStems();
                    break;
                case 19: // hintmask
                case 20: // cntrmask
                    parseStems();
                    i += (nStems + 7) >> 3;
                    break;
                case 21: // rmoveto
                    if (stack.length > 2 && !haveWidth) {
                        width = stack.shift() + nominalWidthX;
                        haveWidth = true;
                    }

                    y += stack.pop();
                    x += stack.pop();
                    newContour(x, y);
                    break;
                case 22: // hmoveto
                    if (stack.length > 1 && !haveWidth) {
                        width = stack.shift() + nominalWidthX;
                        haveWidth = true;
                    }

                    x += stack.pop();
                    newContour(x, y);
                    break;
                case 23: // vstemhm
                    parseStems();
                    break;
                case 24: // rcurveline
                    while (stack.length > 2) {
                        c1x = x + stack.shift();
                        c1y = y + stack.shift();
                        c2x = c1x + stack.shift();
                        c2y = c1y + stack.shift();
                        x = c2x + stack.shift();
                        y = c2y + stack.shift();
                        p.curveTo(c1x, c1y, c2x, c2y, x, y);
                    }

                    x += stack.shift();
                    y += stack.shift();
                    p.lineTo(x, y);
                    break;
                case 25: // rlinecurve
                    while (stack.length > 6) {
                        x += stack.shift();
                        y += stack.shift();
                        p.lineTo(x, y);
                    }

                    c1x = x + stack.shift();
                    c1y = y + stack.shift();
                    c2x = c1x + stack.shift();
                    c2y = c1y + stack.shift();
                    x = c2x + stack.shift();
                    y = c2y + stack.shift();
                    p.curveTo(c1x, c1y, c2x, c2y, x, y);
                    break;
                case 26: // vvcurveto
                    if (stack.length % 2) {
                        x += stack.shift();
                    }

                    while (stack.length > 0) {
                        c1x = x;
                        c1y = y + stack.shift();
                        c2x = c1x + stack.shift();
                        c2y = c1y + stack.shift();
                        x = c2x;
                        y = c2y + stack.shift();
                        p.curveTo(c1x, c1y, c2x, c2y, x, y);
                    }

                    break;
                case 27: // hhcurveto
                    if (stack.length % 2) {
                        y += stack.shift();
                    }

                    while (stack.length > 0) {
                        c1x = x + stack.shift();
                        c1y = y;
                        c2x = c1x + stack.shift();
                        c2y = c1y + stack.shift();
                        x = c2x + stack.shift();
                        y = c2y;
                        p.curveTo(c1x, c1y, c2x, c2y, x, y);
                    }

                    break;
                case 28: // shortint
                    b1 = code[i];
                    b2 = code[i + 1];
                    stack.push(((b1 << 24) | (b2 << 16)) >> 16);
                    i += 2;
                    break;
                case 29: // callgsubr
                    codeIndex = stack.pop() + font.gsubrsBias;
                    subrCode = font.gsubrs[codeIndex];
                    if (subrCode) {
                        parse(subrCode);
                    }

                    break;
                case 30: // vhcurveto
                    while (stack.length > 0) {
                        c1x = x;
                        c1y = y + stack.shift();
                        c2x = c1x + stack.shift();
                        c2y = c1y + stack.shift();
                        x = c2x + stack.shift();
                        y = c2y + (stack.length === 1 ? stack.shift() : 0);
                        p.curveTo(c1x, c1y, c2x, c2y, x, y);
                        if (stack.length === 0) {
                            break;
                        }

                        c1x = x + stack.shift();
                        c1y = y;
                        c2x = c1x + stack.shift();
                        c2y = c1y + stack.shift();
                        y = c2y + stack.shift();
                        x = c2x + (stack.length === 1 ? stack.shift() : 0);
                        p.curveTo(c1x, c1y, c2x, c2y, x, y);
                    }

                    break;
                case 31: // hvcurveto
                    while (stack.length > 0) {
                        c1x = x + stack.shift();
                        c1y = y;
                        c2x = c1x + stack.shift();
                        c2y = c1y + stack.shift();
                        y = c2y + stack.shift();
                        x = c2x + (stack.length === 1 ? stack.shift() : 0);
                        p.curveTo(c1x, c1y, c2x, c2y, x, y);
                        if (stack.length === 0) {
                            break;
                        }

                        c1x = x;
                        c1y = y + stack.shift();
                        c2x = c1x + stack.shift();
                        c2y = c1y + stack.shift();
                        x = c2x + stack.shift();
                        y = c2y + (stack.length === 1 ? stack.shift() : 0);
                        p.curveTo(c1x, c1y, c2x, c2y, x, y);
                    }

                    break;
                default:
                    if (v < 32) {
                        console.log('Glyph ' + glyph.index + ': unknown operator ' + v);
                    } else if (v < 247) {
                        stack.push(v - 139);
                    } else if (v < 251) {
                        b1 = code[i];
                        i += 1;
                        stack.push((v - 247) * 256 + b1 + 108);
                    } else if (v < 255) {
                        b1 = code[i];
                        i += 1;
                        stack.push(-(v - 251) * 256 - b1 - 108);
                    } else {
                        b1 = code[i];
                        b2 = code[i + 1];
                        b3 = code[i + 2];
                        b4 = code[i + 3];
                        i += 4;
                        stack.push(((b1 << 24) | (b2 << 16) | (b3 << 8) | b4) / 65536);
                    }
            }
        }
    }

    parse(code);

    glyph.advanceWidth = width;
    return p;
}

function parseCFFFDSelect(data, start, nGlyphs, fdArrayCount) {
    var fdSelect = [];
    var fdIndex;
    var parser = new parse.Parser(data, start);
    var format = parser.parseCard8();
    if (format === 0) {
        // Simple list of nGlyphs elements
        for (var iGid = 0; iGid < nGlyphs; iGid++) {
            fdIndex = parser.parseCard8();
            if (fdIndex >= fdArrayCount) {
                throw new Error('CFF table CID Font FDSelect has bad FD index value ' + fdIndex + ' (FD count ' + fdArrayCount + ')');
            }
            fdSelect.push(fdIndex);
        }
    } else if (format === 3) {
        // Ranges
        var nRanges = parser.parseCard16();
        var first = parser.parseCard16();
        if (first !== 0) {
            throw new Error('CFF Table CID Font FDSelect format 3 range has bad initial GID ' + first);
        }
        var next;
        for (var iRange = 0; iRange < nRanges; iRange++) {
            fdIndex = parser.parseCard8();
            next = parser.parseCard16();
            if (fdIndex >= fdArrayCount) {
                throw new Error('CFF table CID Font FDSelect has bad FD index value ' + fdIndex + ' (FD count ' + fdArrayCount + ')');
            }
            if (next > nGlyphs) {
                throw new Error('CFF Table CID Font FDSelect format 3 range has bad GID ' + next);
            }
            for (; first < next; first++) {
                fdSelect.push(fdIndex);
            }
            first = next;
        }
        if (next !== nGlyphs) {
            throw new Error('CFF Table CID Font FDSelect format 3 range has bad final GID ' + next);
        }
    } else {
        throw new Error('CFF Table CID Font FDSelect table has unsupported format ' + format);
    }
    return fdSelect;
}

// Parse the `CFF` table, which contains the glyph outlines in PostScript format.
function parseCFFTable(data, start, font, opt) {
    font.tables.cff = {};
    var header = parseCFFHeader(data, start);
    var nameIndex = parseCFFIndex(data, header.endOffset, parse.bytesToString);
    var topDictIndex = parseCFFIndex(data, nameIndex.endOffset);
    var stringIndex = parseCFFIndex(data, topDictIndex.endOffset, parse.bytesToString);
    var globalSubrIndex = parseCFFIndex(data, stringIndex.endOffset);
    font.gsubrs = globalSubrIndex.objects;
    font.gsubrsBias = calcCFFSubroutineBias(font.gsubrs);

    var topDictArray = gatherCFFTopDicts(data, start, topDictIndex.objects, stringIndex.objects);
    if (topDictArray.length !== 1) {
        throw new Error('CFF table has too many fonts in \'FontSet\' - count of fonts NameIndex.length = ' + topDictArray.length);
    }

    var topDict = topDictArray[0];
    font.tables.cff.topDict = topDict;

    if (topDict._privateDict) {
        font.defaultWidthX = topDict._privateDict.defaultWidthX;
        font.nominalWidthX = topDict._privateDict.nominalWidthX;
    }

    if (topDict.ros[0] !== undefined && topDict.ros[1] !== undefined) {
        font.isCIDFont = true;
    }

    if (font.isCIDFont) {
        var fdArrayOffset = topDict.fdArray;
        var fdSelectOffset = topDict.fdSelect;
        if (fdArrayOffset === 0 || fdSelectOffset === 0) {
            throw new Error('Font is marked as a CID font, but FDArray and/or FDSelect information is missing');
        }
        fdArrayOffset += start;
        var fdArrayIndex = parseCFFIndex(data, fdArrayOffset);
        var fdArray = gatherCFFTopDicts(data, start, fdArrayIndex.objects, stringIndex.objects);
        topDict._fdArray = fdArray;
        fdSelectOffset += start;
        topDict._fdSelect = parseCFFFDSelect(data, fdSelectOffset, font.numGlyphs, fdArray.length);
    }

    var privateDictOffset = start + topDict.private[1];
    var privateDict = parseCFFPrivateDict(data, privateDictOffset, topDict.private[0], stringIndex.objects);
    font.defaultWidthX = privateDict.defaultWidthX;
    font.nominalWidthX = privateDict.nominalWidthX;

    if (privateDict.subrs !== 0) {
        var subrOffset = privateDictOffset + privateDict.subrs;
        var subrIndex = parseCFFIndex(data, subrOffset);
        font.subrs = subrIndex.objects;
        font.subrsBias = calcCFFSubroutineBias(font.subrs);
    } else {
        font.subrs = [];
        font.subrsBias = 0;
    }

    // Offsets in the top dict are relative to the beginning of the CFF data, so add the CFF start offset.
    var charStringsIndex;
    if (opt.lowMemory) {
        charStringsIndex = parseCFFIndexLowMemory(data, start + topDict.charStrings);
        font.nGlyphs = charStringsIndex.offsets.length;
    } else {
        charStringsIndex = parseCFFIndex(data, start + topDict.charStrings);
        font.nGlyphs = charStringsIndex.objects.length;
    }

    var charset = parseCFFCharset(data, start + topDict.charset, font.nGlyphs, stringIndex.objects);
    if (topDict.encoding === 0) {
        // Standard encoding
        font.cffEncoding = new CffEncoding(cffStandardEncoding, charset);
    } else if (topDict.encoding === 1) {
        // Expert encoding
        font.cffEncoding = new CffEncoding(cffExpertEncoding, charset);
    } else {
        font.cffEncoding = parseCFFEncoding(data, start + topDict.encoding, charset);
    }

    // Prefer the CMAP encoding to the CFF encoding.
    font.encoding = font.encoding || font.cffEncoding;

    font.glyphs = new glyphset.GlyphSet(font);
    if (opt.lowMemory) {
        font._push = function(i) {
            var charString = getCffIndexObject(i, charStringsIndex.offsets, data, start + topDict.charStrings);
            font.glyphs.push(i, glyphset.cffGlyphLoader(font, i, parseCFFCharstring, charString));
        };
    } else {
        for (var i = 0; i < font.nGlyphs; i += 1) {
            var charString = charStringsIndex.objects[i];
            font.glyphs.push(i, glyphset.cffGlyphLoader(font, i, parseCFFCharstring, charString));
        }
    }
}

// Convert a string to a String ID (SID).
// The list of strings is modified in place.
function encodeString(s, strings) {
    var sid;

    // Is the string in the CFF standard strings?
    var i = cffStandardStrings.indexOf(s);
    if (i >= 0) {
        sid = i;
    }

    // Is the string already in the string index?
    i = strings.indexOf(s);
    if (i >= 0) {
        sid = i + cffStandardStrings.length;
    } else {
        sid = cffStandardStrings.length + strings.length;
        strings.push(s);
    }

    return sid;
}

function makeHeader() {
    return new table.Record('Header', [
        {name: 'major', type: 'Card8', value: 1},
        {name: 'minor', type: 'Card8', value: 0},
        {name: 'hdrSize', type: 'Card8', value: 4},
        {name: 'major', type: 'Card8', value: 1}
    ]);
}

function makeNameIndex(fontNames) {
    var t = new table.Record('Name INDEX', [
        {name: 'names', type: 'INDEX', value: []}
    ]);
    t.names = [];
    for (var i = 0; i < fontNames.length; i += 1) {
        t.names.push({name: 'name_' + i, type: 'NAME', value: fontNames[i]});
    }

    return t;
}

// Given a dictionary's metadata, create a DICT structure.
function makeDict(meta, attrs, strings) {
    var m = {};
    for (var i = 0; i < meta.length; i += 1) {
        var entry = meta[i];
        var value = attrs[entry.name];
        if (value !== undefined && !equals(value, entry.value)) {
            if (entry.type === 'SID') {
                value = encodeString(value, strings);
            }

            m[entry.op] = {name: entry.name, type: entry.type, value: value};
        }
    }

    return m;
}

// The Top DICT houses the global font attributes.
function makeTopDict(attrs, strings) {
    var t = new table.Record('Top DICT', [
        {name: 'dict', type: 'DICT', value: {}}
    ]);
    t.dict = makeDict(TOP_DICT_META, attrs, strings);
    return t;
}

function makeTopDictIndex(topDict) {
    var t = new table.Record('Top DICT INDEX', [
        {name: 'topDicts', type: 'INDEX', value: []}
    ]);
    t.topDicts = [{name: 'topDict_0', type: 'TABLE', value: topDict}];
    return t;
}

function makeStringIndex(strings) {
    var t = new table.Record('String INDEX', [
        {name: 'strings', type: 'INDEX', value: []}
    ]);
    t.strings = [];
    for (var i = 0; i < strings.length; i += 1) {
        t.strings.push({name: 'string_' + i, type: 'STRING', value: strings[i]});
    }

    return t;
}

function makeGlobalSubrIndex() {
    // Currently we don't use subroutines.
    return new table.Record('Global Subr INDEX', [
        {name: 'subrs', type: 'INDEX', value: []}
    ]);
}

function makeCharsets(glyphNames, strings) {
    var t = new table.Record('Charsets', [
        {name: 'format', type: 'Card8', value: 0}
    ]);
    for (var i = 0; i < glyphNames.length; i += 1) {
        var glyphName = glyphNames[i];
        var glyphSID = encodeString(glyphName, strings);
        t.fields.push({name: 'glyph_' + i, type: 'SID', value: glyphSID});
    }

    return t;
}

function glyphToOps(glyph) {
    var ops = [];
    var path = glyph.path;
    ops.push({name: 'width', type: 'NUMBER', value: glyph.advanceWidth});
    var x = 0;
    var y = 0;
    for (var i = 0; i < path.commands.length; i += 1) {
        var dx = (void 0);
        var dy = (void 0);
        var cmd = path.commands[i];
        if (cmd.type === 'Q') {
            // CFF only supports bézier curves, so convert the quad to a bézier.
            var _13 = 1 / 3;
            var _23 = 2 / 3;

            // We're going to create a new command so we don't change the original path.
            // Since all coordinates are relative, we round() them ASAP to avoid propagating errors.
            cmd = {
                type: 'C',
                x: cmd.x,
                y: cmd.y,
                x1: Math.round(_13 * x + _23 * cmd.x1),
                y1: Math.round(_13 * y + _23 * cmd.y1),
                x2: Math.round(_13 * cmd.x + _23 * cmd.x1),
                y2: Math.round(_13 * cmd.y + _23 * cmd.y1)
            };
        }

        if (cmd.type === 'M') {
            dx = Math.round(cmd.x - x);
            dy = Math.round(cmd.y - y);
            ops.push({name: 'dx', type: 'NUMBER', value: dx});
            ops.push({name: 'dy', type: 'NUMBER', value: dy});
            ops.push({name: 'rmoveto', type: 'OP', value: 21});
            x = Math.round(cmd.x);
            y = Math.round(cmd.y);
        } else if (cmd.type === 'L') {
            dx = Math.round(cmd.x - x);
            dy = Math.round(cmd.y - y);
            ops.push({name: 'dx', type: 'NUMBER', value: dx});
            ops.push({name: 'dy', type: 'NUMBER', value: dy});
            ops.push({name: 'rlineto', type: 'OP', value: 5});
            x = Math.round(cmd.x);
            y = Math.round(cmd.y);
        } else if (cmd.type === 'C') {
            var dx1 = Math.round(cmd.x1 - x);
            var dy1 = Math.round(cmd.y1 - y);
            var dx2 = Math.round(cmd.x2 - cmd.x1);
            var dy2 = Math.round(cmd.y2 - cmd.y1);
            dx = Math.round(cmd.x - cmd.x2);
            dy = Math.round(cmd.y - cmd.y2);
            ops.push({name: 'dx1', type: 'NUMBER', value: dx1});
            ops.push({name: 'dy1', type: 'NUMBER', value: dy1});
            ops.push({name: 'dx2', type: 'NUMBER', value: dx2});
            ops.push({name: 'dy2', type: 'NUMBER', value: dy2});
            ops.push({name: 'dx', type: 'NUMBER', value: dx});
            ops.push({name: 'dy', type: 'NUMBER', value: dy});
            ops.push({name: 'rrcurveto', type: 'OP', value: 8});
            x = Math.round(cmd.x);
            y = Math.round(cmd.y);
        }

        // Contours are closed automatically.
    }

    ops.push({name: 'endchar', type: 'OP', value: 14});
    return ops;
}

function makeCharStringsIndex(glyphs) {
    var t = new table.Record('CharStrings INDEX', [
        {name: 'charStrings', type: 'INDEX', value: []}
    ]);

    for (var i = 0; i < glyphs.length; i += 1) {
        var glyph = glyphs.get(i);
        var ops = glyphToOps(glyph);
        t.charStrings.push({name: glyph.name, type: 'CHARSTRING', value: ops});
    }

    return t;
}

function makePrivateDict(attrs, strings) {
    var t = new table.Record('Private DICT', [
        {name: 'dict', type: 'DICT', value: {}}
    ]);
    t.dict = makeDict(PRIVATE_DICT_META, attrs, strings);
    return t;
}

function makeCFFTable(glyphs, options) {
    var t = new table.Table('CFF ', [
        {name: 'header', type: 'RECORD'},
        {name: 'nameIndex', type: 'RECORD'},
        {name: 'topDictIndex', type: 'RECORD'},
        {name: 'stringIndex', type: 'RECORD'},
        {name: 'globalSubrIndex', type: 'RECORD'},
        {name: 'charsets', type: 'RECORD'},
        {name: 'charStringsIndex', type: 'RECORD'},
        {name: 'privateDict', type: 'RECORD'}
    ]);

    var fontScale = 1 / options.unitsPerEm;
    // We use non-zero values for the offsets so that the DICT encodes them.
    // This is important because the size of the Top DICT plays a role in offset calculation,
    // and the size shouldn't change after we've written correct offsets.
    var attrs = {
        version: options.version,
        fullName: options.fullName,
        familyName: options.familyName,
        weight: options.weightName,
        fontBBox: options.fontBBox || [0, 0, 0, 0],
        fontMatrix: [fontScale, 0, 0, fontScale, 0, 0],
        charset: 999,
        encoding: 0,
        charStrings: 999,
        private: [0, 999]
    };

    var privateAttrs = {};

    var glyphNames = [];
    var glyph;

    // Skip first glyph (.notdef)
    for (var i = 1; i < glyphs.length; i += 1) {
        glyph = glyphs.get(i);
        glyphNames.push(glyph.name);
    }

    var strings = [];

    t.header = makeHeader();
    t.nameIndex = makeNameIndex([options.postScriptName]);
    var topDict = makeTopDict(attrs, strings);
    t.topDictIndex = makeTopDictIndex(topDict);
    t.globalSubrIndex = makeGlobalSubrIndex();
    t.charsets = makeCharsets(glyphNames, strings);
    t.charStringsIndex = makeCharStringsIndex(glyphs);
    t.privateDict = makePrivateDict(privateAttrs, strings);

    // Needs to come at the end, to encode all custom strings used in the font.
    t.stringIndex = makeStringIndex(strings);

    var startOffset = t.header.sizeOf() +
        t.nameIndex.sizeOf() +
        t.topDictIndex.sizeOf() +
        t.stringIndex.sizeOf() +
        t.globalSubrIndex.sizeOf();
    attrs.charset = startOffset;

    // We use the CFF standard encoding; proper encoding will be handled in cmap.
    attrs.encoding = 0;
    attrs.charStrings = attrs.charset + t.charsets.sizeOf();
    attrs.private[1] = attrs.charStrings + t.charStringsIndex.sizeOf();

    // Recreate the Top DICT INDEX with the correct offsets.
    topDict = makeTopDict(attrs, strings);
    t.topDictIndex = makeTopDictIndex(topDict);

    return t;
}

var cff = { parse: parseCFFTable, make: makeCFFTable };

// The `head` table contains global information about the font.

// Parse the header `head` table
function parseHeadTable(data, start) {
    var head = {};
    var p = new parse.Parser(data, start);
    head.version = p.parseVersion();
    head.fontRevision = Math.round(p.parseFixed() * 1000) / 1000;
    head.checkSumAdjustment = p.parseULong();
    head.magicNumber = p.parseULong();
    check.argument(head.magicNumber === 0x5F0F3CF5, 'Font header has wrong magic number.');
    head.flags = p.parseUShort();
    head.unitsPerEm = p.parseUShort();
    head.created = p.parseLongDateTime();
    head.modified = p.parseLongDateTime();
    head.xMin = p.parseShort();
    head.yMin = p.parseShort();
    head.xMax = p.parseShort();
    head.yMax = p.parseShort();
    head.macStyle = p.parseUShort();
    head.lowestRecPPEM = p.parseUShort();
    head.fontDirectionHint = p.parseShort();
    head.indexToLocFormat = p.parseShort();
    head.glyphDataFormat = p.parseShort();
    return head;
}

function makeHeadTable(options) {
    // Apple Mac timestamp epoch is 01/01/1904 not 01/01/1970
    var timestamp = Math.round(new Date().getTime() / 1000) + 2082844800;
    var createdTimestamp = timestamp;

    if (options.createdTimestamp) {
        createdTimestamp = options.createdTimestamp + 2082844800;
    }

    return new table.Table('head', [
        {name: 'version', type: 'FIXED', value: 0x00010000},
        {name: 'fontRevision', type: 'FIXED', value: 0x00010000},
        {name: 'checkSumAdjustment', type: 'ULONG', value: 0},
        {name: 'magicNumber', type: 'ULONG', value: 0x5F0F3CF5},
        {name: 'flags', type: 'USHORT', value: 0},
        {name: 'unitsPerEm', type: 'USHORT', value: 1000},
        {name: 'created', type: 'LONGDATETIME', value: createdTimestamp},
        {name: 'modified', type: 'LONGDATETIME', value: timestamp},
        {name: 'xMin', type: 'SHORT', value: 0},
        {name: 'yMin', type: 'SHORT', value: 0},
        {name: 'xMax', type: 'SHORT', value: 0},
        {name: 'yMax', type: 'SHORT', value: 0},
        {name: 'macStyle', type: 'USHORT', value: 0},
        {name: 'lowestRecPPEM', type: 'USHORT', value: 0},
        {name: 'fontDirectionHint', type: 'SHORT', value: 2},
        {name: 'indexToLocFormat', type: 'SHORT', value: 0},
        {name: 'glyphDataFormat', type: 'SHORT', value: 0}
    ], options);
}

var head = { parse: parseHeadTable, make: makeHeadTable };

// The `hhea` table contains information for horizontal layout.

// Parse the horizontal header `hhea` table
function parseHheaTable(data, start) {
    var hhea = {};
    var p = new parse.Parser(data, start);
    hhea.version = p.parseVersion();
    hhea.ascender = p.parseShort();
    hhea.descender = p.parseShort();
    hhea.lineGap = p.parseShort();
    hhea.advanceWidthMax = p.parseUShort();
    hhea.minLeftSideBearing = p.parseShort();
    hhea.minRightSideBearing = p.parseShort();
    hhea.xMaxExtent = p.parseShort();
    hhea.caretSlopeRise = p.parseShort();
    hhea.caretSlopeRun = p.parseShort();
    hhea.caretOffset = p.parseShort();
    p.relativeOffset += 8;
    hhea.metricDataFormat = p.parseShort();
    hhea.numberOfHMetrics = p.parseUShort();
    return hhea;
}

function makeHheaTable(options) {
    return new table.Table('hhea', [
        {name: 'version', type: 'FIXED', value: 0x00010000},
        {name: 'ascender', type: 'FWORD', value: 0},
        {name: 'descender', type: 'FWORD', value: 0},
        {name: 'lineGap', type: 'FWORD', value: 0},
        {name: 'advanceWidthMax', type: 'UFWORD', value: 0},
        {name: 'minLeftSideBearing', type: 'FWORD', value: 0},
        {name: 'minRightSideBearing', type: 'FWORD', value: 0},
        {name: 'xMaxExtent', type: 'FWORD', value: 0},
        {name: 'caretSlopeRise', type: 'SHORT', value: 1},
        {name: 'caretSlopeRun', type: 'SHORT', value: 0},
        {name: 'caretOffset', type: 'SHORT', value: 0},
        {name: 'reserved1', type: 'SHORT', value: 0},
        {name: 'reserved2', type: 'SHORT', value: 0},
        {name: 'reserved3', type: 'SHORT', value: 0},
        {name: 'reserved4', type: 'SHORT', value: 0},
        {name: 'metricDataFormat', type: 'SHORT', value: 0},
        {name: 'numberOfHMetrics', type: 'USHORT', value: 0}
    ], options);
}

var hhea = { parse: parseHheaTable, make: makeHheaTable };

// The `hmtx` table contains the horizontal metrics for all glyphs.

function parseHmtxTableAll(data, start, numMetrics, numGlyphs, glyphs) {
    var advanceWidth;
    var leftSideBearing;
    var p = new parse.Parser(data, start);
    for (var i = 0; i < numGlyphs; i += 1) {
        // If the font is monospaced, only one entry is needed. This last entry applies to all subsequent glyphs.
        if (i < numMetrics) {
            advanceWidth = p.parseUShort();
            leftSideBearing = p.parseShort();
        }

        var glyph = glyphs.get(i);
        glyph.advanceWidth = advanceWidth;
        glyph.leftSideBearing = leftSideBearing;
    }
}

function parseHmtxTableOnLowMemory(font, data, start, numMetrics, numGlyphs) {
    font._hmtxTableData = {};

    var advanceWidth;
    var leftSideBearing;
    var p = new parse.Parser(data, start);
    for (var i = 0; i < numGlyphs; i += 1) {
        // If the font is monospaced, only one entry is needed. This last entry applies to all subsequent glyphs.
        if (i < numMetrics) {
            advanceWidth = p.parseUShort();
            leftSideBearing = p.parseShort();
        }

        font._hmtxTableData[i] = {
            advanceWidth: advanceWidth,
            leftSideBearing: leftSideBearing
        };
    }
}

// Parse the `hmtx` table, which contains the horizontal metrics for all glyphs.
// This function augments the glyph array, adding the advanceWidth and leftSideBearing to each glyph.
function parseHmtxTable(font, data, start, numMetrics, numGlyphs, glyphs, opt) {
    if (opt.lowMemory)
        { parseHmtxTableOnLowMemory(font, data, start, numMetrics, numGlyphs); }
    else
        { parseHmtxTableAll(data, start, numMetrics, numGlyphs, glyphs); }
}

function makeHmtxTable(glyphs) {
    var t = new table.Table('hmtx', []);
    for (var i = 0; i < glyphs.length; i += 1) {
        var glyph = glyphs.get(i);
        var advanceWidth = glyph.advanceWidth || 0;
        var leftSideBearing = glyph.leftSideBearing || 0;
        t.fields.push({name: 'advanceWidth_' + i, type: 'USHORT', value: advanceWidth});
        t.fields.push({name: 'leftSideBearing_' + i, type: 'SHORT', value: leftSideBearing});
    }

    return t;
}

var hmtx = { parse: parseHmtxTable, make: makeHmtxTable };

// The `ltag` table stores IETF BCP-47 language tags. It allows supporting

function makeLtagTable(tags) {
    var result = new table.Table('ltag', [
        {name: 'version', type: 'ULONG', value: 1},
        {name: 'flags', type: 'ULONG', value: 0},
        {name: 'numTags', type: 'ULONG', value: tags.length}
    ]);

    var stringPool = '';
    var stringPoolOffset = 12 + tags.length * 4;
    for (var i = 0; i < tags.length; ++i) {
        var pos = stringPool.indexOf(tags[i]);
        if (pos < 0) {
            pos = stringPool.length;
            stringPool += tags[i];
        }

        result.fields.push({name: 'offset ' + i, type: 'USHORT', value: stringPoolOffset + pos});
        result.fields.push({name: 'length ' + i, type: 'USHORT', value: tags[i].length});
    }

    result.fields.push({name: 'stringPool', type: 'CHARARRAY', value: stringPool});
    return result;
}

function parseLtagTable(data, start) {
    var p = new parse.Parser(data, start);
    var tableVersion = p.parseULong();
    check.argument(tableVersion === 1, 'Unsupported ltag table version.');
    // The 'ltag' specification does not define any flags; skip the field.
    p.skip('uLong', 1);
    var numTags = p.parseULong();

    var tags = [];
    for (var i = 0; i < numTags; i++) {
        var tag = '';
        var offset = start + p.parseUShort();
        var length = p.parseUShort();
        for (var j = offset; j < offset + length; ++j) {
            tag += String.fromCharCode(data.getInt8(j));
        }

        tags.push(tag);
    }

    return tags;
}

var ltag = { make: makeLtagTable, parse: parseLtagTable };

// The `maxp` table establishes the memory requirements for the font.

// Parse the maximum profile `maxp` table.
function parseMaxpTable(data, start) {
    var maxp = {};
    var p = new parse.Parser(data, start);
    maxp.version = p.parseVersion();
    maxp.numGlyphs = p.parseUShort();
    if (maxp.version === 1.0) {
        maxp.maxPoints = p.parseUShort();
        maxp.maxContours = p.parseUShort();
        maxp.maxCompositePoints = p.parseUShort();
        maxp.maxCompositeContours = p.parseUShort();
        maxp.maxZones = p.parseUShort();
        maxp.maxTwilightPoints = p.parseUShort();
        maxp.maxStorage = p.parseUShort();
        maxp.maxFunctionDefs = p.parseUShort();
        maxp.maxInstructionDefs = p.parseUShort();
        maxp.maxStackElements = p.parseUShort();
        maxp.maxSizeOfInstructions = p.parseUShort();
        maxp.maxComponentElements = p.parseUShort();
        maxp.maxComponentDepth = p.parseUShort();
    }

    return maxp;
}

function makeMaxpTable(numGlyphs) {
    return new table.Table('maxp', [
        {name: 'version', type: 'FIXED', value: 0x00005000},
        {name: 'numGlyphs', type: 'USHORT', value: numGlyphs}
    ]);
}

var maxp = { parse: parseMaxpTable, make: makeMaxpTable };

// The `name` naming table.

// NameIDs for the name table.
var nameTableNames = [
    'copyright',              // 0
    'fontFamily',             // 1
    'fontSubfamily',          // 2
    'uniqueID',               // 3
    'fullName',               // 4
    'version',                // 5
    'postScriptName',         // 6
    'trademark',              // 7
    'manufacturer',           // 8
    'designer',               // 9
    'description',            // 10
    'manufacturerURL',        // 11
    'designerURL',            // 12
    'license',                // 13
    'licenseURL',             // 14
    'reserved',               // 15
    'preferredFamily',        // 16
    'preferredSubfamily',     // 17
    'compatibleFullName',     // 18
    'sampleText',             // 19
    'postScriptFindFontName', // 20
    'wwsFamily',              // 21
    'wwsSubfamily'            // 22
];

var macLanguages = {
    0: 'en',
    1: 'fr',
    2: 'de',
    3: 'it',
    4: 'nl',
    5: 'sv',
    6: 'es',
    7: 'da',
    8: 'pt',
    9: 'no',
    10: 'he',
    11: 'ja',
    12: 'ar',
    13: 'fi',
    14: 'el',
    15: 'is',
    16: 'mt',
    17: 'tr',
    18: 'hr',
    19: 'zh-Hant',
    20: 'ur',
    21: 'hi',
    22: 'th',
    23: 'ko',
    24: 'lt',
    25: 'pl',
    26: 'hu',
    27: 'es',
    28: 'lv',
    29: 'se',
    30: 'fo',
    31: 'fa',
    32: 'ru',
    33: 'zh',
    34: 'nl-BE',
    35: 'ga',
    36: 'sq',
    37: 'ro',
    38: 'cz',
    39: 'sk',
    40: 'si',
    41: 'yi',
    42: 'sr',
    43: 'mk',
    44: 'bg',
    45: 'uk',
    46: 'be',
    47: 'uz',
    48: 'kk',
    49: 'az-Cyrl',
    50: 'az-Arab',
    51: 'hy',
    52: 'ka',
    53: 'mo',
    54: 'ky',
    55: 'tg',
    56: 'tk',
    57: 'mn-CN',
    58: 'mn',
    59: 'ps',
    60: 'ks',
    61: 'ku',
    62: 'sd',
    63: 'bo',
    64: 'ne',
    65: 'sa',
    66: 'mr',
    67: 'bn',
    68: 'as',
    69: 'gu',
    70: 'pa',
    71: 'or',
    72: 'ml',
    73: 'kn',
    74: 'ta',
    75: 'te',
    76: 'si',
    77: 'my',
    78: 'km',
    79: 'lo',
    80: 'vi',
    81: 'id',
    82: 'tl',
    83: 'ms',
    84: 'ms-Arab',
    85: 'am',
    86: 'ti',
    87: 'om',
    88: 'so',
    89: 'sw',
    90: 'rw',
    91: 'rn',
    92: 'ny',
    93: 'mg',
    94: 'eo',
    128: 'cy',
    129: 'eu',
    130: 'ca',
    131: 'la',
    132: 'qu',
    133: 'gn',
    134: 'ay',
    135: 'tt',
    136: 'ug',
    137: 'dz',
    138: 'jv',
    139: 'su',
    140: 'gl',
    141: 'af',
    142: 'br',
    143: 'iu',
    144: 'gd',
    145: 'gv',
    146: 'ga',
    147: 'to',
    148: 'el-polyton',
    149: 'kl',
    150: 'az',
    151: 'nn'
};

// MacOS language ID → MacOS script ID
//
// Note that the script ID is not sufficient to determine what encoding
// to use in TrueType files. For some languages, MacOS used a modification
// of a mainstream script. For example, an Icelandic name would be stored
// with smRoman in the TrueType naming table, but the actual encoding
// is a special Icelandic version of the normal Macintosh Roman encoding.
// As another example, Inuktitut uses an 8-bit encoding for Canadian Aboriginal
// Syllables but MacOS had run out of available script codes, so this was
// done as a (pretty radical) "modification" of Ethiopic.
//
// http://unicode.org/Public/MAPPINGS/VENDORS/APPLE/Readme.txt
var macLanguageToScript = {
    0: 0,  // langEnglish → smRoman
    1: 0,  // langFrench → smRoman
    2: 0,  // langGerman → smRoman
    3: 0,  // langItalian → smRoman
    4: 0,  // langDutch → smRoman
    5: 0,  // langSwedish → smRoman
    6: 0,  // langSpanish → smRoman
    7: 0,  // langDanish → smRoman
    8: 0,  // langPortuguese → smRoman
    9: 0,  // langNorwegian → smRoman
    10: 5,  // langHebrew → smHebrew
    11: 1,  // langJapanese → smJapanese
    12: 4,  // langArabic → smArabic
    13: 0,  // langFinnish → smRoman
    14: 6,  // langGreek → smGreek
    15: 0,  // langIcelandic → smRoman (modified)
    16: 0,  // langMaltese → smRoman
    17: 0,  // langTurkish → smRoman (modified)
    18: 0,  // langCroatian → smRoman (modified)
    19: 2,  // langTradChinese → smTradChinese
    20: 4,  // langUrdu → smArabic
    21: 9,  // langHindi → smDevanagari
    22: 21,  // langThai → smThai
    23: 3,  // langKorean → smKorean
    24: 29,  // langLithuanian → smCentralEuroRoman
    25: 29,  // langPolish → smCentralEuroRoman
    26: 29,  // langHungarian → smCentralEuroRoman
    27: 29,  // langEstonian → smCentralEuroRoman
    28: 29,  // langLatvian → smCentralEuroRoman
    29: 0,  // langSami → smRoman
    30: 0,  // langFaroese → smRoman (modified)
    31: 4,  // langFarsi → smArabic (modified)
    32: 7,  // langRussian → smCyrillic
    33: 25,  // langSimpChinese → smSimpChinese
    34: 0,  // langFlemish → smRoman
    35: 0,  // langIrishGaelic → smRoman (modified)
    36: 0,  // langAlbanian → smRoman
    37: 0,  // langRomanian → smRoman (modified)
    38: 29,  // langCzech → smCentralEuroRoman
    39: 29,  // langSlovak → smCentralEuroRoman
    40: 0,  // langSlovenian → smRoman (modified)
    41: 5,  // langYiddish → smHebrew
    42: 7,  // langSerbian → smCyrillic
    43: 7,  // langMacedonian → smCyrillic
    44: 7,  // langBulgarian → smCyrillic
    45: 7,  // langUkrainian → smCyrillic (modified)
    46: 7,  // langByelorussian → smCyrillic
    47: 7,  // langUzbek → smCyrillic
    48: 7,  // langKazakh → smCyrillic
    49: 7,  // langAzerbaijani → smCyrillic
    50: 4,  // langAzerbaijanAr → smArabic
    51: 24,  // langArmenian → smArmenian
    52: 23,  // langGeorgian → smGeorgian
    53: 7,  // langMoldavian → smCyrillic
    54: 7,  // langKirghiz → smCyrillic
    55: 7,  // langTajiki → smCyrillic
    56: 7,  // langTurkmen → smCyrillic
    57: 27,  // langMongolian → smMongolian
    58: 7,  // langMongolianCyr → smCyrillic
    59: 4,  // langPashto → smArabic
    60: 4,  // langKurdish → smArabic
    61: 4,  // langKashmiri → smArabic
    62: 4,  // langSindhi → smArabic
    63: 26,  // langTibetan → smTibetan
    64: 9,  // langNepali → smDevanagari
    65: 9,  // langSanskrit → smDevanagari
    66: 9,  // langMarathi → smDevanagari
    67: 13,  // langBengali → smBengali
    68: 13,  // langAssamese → smBengali
    69: 11,  // langGujarati → smGujarati
    70: 10,  // langPunjabi → smGurmukhi
    71: 12,  // langOriya → smOriya
    72: 17,  // langMalayalam → smMalayalam
    73: 16,  // langKannada → smKannada
    74: 14,  // langTamil → smTamil
    75: 15,  // langTelugu → smTelugu
    76: 18,  // langSinhalese → smSinhalese
    77: 19,  // langBurmese → smBurmese
    78: 20,  // langKhmer → smKhmer
    79: 22,  // langLao → smLao
    80: 30,  // langVietnamese → smVietnamese
    81: 0,  // langIndonesian → smRoman
    82: 0,  // langTagalog → smRoman
    83: 0,  // langMalayRoman → smRoman
    84: 4,  // langMalayArabic → smArabic
    85: 28,  // langAmharic → smEthiopic
    86: 28,  // langTigrinya → smEthiopic
    87: 28,  // langOromo → smEthiopic
    88: 0,  // langSomali → smRoman
    89: 0,  // langSwahili → smRoman
    90: 0,  // langKinyarwanda → smRoman
    91: 0,  // langRundi → smRoman
    92: 0,  // langNyanja → smRoman
    93: 0,  // langMalagasy → smRoman
    94: 0,  // langEsperanto → smRoman
    128: 0,  // langWelsh → smRoman (modified)
    129: 0,  // langBasque → smRoman
    130: 0,  // langCatalan → smRoman
    131: 0,  // langLatin → smRoman
    132: 0,  // langQuechua → smRoman
    133: 0,  // langGuarani → smRoman
    134: 0,  // langAymara → smRoman
    135: 7,  // langTatar → smCyrillic
    136: 4,  // langUighur → smArabic
    137: 26,  // langDzongkha → smTibetan
    138: 0,  // langJavaneseRom → smRoman
    139: 0,  // langSundaneseRom → smRoman
    140: 0,  // langGalician → smRoman
    141: 0,  // langAfrikaans → smRoman
    142: 0,  // langBreton → smRoman (modified)
    143: 28,  // langInuktitut → smEthiopic (modified)
    144: 0,  // langScottishGaelic → smRoman (modified)
    145: 0,  // langManxGaelic → smRoman (modified)
    146: 0,  // langIrishGaelicScript → smRoman (modified)
    147: 0,  // langTongan → smRoman
    148: 6,  // langGreekAncient → smRoman
    149: 0,  // langGreenlandic → smRoman
    150: 0,  // langAzerbaijanRoman → smRoman
    151: 0   // langNynorsk → smRoman
};

// While Microsoft indicates a region/country for all its language
// IDs, we omit the region code if it's equal to the "most likely
// region subtag" according to Unicode CLDR. For scripts, we omit
// the subtag if it is equal to the Suppress-Script entry in the
// IANA language subtag registry for IETF BCP 47.
//
// For example, Microsoft states that its language code 0x041A is
// Croatian in Croatia. We transform this to the BCP 47 language code 'hr'
// and not 'hr-HR' because Croatia is the default country for Croatian,
// according to Unicode CLDR. As another example, Microsoft states
// that 0x101A is Croatian (Latin) in Bosnia-Herzegovina. We transform
// this to 'hr-BA' and not 'hr-Latn-BA' because Latin is the default script
// for the Croatian language, according to IANA.
//
// http://www.unicode.org/cldr/charts/latest/supplemental/likely_subtags.html
// http://www.iana.org/assignments/language-subtag-registry/language-subtag-registry
var windowsLanguages = {
    0x0436: 'af',
    0x041C: 'sq',
    0x0484: 'gsw',
    0x045E: 'am',
    0x1401: 'ar-DZ',
    0x3C01: 'ar-BH',
    0x0C01: 'ar',
    0x0801: 'ar-IQ',
    0x2C01: 'ar-JO',
    0x3401: 'ar-KW',
    0x3001: 'ar-LB',
    0x1001: 'ar-LY',
    0x1801: 'ary',
    0x2001: 'ar-OM',
    0x4001: 'ar-QA',
    0x0401: 'ar-SA',
    0x2801: 'ar-SY',
    0x1C01: 'aeb',
    0x3801: 'ar-AE',
    0x2401: 'ar-YE',
    0x042B: 'hy',
    0x044D: 'as',
    0x082C: 'az-Cyrl',
    0x042C: 'az',
    0x046D: 'ba',
    0x042D: 'eu',
    0x0423: 'be',
    0x0845: 'bn',
    0x0445: 'bn-IN',
    0x201A: 'bs-Cyrl',
    0x141A: 'bs',
    0x047E: 'br',
    0x0402: 'bg',
    0x0403: 'ca',
    0x0C04: 'zh-HK',
    0x1404: 'zh-MO',
    0x0804: 'zh',
    0x1004: 'zh-SG',
    0x0404: 'zh-TW',
    0x0483: 'co',
    0x041A: 'hr',
    0x101A: 'hr-BA',
    0x0405: 'cs',
    0x0406: 'da',
    0x048C: 'prs',
    0x0465: 'dv',
    0x0813: 'nl-BE',
    0x0413: 'nl',
    0x0C09: 'en-AU',
    0x2809: 'en-BZ',
    0x1009: 'en-CA',
    0x2409: 'en-029',
    0x4009: 'en-IN',
    0x1809: 'en-IE',
    0x2009: 'en-JM',
    0x4409: 'en-MY',
    0x1409: 'en-NZ',
    0x3409: 'en-PH',
    0x4809: 'en-SG',
    0x1C09: 'en-ZA',
    0x2C09: 'en-TT',
    0x0809: 'en-GB',
    0x0409: 'en',
    0x3009: 'en-ZW',
    0x0425: 'et',
    0x0438: 'fo',
    0x0464: 'fil',
    0x040B: 'fi',
    0x080C: 'fr-BE',
    0x0C0C: 'fr-CA',
    0x040C: 'fr',
    0x140C: 'fr-LU',
    0x180C: 'fr-MC',
    0x100C: 'fr-CH',
    0x0462: 'fy',
    0x0456: 'gl',
    0x0437: 'ka',
    0x0C07: 'de-AT',
    0x0407: 'de',
    0x1407: 'de-LI',
    0x1007: 'de-LU',
    0x0807: 'de-CH',
    0x0408: 'el',
    0x046F: 'kl',
    0x0447: 'gu',
    0x0468: 'ha',
    0x040D: 'he',
    0x0439: 'hi',
    0x040E: 'hu',
    0x040F: 'is',
    0x0470: 'ig',
    0x0421: 'id',
    0x045D: 'iu',
    0x085D: 'iu-Latn',
    0x083C: 'ga',
    0x0434: 'xh',
    0x0435: 'zu',
    0x0410: 'it',
    0x0810: 'it-CH',
    0x0411: 'ja',
    0x044B: 'kn',
    0x043F: 'kk',
    0x0453: 'km',
    0x0486: 'quc',
    0x0487: 'rw',
    0x0441: 'sw',
    0x0457: 'kok',
    0x0412: 'ko',
    0x0440: 'ky',
    0x0454: 'lo',
    0x0426: 'lv',
    0x0427: 'lt',
    0x082E: 'dsb',
    0x046E: 'lb',
    0x042F: 'mk',
    0x083E: 'ms-BN',
    0x043E: 'ms',
    0x044C: 'ml',
    0x043A: 'mt',
    0x0481: 'mi',
    0x047A: 'arn',
    0x044E: 'mr',
    0x047C: 'moh',
    0x0450: 'mn',
    0x0850: 'mn-CN',
    0x0461: 'ne',
    0x0414: 'nb',
    0x0814: 'nn',
    0x0482: 'oc',
    0x0448: 'or',
    0x0463: 'ps',
    0x0415: 'pl',
    0x0416: 'pt',
    0x0816: 'pt-PT',
    0x0446: 'pa',
    0x046B: 'qu-BO',
    0x086B: 'qu-EC',
    0x0C6B: 'qu',
    0x0418: 'ro',
    0x0417: 'rm',
    0x0419: 'ru',
    0x243B: 'smn',
    0x103B: 'smj-NO',
    0x143B: 'smj',
    0x0C3B: 'se-FI',
    0x043B: 'se',
    0x083B: 'se-SE',
    0x203B: 'sms',
    0x183B: 'sma-NO',
    0x1C3B: 'sms',
    0x044F: 'sa',
    0x1C1A: 'sr-Cyrl-BA',
    0x0C1A: 'sr',
    0x181A: 'sr-Latn-BA',
    0x081A: 'sr-Latn',
    0x046C: 'nso',
    0x0432: 'tn',
    0x045B: 'si',
    0x041B: 'sk',
    0x0424: 'sl',
    0x2C0A: 'es-AR',
    0x400A: 'es-BO',
    0x340A: 'es-CL',
    0x240A: 'es-CO',
    0x140A: 'es-CR',
    0x1C0A: 'es-DO',
    0x300A: 'es-EC',
    0x440A: 'es-SV',
    0x100A: 'es-GT',
    0x480A: 'es-HN',
    0x080A: 'es-MX',
    0x4C0A: 'es-NI',
    0x180A: 'es-PA',
    0x3C0A: 'es-PY',
    0x280A: 'es-PE',
    0x500A: 'es-PR',

    // Microsoft has defined two different language codes for
    // “Spanish with modern sorting” and “Spanish with traditional
    // sorting”. This makes sense for collation APIs, and it would be
    // possible to express this in BCP 47 language tags via Unicode
    // extensions (eg., es-u-co-trad is Spanish with traditional
    // sorting). However, for storing names in fonts, the distinction
    // does not make sense, so we give “es” in both cases.
    0x0C0A: 'es',
    0x040A: 'es',

    0x540A: 'es-US',
    0x380A: 'es-UY',
    0x200A: 'es-VE',
    0x081D: 'sv-FI',
    0x041D: 'sv',
    0x045A: 'syr',
    0x0428: 'tg',
    0x085F: 'tzm',
    0x0449: 'ta',
    0x0444: 'tt',
    0x044A: 'te',
    0x041E: 'th',
    0x0451: 'bo',
    0x041F: 'tr',
    0x0442: 'tk',
    0x0480: 'ug',
    0x0422: 'uk',
    0x042E: 'hsb',
    0x0420: 'ur',
    0x0843: 'uz-Cyrl',
    0x0443: 'uz',
    0x042A: 'vi',
    0x0452: 'cy',
    0x0488: 'wo',
    0x0485: 'sah',
    0x0478: 'ii',
    0x046A: 'yo'
};

// Returns a IETF BCP 47 language code, for example 'zh-Hant'
// for 'Chinese in the traditional script'.
function getLanguageCode(platformID, languageID, ltag) {
    switch (platformID) {
        case 0:  // Unicode
            if (languageID === 0xFFFF) {
                return 'und';
            } else if (ltag) {
                return ltag[languageID];
            }

            break;

        case 1:  // Macintosh
            return macLanguages[languageID];

        case 3:  // Windows
            return windowsLanguages[languageID];
    }

    return undefined;
}

var utf16 = 'utf-16';

// MacOS script ID → encoding. This table stores the default case,
// which can be overridden by macLanguageEncodings.
var macScriptEncodings = {
    0: 'macintosh',           // smRoman
    1: 'x-mac-japanese',      // smJapanese
    2: 'x-mac-chinesetrad',   // smTradChinese
    3: 'x-mac-korean',        // smKorean
    6: 'x-mac-greek',         // smGreek
    7: 'x-mac-cyrillic',      // smCyrillic
    9: 'x-mac-devanagai',     // smDevanagari
    10: 'x-mac-gurmukhi',     // smGurmukhi
    11: 'x-mac-gujarati',     // smGujarati
    12: 'x-mac-oriya',        // smOriya
    13: 'x-mac-bengali',      // smBengali
    14: 'x-mac-tamil',        // smTamil
    15: 'x-mac-telugu',       // smTelugu
    16: 'x-mac-kannada',      // smKannada
    17: 'x-mac-malayalam',    // smMalayalam
    18: 'x-mac-sinhalese',    // smSinhalese
    19: 'x-mac-burmese',      // smBurmese
    20: 'x-mac-khmer',        // smKhmer
    21: 'x-mac-thai',         // smThai
    22: 'x-mac-lao',          // smLao
    23: 'x-mac-georgian',     // smGeorgian
    24: 'x-mac-armenian',     // smArmenian
    25: 'x-mac-chinesesimp',  // smSimpChinese
    26: 'x-mac-tibetan',      // smTibetan
    27: 'x-mac-mongolian',    // smMongolian
    28: 'x-mac-ethiopic',     // smEthiopic
    29: 'x-mac-ce',           // smCentralEuroRoman
    30: 'x-mac-vietnamese',   // smVietnamese
    31: 'x-mac-extarabic'     // smExtArabic
};

// MacOS language ID → encoding. This table stores the exceptional
// cases, which override macScriptEncodings. For writing MacOS naming
// tables, we need to emit a MacOS script ID. Therefore, we cannot
// merge macScriptEncodings into macLanguageEncodings.
//
// http://unicode.org/Public/MAPPINGS/VENDORS/APPLE/Readme.txt
var macLanguageEncodings = {
    15: 'x-mac-icelandic',    // langIcelandic
    17: 'x-mac-turkish',      // langTurkish
    18: 'x-mac-croatian',     // langCroatian
    24: 'x-mac-ce',           // langLithuanian
    25: 'x-mac-ce',           // langPolish
    26: 'x-mac-ce',           // langHungarian
    27: 'x-mac-ce',           // langEstonian
    28: 'x-mac-ce',           // langLatvian
    30: 'x-mac-icelandic',    // langFaroese
    37: 'x-mac-romanian',     // langRomanian
    38: 'x-mac-ce',           // langCzech
    39: 'x-mac-ce',           // langSlovak
    40: 'x-mac-ce',           // langSlovenian
    143: 'x-mac-inuit',       // langInuktitut
    146: 'x-mac-gaelic'       // langIrishGaelicScript
};

function getEncoding(platformID, encodingID, languageID) {
    switch (platformID) {
        case 0:  // Unicode
            return utf16;

        case 1:  // Apple Macintosh
            return macLanguageEncodings[languageID] || macScriptEncodings[encodingID];

        case 3:  // Microsoft Windows
            if (encodingID === 1 || encodingID === 10) {
                return utf16;
            }

            break;
    }

    return undefined;
}

// Parse the naming `name` table.
// FIXME: Format 1 additional fields are not supported yet.
// ltag is the content of the `ltag' table, such as ['en', 'zh-Hans', 'de-CH-1904'].
function parseNameTable(data, start, ltag) {
    var name = {};
    var p = new parse.Parser(data, start);
    var format = p.parseUShort();
    var count = p.parseUShort();
    var stringOffset = p.offset + p.parseUShort();
    for (var i = 0; i < count; i++) {
        var platformID = p.parseUShort();
        var encodingID = p.parseUShort();
        var languageID = p.parseUShort();
        var nameID = p.parseUShort();
        var property = nameTableNames[nameID] || nameID;
        var byteLength = p.parseUShort();
        var offset = p.parseUShort();
        var language = getLanguageCode(platformID, languageID, ltag);
        var encoding = getEncoding(platformID, encodingID, languageID);
        if (encoding !== undefined && language !== undefined) {
            var text = (void 0);
            if (encoding === utf16) {
                text = decode.UTF16(data, stringOffset + offset, byteLength);
            } else {
                text = decode.MACSTRING(data, stringOffset + offset, byteLength, encoding);
            }

            if (text) {
                var translations = name[property];
                if (translations === undefined) {
                    translations = name[property] = {};
                }

                translations[language] = text;
            }
        }
    }

    var langTagCount = 0;
    if (format === 1) {
        // FIXME: Also handle Microsoft's 'name' table 1.
        langTagCount = p.parseUShort();
    }

    return name;
}

// {23: 'foo'} → {'foo': 23}
// ['bar', 'baz'] → {'bar': 0, 'baz': 1}
function reverseDict(dict) {
    var result = {};
    for (var key in dict) {
        result[dict[key]] = parseInt(key);
    }

    return result;
}

function makeNameRecord(platformID, encodingID, languageID, nameID, length, offset) {
    return new table.Record('NameRecord', [
        {name: 'platformID', type: 'USHORT', value: platformID},
        {name: 'encodingID', type: 'USHORT', value: encodingID},
        {name: 'languageID', type: 'USHORT', value: languageID},
        {name: 'nameID', type: 'USHORT', value: nameID},
        {name: 'length', type: 'USHORT', value: length},
        {name: 'offset', type: 'USHORT', value: offset}
    ]);
}

// Finds the position of needle in haystack, or -1 if not there.
// Like String.indexOf(), but for arrays.
function findSubArray(needle, haystack) {
    var needleLength = needle.length;
    var limit = haystack.length - needleLength + 1;

    loop:
    for (var pos = 0; pos < limit; pos++) {
        for (; pos < limit; pos++) {
            for (var k = 0; k < needleLength; k++) {
                if (haystack[pos + k] !== needle[k]) {
                    continue loop;
                }
            }

            return pos;
        }
    }

    return -1;
}

function addStringToPool(s, pool) {
    var offset = findSubArray(s, pool);
    if (offset < 0) {
        offset = pool.length;
        var i = 0;
        var len = s.length;
        for (; i < len; ++i) {
            pool.push(s[i]);
        }

    }

    return offset;
}

function makeNameTable(names, ltag) {
    var nameID;
    var nameIDs = [];

    var namesWithNumericKeys = {};
    var nameTableIds = reverseDict(nameTableNames);
    for (var key in names) {
        var id = nameTableIds[key];
        if (id === undefined) {
            id = key;
        }

        nameID = parseInt(id);

        if (isNaN(nameID)) {
            throw new Error('Name table entry "' + key + '" does not exist, see nameTableNames for complete list.');
        }

        namesWithNumericKeys[nameID] = names[key];
        nameIDs.push(nameID);
    }

    var macLanguageIds = reverseDict(macLanguages);
    var windowsLanguageIds = reverseDict(windowsLanguages);

    var nameRecords = [];
    var stringPool = [];

    for (var i = 0; i < nameIDs.length; i++) {
        nameID = nameIDs[i];
        var translations = namesWithNumericKeys[nameID];
        for (var lang in translations) {
            var text = translations[lang];

            // For MacOS, we try to emit the name in the form that was introduced
            // in the initial version of the TrueType spec (in the late 1980s).
            // However, this can fail for various reasons: the requested BCP 47
            // language code might not have an old-style Mac equivalent;
            // we might not have a codec for the needed character encoding;
            // or the name might contain characters that cannot be expressed
            // in the old-style Macintosh encoding. In case of failure, we emit
            // the name in a more modern fashion (Unicode encoding with BCP 47
            // language tags) that is recognized by MacOS 10.5, released in 2009.
            // If fonts were only read by operating systems, we could simply
            // emit all names in the modern form; this would be much easier.
            // However, there are many applications and libraries that read
            // 'name' tables directly, and these will usually only recognize
            // the ancient form (silently skipping the unrecognized names).
            var macPlatform = 1;  // Macintosh
            var macLanguage = macLanguageIds[lang];
            var macScript = macLanguageToScript[macLanguage];
            var macEncoding = getEncoding(macPlatform, macScript, macLanguage);
            var macName = encode.MACSTRING(text, macEncoding);
            if (macName === undefined) {
                macPlatform = 0;  // Unicode
                macLanguage = ltag.indexOf(lang);
                if (macLanguage < 0) {
                    macLanguage = ltag.length;
                    ltag.push(lang);
                }

                macScript = 4;  // Unicode 2.0 and later
                macName = encode.UTF16(text);
            }

            var macNameOffset = addStringToPool(macName, stringPool);
            nameRecords.push(makeNameRecord(macPlatform, macScript, macLanguage,
                                            nameID, macName.length, macNameOffset));

            var winLanguage = windowsLanguageIds[lang];
            if (winLanguage !== undefined) {
                var winName = encode.UTF16(text);
                var winNameOffset = addStringToPool(winName, stringPool);
                nameRecords.push(makeNameRecord(3, 1, winLanguage,
                                                nameID, winName.length, winNameOffset));
            }
        }
    }

    nameRecords.sort(function(a, b) {
        return ((a.platformID - b.platformID) ||
                (a.encodingID - b.encodingID) ||
                (a.languageID - b.languageID) ||
                (a.nameID - b.nameID));
    });

    var t = new table.Table('name', [
        {name: 'format', type: 'USHORT', value: 0},
        {name: 'count', type: 'USHORT', value: nameRecords.length},
        {name: 'stringOffset', type: 'USHORT', value: 6 + nameRecords.length * 12}
    ]);

    for (var r = 0; r < nameRecords.length; r++) {
        t.fields.push({name: 'record_' + r, type: 'RECORD', value: nameRecords[r]});
    }

    t.fields.push({name: 'strings', type: 'LITERAL', value: stringPool});
    return t;
}

var _name = { parse: parseNameTable, make: makeNameTable };

// The `OS/2` table contains metrics required in OpenType fonts.

var unicodeRanges = [
    {begin: 0x0000, end: 0x007F}, // Basic Latin
    {begin: 0x0080, end: 0x00FF}, // Latin-1 Supplement
    {begin: 0x0100, end: 0x017F}, // Latin Extended-A
    {begin: 0x0180, end: 0x024F}, // Latin Extended-B
    {begin: 0x0250, end: 0x02AF}, // IPA Extensions
    {begin: 0x02B0, end: 0x02FF}, // Spacing Modifier Letters
    {begin: 0x0300, end: 0x036F}, // Combining Diacritical Marks
    {begin: 0x0370, end: 0x03FF}, // Greek and Coptic
    {begin: 0x2C80, end: 0x2CFF}, // Coptic
    {begin: 0x0400, end: 0x04FF}, // Cyrillic
    {begin: 0x0530, end: 0x058F}, // Armenian
    {begin: 0x0590, end: 0x05FF}, // Hebrew
    {begin: 0xA500, end: 0xA63F}, // Vai
    {begin: 0x0600, end: 0x06FF}, // Arabic
    {begin: 0x07C0, end: 0x07FF}, // NKo
    {begin: 0x0900, end: 0x097F}, // Devanagari
    {begin: 0x0980, end: 0x09FF}, // Bengali
    {begin: 0x0A00, end: 0x0A7F}, // Gurmukhi
    {begin: 0x0A80, end: 0x0AFF}, // Gujarati
    {begin: 0x0B00, end: 0x0B7F}, // Oriya
    {begin: 0x0B80, end: 0x0BFF}, // Tamil
    {begin: 0x0C00, end: 0x0C7F}, // Telugu
    {begin: 0x0C80, end: 0x0CFF}, // Kannada
    {begin: 0x0D00, end: 0x0D7F}, // Malayalam
    {begin: 0x0E00, end: 0x0E7F}, // Thai
    {begin: 0x0E80, end: 0x0EFF}, // Lao
    {begin: 0x10A0, end: 0x10FF}, // Georgian
    {begin: 0x1B00, end: 0x1B7F}, // Balinese
    {begin: 0x1100, end: 0x11FF}, // Hangul Jamo
    {begin: 0x1E00, end: 0x1EFF}, // Latin Extended Additional
    {begin: 0x1F00, end: 0x1FFF}, // Greek Extended
    {begin: 0x2000, end: 0x206F}, // General Punctuation
    {begin: 0x2070, end: 0x209F}, // Superscripts And Subscripts
    {begin: 0x20A0, end: 0x20CF}, // Currency Symbol
    {begin: 0x20D0, end: 0x20FF}, // Combining Diacritical Marks For Symbols
    {begin: 0x2100, end: 0x214F}, // Letterlike Symbols
    {begin: 0x2150, end: 0x218F}, // Number Forms
    {begin: 0x2190, end: 0x21FF}, // Arrows
    {begin: 0x2200, end: 0x22FF}, // Mathematical Operators
    {begin: 0x2300, end: 0x23FF}, // Miscellaneous Technical
    {begin: 0x2400, end: 0x243F}, // Control Pictures
    {begin: 0x2440, end: 0x245F}, // Optical Character Recognition
    {begin: 0x2460, end: 0x24FF}, // Enclosed Alphanumerics
    {begin: 0x2500, end: 0x257F}, // Box Drawing
    {begin: 0x2580, end: 0x259F}, // Block Elements
    {begin: 0x25A0, end: 0x25FF}, // Geometric Shapes
    {begin: 0x2600, end: 0x26FF}, // Miscellaneous Symbols
    {begin: 0x2700, end: 0x27BF}, // Dingbats
    {begin: 0x3000, end: 0x303F}, // CJK Symbols And Punctuation
    {begin: 0x3040, end: 0x309F}, // Hiragana
    {begin: 0x30A0, end: 0x30FF}, // Katakana
    {begin: 0x3100, end: 0x312F}, // Bopomofo
    {begin: 0x3130, end: 0x318F}, // Hangul Compatibility Jamo
    {begin: 0xA840, end: 0xA87F}, // Phags-pa
    {begin: 0x3200, end: 0x32FF}, // Enclosed CJK Letters And Months
    {begin: 0x3300, end: 0x33FF}, // CJK Compatibility
    {begin: 0xAC00, end: 0xD7AF}, // Hangul Syllables
    {begin: 0xD800, end: 0xDFFF}, // Non-Plane 0 *
    {begin: 0x10900, end: 0x1091F}, // Phoenicia
    {begin: 0x4E00, end: 0x9FFF}, // CJK Unified Ideographs
    {begin: 0xE000, end: 0xF8FF}, // Private Use Area (plane 0)
    {begin: 0x31C0, end: 0x31EF}, // CJK Strokes
    {begin: 0xFB00, end: 0xFB4F}, // Alphabetic Presentation Forms
    {begin: 0xFB50, end: 0xFDFF}, // Arabic Presentation Forms-A
    {begin: 0xFE20, end: 0xFE2F}, // Combining Half Marks
    {begin: 0xFE10, end: 0xFE1F}, // Vertical Forms
    {begin: 0xFE50, end: 0xFE6F}, // Small Form Variants
    {begin: 0xFE70, end: 0xFEFF}, // Arabic Presentation Forms-B
    {begin: 0xFF00, end: 0xFFEF}, // Halfwidth And Fullwidth Forms
    {begin: 0xFFF0, end: 0xFFFF}, // Specials
    {begin: 0x0F00, end: 0x0FFF}, // Tibetan
    {begin: 0x0700, end: 0x074F}, // Syriac
    {begin: 0x0780, end: 0x07BF}, // Thaana
    {begin: 0x0D80, end: 0x0DFF}, // Sinhala
    {begin: 0x1000, end: 0x109F}, // Myanmar
    {begin: 0x1200, end: 0x137F}, // Ethiopic
    {begin: 0x13A0, end: 0x13FF}, // Cherokee
    {begin: 0x1400, end: 0x167F}, // Unified Canadian Aboriginal Syllabics
    {begin: 0x1680, end: 0x169F}, // Ogham
    {begin: 0x16A0, end: 0x16FF}, // Runic
    {begin: 0x1780, end: 0x17FF}, // Khmer
    {begin: 0x1800, end: 0x18AF}, // Mongolian
    {begin: 0x2800, end: 0x28FF}, // Braille Patterns
    {begin: 0xA000, end: 0xA48F}, // Yi Syllables
    {begin: 0x1700, end: 0x171F}, // Tagalog
    {begin: 0x10300, end: 0x1032F}, // Old Italic
    {begin: 0x10330, end: 0x1034F}, // Gothic
    {begin: 0x10400, end: 0x1044F}, // Deseret
    {begin: 0x1D000, end: 0x1D0FF}, // Byzantine Musical Symbols
    {begin: 0x1D400, end: 0x1D7FF}, // Mathematical Alphanumeric Symbols
    {begin: 0xFF000, end: 0xFFFFD}, // Private Use (plane 15)
    {begin: 0xFE00, end: 0xFE0F}, // Variation Selectors
    {begin: 0xE0000, end: 0xE007F}, // Tags
    {begin: 0x1900, end: 0x194F}, // Limbu
    {begin: 0x1950, end: 0x197F}, // Tai Le
    {begin: 0x1980, end: 0x19DF}, // New Tai Lue
    {begin: 0x1A00, end: 0x1A1F}, // Buginese
    {begin: 0x2C00, end: 0x2C5F}, // Glagolitic
    {begin: 0x2D30, end: 0x2D7F}, // Tifinagh
    {begin: 0x4DC0, end: 0x4DFF}, // Yijing Hexagram Symbols
    {begin: 0xA800, end: 0xA82F}, // Syloti Nagri
    {begin: 0x10000, end: 0x1007F}, // Linear B Syllabary
    {begin: 0x10140, end: 0x1018F}, // Ancient Greek Numbers
    {begin: 0x10380, end: 0x1039F}, // Ugaritic
    {begin: 0x103A0, end: 0x103DF}, // Old Persian
    {begin: 0x10450, end: 0x1047F}, // Shavian
    {begin: 0x10480, end: 0x104AF}, // Osmanya
    {begin: 0x10800, end: 0x1083F}, // Cypriot Syllabary
    {begin: 0x10A00, end: 0x10A5F}, // Kharoshthi
    {begin: 0x1D300, end: 0x1D35F}, // Tai Xuan Jing Symbols
    {begin: 0x12000, end: 0x123FF}, // Cuneiform
    {begin: 0x1D360, end: 0x1D37F}, // Counting Rod Numerals
    {begin: 0x1B80, end: 0x1BBF}, // Sundanese
    {begin: 0x1C00, end: 0x1C4F}, // Lepcha
    {begin: 0x1C50, end: 0x1C7F}, // Ol Chiki
    {begin: 0xA880, end: 0xA8DF}, // Saurashtra
    {begin: 0xA900, end: 0xA92F}, // Kayah Li
    {begin: 0xA930, end: 0xA95F}, // Rejang
    {begin: 0xAA00, end: 0xAA5F}, // Cham
    {begin: 0x10190, end: 0x101CF}, // Ancient Symbols
    {begin: 0x101D0, end: 0x101FF}, // Phaistos Disc
    {begin: 0x102A0, end: 0x102DF}, // Carian
    {begin: 0x1F030, end: 0x1F09F}  // Domino Tiles
];

function getUnicodeRange(unicode) {
    for (var i = 0; i < unicodeRanges.length; i += 1) {
        var range = unicodeRanges[i];
        if (unicode >= range.begin && unicode < range.end) {
            return i;
        }
    }

    return -1;
}

// Parse the OS/2 and Windows metrics `OS/2` table
function parseOS2Table(data, start) {
    var os2 = {};
    var p = new parse.Parser(data, start);
    os2.version = p.parseUShort();
    os2.xAvgCharWidth = p.parseShort();
    os2.usWeightClass = p.parseUShort();
    os2.usWidthClass = p.parseUShort();
    os2.fsType = p.parseUShort();
    os2.ySubscriptXSize = p.parseShort();
    os2.ySubscriptYSize = p.parseShort();
    os2.ySubscriptXOffset = p.parseShort();
    os2.ySubscriptYOffset = p.parseShort();
    os2.ySuperscriptXSize = p.parseShort();
    os2.ySuperscriptYSize = p.parseShort();
    os2.ySuperscriptXOffset = p.parseShort();
    os2.ySuperscriptYOffset = p.parseShort();
    os2.yStrikeoutSize = p.parseShort();
    os2.yStrikeoutPosition = p.parseShort();
    os2.sFamilyClass = p.parseShort();
    os2.panose = [];
    for (var i = 0; i < 10; i++) {
        os2.panose[i] = p.parseByte();
    }

    os2.ulUnicodeRange1 = p.parseULong();
    os2.ulUnicodeRange2 = p.parseULong();
    os2.ulUnicodeRange3 = p.parseULong();
    os2.ulUnicodeRange4 = p.parseULong();
    os2.achVendID = String.fromCharCode(p.parseByte(), p.parseByte(), p.parseByte(), p.parseByte());
    os2.fsSelection = p.parseUShort();
    os2.usFirstCharIndex = p.parseUShort();
    os2.usLastCharIndex = p.parseUShort();
    os2.sTypoAscender = p.parseShort();
    os2.sTypoDescender = p.parseShort();
    os2.sTypoLineGap = p.parseShort();
    os2.usWinAscent = p.parseUShort();
    os2.usWinDescent = p.parseUShort();
    if (os2.version >= 1) {
        os2.ulCodePageRange1 = p.parseULong();
        os2.ulCodePageRange2 = p.parseULong();
    }

    if (os2.version >= 2) {
        os2.sxHeight = p.parseShort();
        os2.sCapHeight = p.parseShort();
        os2.usDefaultChar = p.parseUShort();
        os2.usBreakChar = p.parseUShort();
        os2.usMaxContent = p.parseUShort();
    }

    return os2;
}

function makeOS2Table(options) {
    return new table.Table('OS/2', [
        {name: 'version', type: 'USHORT', value: 0x0003},
        {name: 'xAvgCharWidth', type: 'SHORT', value: 0},
        {name: 'usWeightClass', type: 'USHORT', value: 0},
        {name: 'usWidthClass', type: 'USHORT', value: 0},
        {name: 'fsType', type: 'USHORT', value: 0},
        {name: 'ySubscriptXSize', type: 'SHORT', value: 650},
        {name: 'ySubscriptYSize', type: 'SHORT', value: 699},
        {name: 'ySubscriptXOffset', type: 'SHORT', value: 0},
        {name: 'ySubscriptYOffset', type: 'SHORT', value: 140},
        {name: 'ySuperscriptXSize', type: 'SHORT', value: 650},
        {name: 'ySuperscriptYSize', type: 'SHORT', value: 699},
        {name: 'ySuperscriptXOffset', type: 'SHORT', value: 0},
        {name: 'ySuperscriptYOffset', type: 'SHORT', value: 479},
        {name: 'yStrikeoutSize', type: 'SHORT', value: 49},
        {name: 'yStrikeoutPosition', type: 'SHORT', value: 258},
        {name: 'sFamilyClass', type: 'SHORT', value: 0},
        {name: 'bFamilyType', type: 'BYTE', value: 0},
        {name: 'bSerifStyle', type: 'BYTE', value: 0},
        {name: 'bWeight', type: 'BYTE', value: 0},
        {name: 'bProportion', type: 'BYTE', value: 0},
        {name: 'bContrast', type: 'BYTE', value: 0},
        {name: 'bStrokeVariation', type: 'BYTE', value: 0},
        {name: 'bArmStyle', type: 'BYTE', value: 0},
        {name: 'bLetterform', type: 'BYTE', value: 0},
        {name: 'bMidline', type: 'BYTE', value: 0},
        {name: 'bXHeight', type: 'BYTE', value: 0},
        {name: 'ulUnicodeRange1', type: 'ULONG', value: 0},
        {name: 'ulUnicodeRange2', type: 'ULONG', value: 0},
        {name: 'ulUnicodeRange3', type: 'ULONG', value: 0},
        {name: 'ulUnicodeRange4', type: 'ULONG', value: 0},
        {name: 'achVendID', type: 'CHARARRAY', value: 'XXXX'},
        {name: 'fsSelection', type: 'USHORT', value: 0},
        {name: 'usFirstCharIndex', type: 'USHORT', value: 0},
        {name: 'usLastCharIndex', type: 'USHORT', value: 0},
        {name: 'sTypoAscender', type: 'SHORT', value: 0},
        {name: 'sTypoDescender', type: 'SHORT', value: 0},
        {name: 'sTypoLineGap', type: 'SHORT', value: 0},
        {name: 'usWinAscent', type: 'USHORT', value: 0},
        {name: 'usWinDescent', type: 'USHORT', value: 0},
        {name: 'ulCodePageRange1', type: 'ULONG', value: 0},
        {name: 'ulCodePageRange2', type: 'ULONG', value: 0},
        {name: 'sxHeight', type: 'SHORT', value: 0},
        {name: 'sCapHeight', type: 'SHORT', value: 0},
        {name: 'usDefaultChar', type: 'USHORT', value: 0},
        {name: 'usBreakChar', type: 'USHORT', value: 0},
        {name: 'usMaxContext', type: 'USHORT', value: 0}
    ], options);
}

var os2 = { parse: parseOS2Table, make: makeOS2Table, unicodeRanges: unicodeRanges, getUnicodeRange: getUnicodeRange };

// The `post` table stores additional PostScript information, such as glyph names.

// Parse the PostScript `post` table
function parsePostTable(data, start) {
    var post = {};
    var p = new parse.Parser(data, start);
    post.version = p.parseVersion();
    post.italicAngle = p.parseFixed();
    post.underlinePosition = p.parseShort();
    post.underlineThickness = p.parseShort();
    post.isFixedPitch = p.parseULong();
    post.minMemType42 = p.parseULong();
    post.maxMemType42 = p.parseULong();
    post.minMemType1 = p.parseULong();
    post.maxMemType1 = p.parseULong();
    switch (post.version) {
        case 1:
            post.names = standardNames.slice();
            break;
        case 2:
            post.numberOfGlyphs = p.parseUShort();
            post.glyphNameIndex = new Array(post.numberOfGlyphs);
            for (var i = 0; i < post.numberOfGlyphs; i++) {
                post.glyphNameIndex[i] = p.parseUShort();
            }

            post.names = [];
            for (var i$1 = 0; i$1 < post.numberOfGlyphs; i$1++) {
                if (post.glyphNameIndex[i$1] >= standardNames.length) {
                    var nameLength = p.parseChar();
                    post.names.push(p.parseString(nameLength));
                }
            }

            break;
        case 2.5:
            post.numberOfGlyphs = p.parseUShort();
            post.offset = new Array(post.numberOfGlyphs);
            for (var i$2 = 0; i$2 < post.numberOfGlyphs; i$2++) {
                post.offset[i$2] = p.parseChar();
            }

            break;
    }
    return post;
}

function makePostTable() {
    return new table.Table('post', [
        {name: 'version', type: 'FIXED', value: 0x00030000},
        {name: 'italicAngle', type: 'FIXED', value: 0},
        {name: 'underlinePosition', type: 'FWORD', value: 0},
        {name: 'underlineThickness', type: 'FWORD', value: 0},
        {name: 'isFixedPitch', type: 'ULONG', value: 0},
        {name: 'minMemType42', type: 'ULONG', value: 0},
        {name: 'maxMemType42', type: 'ULONG', value: 0},
        {name: 'minMemType1', type: 'ULONG', value: 0},
        {name: 'maxMemType1', type: 'ULONG', value: 0}
    ]);
}

var post = { parse: parsePostTable, make: makePostTable };

// The `GSUB` table contains ligatures, among other things.

var subtableParsers = new Array(9);         // subtableParsers[0] is unused

// https://www.microsoft.com/typography/OTSPEC/GSUB.htm#SS
subtableParsers[1] = function parseLookup1() {
    var start = this.offset + this.relativeOffset;
    var substFormat = this.parseUShort();
    if (substFormat === 1) {
        return {
            substFormat: 1,
            coverage: this.parsePointer(Parser.coverage),
            deltaGlyphId: this.parseUShort()
        };
    } else if (substFormat === 2) {
        return {
            substFormat: 2,
            coverage: this.parsePointer(Parser.coverage),
            substitute: this.parseOffset16List()
        };
    }
    check.assert(false, '0x' + start.toString(16) + ': lookup type 1 format must be 1 or 2.');
};

// https://www.microsoft.com/typography/OTSPEC/GSUB.htm#MS
subtableParsers[2] = function parseLookup2() {
    var substFormat = this.parseUShort();
    check.argument(substFormat === 1, 'GSUB Multiple Substitution Subtable identifier-format must be 1');
    return {
        substFormat: substFormat,
        coverage: this.parsePointer(Parser.coverage),
        sequences: this.parseListOfLists()
    };
};

// https://www.microsoft.com/typography/OTSPEC/GSUB.htm#AS
subtableParsers[3] = function parseLookup3() {
    var substFormat = this.parseUShort();
    check.argument(substFormat === 1, 'GSUB Alternate Substitution Subtable identifier-format must be 1');
    return {
        substFormat: substFormat,
        coverage: this.parsePointer(Parser.coverage),
        alternateSets: this.parseListOfLists()
    };
};

// https://www.microsoft.com/typography/OTSPEC/GSUB.htm#LS
subtableParsers[4] = function parseLookup4() {
    var substFormat = this.parseUShort();
    check.argument(substFormat === 1, 'GSUB ligature table identifier-format must be 1');
    return {
        substFormat: substFormat,
        coverage: this.parsePointer(Parser.coverage),
        ligatureSets: this.parseListOfLists(function() {
            return {
                ligGlyph: this.parseUShort(),
                components: this.parseUShortList(this.parseUShort() - 1)
            };
        })
    };
};

var lookupRecordDesc = {
    sequenceIndex: Parser.uShort,
    lookupListIndex: Parser.uShort
};

// https://www.microsoft.com/typography/OTSPEC/GSUB.htm#CSF
subtableParsers[5] = function parseLookup5() {
    var start = this.offset + this.relativeOffset;
    var substFormat = this.parseUShort();

    if (substFormat === 1) {
        return {
            substFormat: substFormat,
            coverage: this.parsePointer(Parser.coverage),
            ruleSets: this.parseListOfLists(function() {
                var glyphCount = this.parseUShort();
                var substCount = this.parseUShort();
                return {
                    input: this.parseUShortList(glyphCount - 1),
                    lookupRecords: this.parseRecordList(substCount, lookupRecordDesc)
                };
            })
        };
    } else if (substFormat === 2) {
        return {
            substFormat: substFormat,
            coverage: this.parsePointer(Parser.coverage),
            classDef: this.parsePointer(Parser.classDef),
            classSets: this.parseListOfLists(function() {
                var glyphCount = this.parseUShort();
                var substCount = this.parseUShort();
                return {
                    classes: this.parseUShortList(glyphCount - 1),
                    lookupRecords: this.parseRecordList(substCount, lookupRecordDesc)
                };
            })
        };
    } else if (substFormat === 3) {
        var glyphCount = this.parseUShort();
        var substCount = this.parseUShort();
        return {
            substFormat: substFormat,
            coverages: this.parseList(glyphCount, Parser.pointer(Parser.coverage)),
            lookupRecords: this.parseRecordList(substCount, lookupRecordDesc)
        };
    }
    check.assert(false, '0x' + start.toString(16) + ': lookup type 5 format must be 1, 2 or 3.');
};

// https://www.microsoft.com/typography/OTSPEC/GSUB.htm#CC
subtableParsers[6] = function parseLookup6() {
    var start = this.offset + this.relativeOffset;
    var substFormat = this.parseUShort();
    if (substFormat === 1) {
        return {
            substFormat: 1,
            coverage: this.parsePointer(Parser.coverage),
            chainRuleSets: this.parseListOfLists(function() {
                return {
                    backtrack: this.parseUShortList(),
                    input: this.parseUShortList(this.parseShort() - 1),
                    lookahead: this.parseUShortList(),
                    lookupRecords: this.parseRecordList(lookupRecordDesc)
                };
            })
        };
    } else if (substFormat === 2) {
        return {
            substFormat: 2,
            coverage: this.parsePointer(Parser.coverage),
            backtrackClassDef: this.parsePointer(Parser.classDef),
            inputClassDef: this.parsePointer(Parser.classDef),
            lookaheadClassDef: this.parsePointer(Parser.classDef),
            chainClassSet: this.parseListOfLists(function() {
                return {
                    backtrack: this.parseUShortList(),
                    input: this.parseUShortList(this.parseShort() - 1),
                    lookahead: this.parseUShortList(),
                    lookupRecords: this.parseRecordList(lookupRecordDesc)
                };
            })
        };
    } else if (substFormat === 3) {
        return {
            substFormat: 3,
            backtrackCoverage: this.parseList(Parser.pointer(Parser.coverage)),
            inputCoverage: this.parseList(Parser.pointer(Parser.coverage)),
            lookaheadCoverage: this.parseList(Parser.pointer(Parser.coverage)),
            lookupRecords: this.parseRecordList(lookupRecordDesc)
        };
    }
    check.assert(false, '0x' + start.toString(16) + ': lookup type 6 format must be 1, 2 or 3.');
};

// https://www.microsoft.com/typography/OTSPEC/GSUB.htm#ES
subtableParsers[7] = function parseLookup7() {
    // Extension Substitution subtable
    var substFormat = this.parseUShort();
    check.argument(substFormat === 1, 'GSUB Extension Substitution subtable identifier-format must be 1');
    var extensionLookupType = this.parseUShort();
    var extensionParser = new Parser(this.data, this.offset + this.parseULong());
    return {
        substFormat: 1,
        lookupType: extensionLookupType,
        extension: subtableParsers[extensionLookupType].call(extensionParser)
    };
};

// https://www.microsoft.com/typography/OTSPEC/GSUB.htm#RCCS
subtableParsers[8] = function parseLookup8() {
    var substFormat = this.parseUShort();
    check.argument(substFormat === 1, 'GSUB Reverse Chaining Contextual Single Substitution Subtable identifier-format must be 1');
    return {
        substFormat: substFormat,
        coverage: this.parsePointer(Parser.coverage),
        backtrackCoverage: this.parseList(Parser.pointer(Parser.coverage)),
        lookaheadCoverage: this.parseList(Parser.pointer(Parser.coverage)),
        substitutes: this.parseUShortList()
    };
};

// https://www.microsoft.com/typography/OTSPEC/gsub.htm
function parseGsubTable(data, start) {
    start = start || 0;
    var p = new Parser(data, start);
    var tableVersion = p.parseVersion(1);
    check.argument(tableVersion === 1 || tableVersion === 1.1, 'Unsupported GSUB table version.');
    if (tableVersion === 1) {
        return {
            version: tableVersion,
            scripts: p.parseScriptList(),
            features: p.parseFeatureList(),
            lookups: p.parseLookupList(subtableParsers)
        };
    } else {
        return {
            version: tableVersion,
            scripts: p.parseScriptList(),
            features: p.parseFeatureList(),
            lookups: p.parseLookupList(subtableParsers),
            variations: p.parseFeatureVariationsList()
        };
    }

}

// GSUB Writing //////////////////////////////////////////////
var subtableMakers = new Array(9);

subtableMakers[1] = function makeLookup1(subtable) {
    if (subtable.substFormat === 1) {
        return new table.Table('substitutionTable', [
            {name: 'substFormat', type: 'USHORT', value: 1},
            {name: 'coverage', type: 'TABLE', value: new table.Coverage(subtable.coverage)},
            {name: 'deltaGlyphID', type: 'USHORT', value: subtable.deltaGlyphId}
        ]);
    } else {
        return new table.Table('substitutionTable', [
            {name: 'substFormat', type: 'USHORT', value: 2},
            {name: 'coverage', type: 'TABLE', value: new table.Coverage(subtable.coverage)}
        ].concat(table.ushortList('substitute', subtable.substitute)));
    }
};

subtableMakers[2] = function makeLookup2(subtable) {
    check.assert(subtable.substFormat === 1, 'Lookup type 2 substFormat must be 1.');
    return new table.Table('substitutionTable', [
        {name: 'substFormat', type: 'USHORT', value: 1},
        {name: 'coverage', type: 'TABLE', value: new table.Coverage(subtable.coverage)}
    ].concat(table.tableList('seqSet', subtable.sequences, function(sequenceSet) {
        return new table.Table('sequenceSetTable', table.ushortList('sequence', sequenceSet));
    })));
};

subtableMakers[3] = function makeLookup3(subtable) {
    check.assert(subtable.substFormat === 1, 'Lookup type 3 substFormat must be 1.');
    return new table.Table('substitutionTable', [
        {name: 'substFormat', type: 'USHORT', value: 1},
        {name: 'coverage', type: 'TABLE', value: new table.Coverage(subtable.coverage)}
    ].concat(table.tableList('altSet', subtable.alternateSets, function(alternateSet) {
        return new table.Table('alternateSetTable', table.ushortList('alternate', alternateSet));
    })));
};

subtableMakers[4] = function makeLookup4(subtable) {
    check.assert(subtable.substFormat === 1, 'Lookup type 4 substFormat must be 1.');
    return new table.Table('substitutionTable', [
        {name: 'substFormat', type: 'USHORT', value: 1},
        {name: 'coverage', type: 'TABLE', value: new table.Coverage(subtable.coverage)}
    ].concat(table.tableList('ligSet', subtable.ligatureSets, function(ligatureSet) {
        return new table.Table('ligatureSetTable', table.tableList('ligature', ligatureSet, function(ligature) {
            return new table.Table('ligatureTable',
                [{name: 'ligGlyph', type: 'USHORT', value: ligature.ligGlyph}]
                .concat(table.ushortList('component', ligature.components, ligature.components.length + 1))
            );
        }));
    })));
};

subtableMakers[6] = function makeLookup6(subtable) {
    if (subtable.substFormat === 1) {
        var returnTable = new table.Table('chainContextTable', [
            {name: 'substFormat', type: 'USHORT', value: subtable.substFormat},
            {name: 'coverage', type: 'TABLE', value: new table.Coverage(subtable.coverage)}
        ].concat(table.tableList('chainRuleSet', subtable.chainRuleSets, function(chainRuleSet) {
            return new table.Table('chainRuleSetTable', table.tableList('chainRule', chainRuleSet, function(chainRule) {
                var tableData = table.ushortList('backtrackGlyph', chainRule.backtrack, chainRule.backtrack.length)
                    .concat(table.ushortList('inputGlyph', chainRule.input, chainRule.input.length + 1))
                    .concat(table.ushortList('lookaheadGlyph', chainRule.lookahead, chainRule.lookahead.length))
                    .concat(table.ushortList('substitution', [], chainRule.lookupRecords.length));

                chainRule.lookupRecords.forEach(function (record, i) {
                    tableData = tableData
                        .concat({name: 'sequenceIndex' + i, type: 'USHORT', value: record.sequenceIndex})
                        .concat({name: 'lookupListIndex' + i, type: 'USHORT', value: record.lookupListIndex});
                });
                return new table.Table('chainRuleTable', tableData);
            }));
        })));
        return returnTable;
    } else if (subtable.substFormat === 2) {
        check.assert(false, 'lookup type 6 format 2 is not yet supported.');
    } else if (subtable.substFormat === 3) {
        var tableData = [
            {name: 'substFormat', type: 'USHORT', value: subtable.substFormat} ];

        tableData.push({name: 'backtrackGlyphCount', type: 'USHORT', value: subtable.backtrackCoverage.length});
        subtable.backtrackCoverage.forEach(function (coverage, i) {
            tableData.push({name: 'backtrackCoverage' + i, type: 'TABLE', value: new table.Coverage(coverage)});
        });
        tableData.push({name: 'inputGlyphCount', type: 'USHORT', value: subtable.inputCoverage.length});
        subtable.inputCoverage.forEach(function (coverage, i) {
            tableData.push({name: 'inputCoverage' + i, type: 'TABLE', value: new table.Coverage(coverage)});
        });
        tableData.push({name: 'lookaheadGlyphCount', type: 'USHORT', value: subtable.lookaheadCoverage.length});
        subtable.lookaheadCoverage.forEach(function (coverage, i) {
            tableData.push({name: 'lookaheadCoverage' + i, type: 'TABLE', value: new table.Coverage(coverage)});
        });

        tableData.push({name: 'substitutionCount', type: 'USHORT', value: subtable.lookupRecords.length});
        subtable.lookupRecords.forEach(function (record, i) {
            tableData = tableData
                .concat({name: 'sequenceIndex' + i, type: 'USHORT', value: record.sequenceIndex})
                .concat({name: 'lookupListIndex' + i, type: 'USHORT', value: record.lookupListIndex});
        });

        var returnTable$1 = new table.Table('chainContextTable', tableData);

        return returnTable$1;
    }

    check.assert(false, 'lookup type 6 format must be 1, 2 or 3.');
};

function makeGsubTable(gsub) {
    return new table.Table('GSUB', [
        {name: 'version', type: 'ULONG', value: 0x10000},
        {name: 'scripts', type: 'TABLE', value: new table.ScriptList(gsub.scripts)},
        {name: 'features', type: 'TABLE', value: new table.FeatureList(gsub.features)},
        {name: 'lookups', type: 'TABLE', value: new table.LookupList(gsub.lookups, subtableMakers)}
    ]);
}

var gsub = { parse: parseGsubTable, make: makeGsubTable };

// The `GPOS` table contains kerning pairs, among other things.

// Parse the metadata `meta` table.
// https://developer.apple.com/fonts/TrueType-Reference-Manual/RM06/Chap6meta.html
function parseMetaTable(data, start) {
    var p = new parse.Parser(data, start);
    var tableVersion = p.parseULong();
    check.argument(tableVersion === 1, 'Unsupported META table version.');
    p.parseULong(); // flags - currently unused and set to 0
    p.parseULong(); // tableOffset
    var numDataMaps = p.parseULong();

    var tags = {};
    for (var i = 0; i < numDataMaps; i++) {
        var tag = p.parseTag();
        var dataOffset = p.parseULong();
        var dataLength = p.parseULong();
        var text = decode.UTF8(data, start + dataOffset, dataLength);

        tags[tag] = text;
    }
    return tags;
}

function makeMetaTable(tags) {
    var numTags = Object.keys(tags).length;
    var stringPool = '';
    var stringPoolOffset = 16 + numTags * 12;

    var result = new table.Table('meta', [
        {name: 'version', type: 'ULONG', value: 1},
        {name: 'flags', type: 'ULONG', value: 0},
        {name: 'offset', type: 'ULONG', value: stringPoolOffset},
        {name: 'numTags', type: 'ULONG', value: numTags}
    ]);

    for (var tag in tags) {
        var pos = stringPool.length;
        stringPool += tags[tag];

        result.fields.push({name: 'tag ' + tag, type: 'TAG', value: tag});
        result.fields.push({name: 'offset ' + tag, type: 'ULONG', value: stringPoolOffset + pos});
        result.fields.push({name: 'length ' + tag, type: 'ULONG', value: tags[tag].length});
    }

    result.fields.push({name: 'stringPool', type: 'CHARARRAY', value: stringPool});

    return result;
}

var meta = { parse: parseMetaTable, make: makeMetaTable };

// The `sfnt` wrapper provides organization for the tables in the font.

function log2(v) {
    return Math.log(v) / Math.log(2) | 0;
}

function computeCheckSum(bytes) {
    while (bytes.length % 4 !== 0) {
        bytes.push(0);
    }

    var sum = 0;
    for (var i = 0; i < bytes.length; i += 4) {
        sum += (bytes[i] << 24) +
            (bytes[i + 1] << 16) +
            (bytes[i + 2] << 8) +
            (bytes[i + 3]);
    }

    sum %= Math.pow(2, 32);
    return sum;
}

function makeTableRecord(tag, checkSum, offset, length) {
    return new table.Record('Table Record', [
        {name: 'tag', type: 'TAG', value: tag !== undefined ? tag : ''},
        {name: 'checkSum', type: 'ULONG', value: checkSum !== undefined ? checkSum : 0},
        {name: 'offset', type: 'ULONG', value: offset !== undefined ? offset : 0},
        {name: 'length', type: 'ULONG', value: length !== undefined ? length : 0}
    ]);
}

function makeSfntTable(tables) {
    var sfnt = new table.Table('sfnt', [
        {name: 'version', type: 'TAG', value: 'OTTO'},
        {name: 'numTables', type: 'USHORT', value: 0},
        {name: 'searchRange', type: 'USHORT', value: 0},
        {name: 'entrySelector', type: 'USHORT', value: 0},
        {name: 'rangeShift', type: 'USHORT', value: 0}
    ]);
    sfnt.tables = tables;
    sfnt.numTables = tables.length;
    var highestPowerOf2 = Math.pow(2, log2(sfnt.numTables));
    sfnt.searchRange = 16 * highestPowerOf2;
    sfnt.entrySelector = log2(highestPowerOf2);
    sfnt.rangeShift = sfnt.numTables * 16 - sfnt.searchRange;

    var recordFields = [];
    var tableFields = [];

    var offset = sfnt.sizeOf() + (makeTableRecord().sizeOf() * sfnt.numTables);
    while (offset % 4 !== 0) {
        offset += 1;
        tableFields.push({name: 'padding', type: 'BYTE', value: 0});
    }

    for (var i = 0; i < tables.length; i += 1) {
        var t = tables[i];
        check.argument(t.tableName.length === 4, 'Table name' + t.tableName + ' is invalid.');
        var tableLength = t.sizeOf();
        var tableRecord = makeTableRecord(t.tableName, computeCheckSum(t.encode()), offset, tableLength);
        recordFields.push({name: tableRecord.tag + ' Table Record', type: 'RECORD', value: tableRecord});
        tableFields.push({name: t.tableName + ' table', type: 'RECORD', value: t});
        offset += tableLength;
        check.argument(!isNaN(offset), 'Something went wrong calculating the offset.');
        while (offset % 4 !== 0) {
            offset += 1;
            tableFields.push({name: 'padding', type: 'BYTE', value: 0});
        }
    }

    // Table records need to be sorted alphabetically.
    recordFields.sort(function(r1, r2) {
        if (r1.value.tag > r2.value.tag) {
            return 1;
        } else {
            return -1;
        }
    });

    sfnt.fields = sfnt.fields.concat(recordFields);
    sfnt.fields = sfnt.fields.concat(tableFields);
    return sfnt;
}

// Get the metrics for a character. If the string has more than one character
// this function returns metrics for the first available character.
// You can provide optional fallback metrics if no characters are available.
function metricsForChar(font, chars, notFoundMetrics) {
    for (var i = 0; i < chars.length; i += 1) {
        var glyphIndex = font.charToGlyphIndex(chars[i]);
        if (glyphIndex > 0) {
            var glyph = font.glyphs.get(glyphIndex);
            return glyph.getMetrics();
        }
    }

    return notFoundMetrics;
}

function average(vs) {
    var sum = 0;
    for (var i = 0; i < vs.length; i += 1) {
        sum += vs[i];
    }

    return sum / vs.length;
}

// Convert the font object to a SFNT data structure.
// This structure contains all the necessary tables and metadata to create a binary OTF file.
function fontToSfntTable(font) {
    var xMins = [];
    var yMins = [];
    var xMaxs = [];
    var yMaxs = [];
    var advanceWidths = [];
    var leftSideBearings = [];
    var rightSideBearings = [];
    var firstCharIndex;
    var lastCharIndex = 0;
    var ulUnicodeRange1 = 0;
    var ulUnicodeRange2 = 0;
    var ulUnicodeRange3 = 0;
    var ulUnicodeRange4 = 0;

    for (var i = 0; i < font.glyphs.length; i += 1) {
        var glyph = font.glyphs.get(i);
        var unicode = glyph.unicode | 0;

        if (isNaN(glyph.advanceWidth)) {
            throw new Error('Glyph ' + glyph.name + ' (' + i + '): advanceWidth is not a number.');
        }

        if (firstCharIndex > unicode || firstCharIndex === undefined) {
            // ignore .notdef char
            if (unicode > 0) {
                firstCharIndex = unicode;
            }
        }

        if (lastCharIndex < unicode) {
            lastCharIndex = unicode;
        }

        var position = os2.getUnicodeRange(unicode);
        if (position < 32) {
            ulUnicodeRange1 |= 1 << position;
        } else if (position < 64) {
            ulUnicodeRange2 |= 1 << position - 32;
        } else if (position < 96) {
            ulUnicodeRange3 |= 1 << position - 64;
        } else if (position < 123) {
            ulUnicodeRange4 |= 1 << position - 96;
        } else {
            throw new Error('Unicode ranges bits > 123 are reserved for internal usage');
        }
        // Skip non-important characters.
        if (glyph.name === '.notdef') { continue; }
        var metrics = glyph.getMetrics();
        xMins.push(metrics.xMin);
        yMins.push(metrics.yMin);
        xMaxs.push(metrics.xMax);
        yMaxs.push(metrics.yMax);
        leftSideBearings.push(metrics.leftSideBearing);
        rightSideBearings.push(metrics.rightSideBearing);
        advanceWidths.push(glyph.advanceWidth);
    }

    var globals = {
        xMin: Math.min.apply(null, xMins),
        yMin: Math.min.apply(null, yMins),
        xMax: Math.max.apply(null, xMaxs),
        yMax: Math.max.apply(null, yMaxs),
        advanceWidthMax: Math.max.apply(null, advanceWidths),
        advanceWidthAvg: average(advanceWidths),
        minLeftSideBearing: Math.min.apply(null, leftSideBearings),
        maxLeftSideBearing: Math.max.apply(null, leftSideBearings),
        minRightSideBearing: Math.min.apply(null, rightSideBearings)
    };
    globals.ascender = font.ascender;
    globals.descender = font.descender;

    var headTable = head.make({
        flags: 3, // 00000011 (baseline for font at y=0; left sidebearing point at x=0)
        unitsPerEm: font.unitsPerEm,
        xMin: globals.xMin,
        yMin: globals.yMin,
        xMax: globals.xMax,
        yMax: globals.yMax,
        lowestRecPPEM: 3,
        createdTimestamp: font.createdTimestamp
    });

    var hheaTable = hhea.make({
        ascender: globals.ascender,
        descender: globals.descender,
        advanceWidthMax: globals.advanceWidthMax,
        minLeftSideBearing: globals.minLeftSideBearing,
        minRightSideBearing: globals.minRightSideBearing,
        xMaxExtent: globals.maxLeftSideBearing + (globals.xMax - globals.xMin),
        numberOfHMetrics: font.glyphs.length
    });

    var maxpTable = maxp.make(font.glyphs.length);

    var os2Table = os2.make(Object.assign({
        xAvgCharWidth: Math.round(globals.advanceWidthAvg),
        usFirstCharIndex: firstCharIndex,
        usLastCharIndex: lastCharIndex,
        ulUnicodeRange1: ulUnicodeRange1,
        ulUnicodeRange2: ulUnicodeRange2,
        ulUnicodeRange3: ulUnicodeRange3,
        ulUnicodeRange4: ulUnicodeRange4,
        // See http://typophile.com/node/13081 for more info on vertical metrics.
        // We get metrics for typical characters (such as "x" for xHeight).
        // We provide some fallback characters if characters are unavailable: their
        // ordering was chosen experimentally.
        sTypoAscender: globals.ascender,
        sTypoDescender: globals.descender,
        sTypoLineGap: 0,
        usWinAscent: globals.yMax,
        usWinDescent: Math.abs(globals.yMin),
        ulCodePageRange1: 1, // FIXME: hard-code Latin 1 support for now
        sxHeight: metricsForChar(font, 'xyvw', {yMax: Math.round(globals.ascender / 2)}).yMax,
        sCapHeight: metricsForChar(font, 'HIKLEFJMNTZBDPRAGOQSUVWXY', globals).yMax,
        usDefaultChar: font.hasChar(' ') ? 32 : 0, // Use space as the default character, if available.
        usBreakChar: font.hasChar(' ') ? 32 : 0, // Use space as the break character, if available.
    }, font.tables.os2));

    var hmtxTable = hmtx.make(font.glyphs);
    var cmapTable = cmap.make(font.glyphs);

    var englishFamilyName = font.getEnglishName('fontFamily');
    var englishStyleName = font.getEnglishName('fontSubfamily');
    var englishFullName = englishFamilyName + ' ' + englishStyleName;
    var postScriptName = font.getEnglishName('postScriptName');
    if (!postScriptName) {
        postScriptName = englishFamilyName.replace(/\s/g, '') + '-' + englishStyleName;
    }

    var names = {};
    for (var n in font.names) {
        names[n] = font.names[n];
    }

    if (!names.uniqueID) {
        names.uniqueID = {en: font.getEnglishName('manufacturer') + ':' + englishFullName};
    }

    if (!names.postScriptName) {
        names.postScriptName = {en: postScriptName};
    }

    if (!names.preferredFamily) {
        names.preferredFamily = font.names.fontFamily;
    }

    if (!names.preferredSubfamily) {
        names.preferredSubfamily = font.names.fontSubfamily;
    }

    var languageTags = [];
    var nameTable = _name.make(names, languageTags);
    var ltagTable = (languageTags.length > 0 ? ltag.make(languageTags) : undefined);

    var postTable = post.make();
    var cffTable = cff.make(font.glyphs, {
        version: font.getEnglishName('version'),
        fullName: englishFullName,
        familyName: englishFamilyName,
        weightName: englishStyleName,
        postScriptName: postScriptName,
        unitsPerEm: font.unitsPerEm,
        fontBBox: [0, globals.yMin, globals.ascender, globals.advanceWidthMax]
    });

    var metaTable = (font.metas && Object.keys(font.metas).length > 0) ? meta.make(font.metas) : undefined;

    // The order does not matter because makeSfntTable() will sort them.
    var tables = [headTable, hheaTable, maxpTable, os2Table, nameTable, cmapTable, postTable, cffTable, hmtxTable];
    if (ltagTable) {
        tables.push(ltagTable);
    }
    // Optional tables
    if (font.tables.gsub) {
        tables.push(gsub.make(font.tables.gsub));
    }
    if (metaTable) {
        tables.push(metaTable);
    }

    var sfntTable = makeSfntTable(tables);

    // Compute the font's checkSum and store it in head.checkSumAdjustment.
    var bytes = sfntTable.encode();
    var checkSum = computeCheckSum(bytes);
    var tableFields = sfntTable.fields;
    var checkSumAdjusted = false;
    for (var i$1 = 0; i$1 < tableFields.length; i$1 += 1) {
        if (tableFields[i$1].name === 'head table') {
            tableFields[i$1].value.checkSumAdjustment = 0xB1B0AFBA - checkSum;
            checkSumAdjusted = true;
            break;
        }
    }

    if (!checkSumAdjusted) {
        throw new Error('Could not find head table with checkSum to adjust.');
    }

    return sfntTable;
}

var sfnt = { make: makeSfntTable, fontToTable: fontToSfntTable, computeCheckSum: computeCheckSum };

// The Layout object is the prototype of Substitution objects, and provides

function searchTag(arr, tag) {
    /* jshint bitwise: false */
    var imin = 0;
    var imax = arr.length - 1;
    while (imin <= imax) {
        var imid = (imin + imax) >>> 1;
        var val = arr[imid].tag;
        if (val === tag) {
            return imid;
        } else if (val < tag) {
            imin = imid + 1;
        } else { imax = imid - 1; }
    }
    // Not found: return -1-insertion point
    return -imin - 1;
}

function binSearch(arr, value) {
    /* jshint bitwise: false */
    var imin = 0;
    var imax = arr.length - 1;
    while (imin <= imax) {
        var imid = (imin + imax) >>> 1;
        var val = arr[imid];
        if (val === value) {
            return imid;
        } else if (val < value) {
            imin = imid + 1;
        } else { imax = imid - 1; }
    }
    // Not found: return -1-insertion point
    return -imin - 1;
}

// binary search in a list of ranges (coverage, class definition)
function searchRange(ranges, value) {
    // jshint bitwise: false
    var range;
    var imin = 0;
    var imax = ranges.length - 1;
    while (imin <= imax) {
        var imid = (imin + imax) >>> 1;
        range = ranges[imid];
        var start = range.start;
        if (start === value) {
            return range;
        } else if (start < value) {
            imin = imid + 1;
        } else { imax = imid - 1; }
    }
    if (imin > 0) {
        range = ranges[imin - 1];
        if (value > range.end) { return 0; }
        return range;
    }
}

/**
 * @exports opentype.Layout
 * @class
 */
function Layout(font, tableName) {
    this.font = font;
    this.tableName = tableName;
}

Layout.prototype = {

    /**
     * Binary search an object by "tag" property
     * @instance
     * @function searchTag
     * @memberof opentype.Layout
     * @param  {Array} arr
     * @param  {string} tag
     * @return {number}
     */
    searchTag: searchTag,

    /**
     * Binary search in a list of numbers
     * @instance
     * @function binSearch
     * @memberof opentype.Layout
     * @param  {Array} arr
     * @param  {number} value
     * @return {number}
     */
    binSearch: binSearch,

    /**
     * Get or create the Layout table (GSUB, GPOS etc).
     * @param  {boolean} create - Whether to create a new one.
     * @return {Object} The GSUB or GPOS table.
     */
    getTable: function(create) {
        var layout = this.font.tables[this.tableName];
        if (!layout && create) {
            layout = this.font.tables[this.tableName] = this.createDefaultTable();
        }
        return layout;
    },

    /**
     * Returns all scripts in the substitution table.
     * @instance
     * @return {Array}
     */
    getScriptNames: function() {
        var layout = this.getTable();
        if (!layout) { return []; }
        return layout.scripts.map(function(script) {
            return script.tag;
        });
    },

    /**
     * Returns the best bet for a script name.
     * Returns 'DFLT' if it exists.
     * If not, returns 'latn' if it exists.
     * If neither exist, returns undefined.
     */
    getDefaultScriptName: function() {
        var layout = this.getTable();
        if (!layout) { return; }
        var hasLatn = false;
        for (var i = 0; i < layout.scripts.length; i++) {
            var name = layout.scripts[i].tag;
            if (name === 'DFLT') { return name; }
            if (name === 'latn') { hasLatn = true; }
        }
        if (hasLatn) { return 'latn'; }
    },

    /**
     * Returns all LangSysRecords in the given script.
     * @instance
     * @param {string} [script='DFLT']
     * @param {boolean} create - forces the creation of this script table if it doesn't exist.
     * @return {Object} An object with tag and script properties.
     */
    getScriptTable: function(script, create) {
        var layout = this.getTable(create);
        if (layout) {
            script = script || 'DFLT';
            var scripts = layout.scripts;
            var pos = searchTag(layout.scripts, script);
            if (pos >= 0) {
                return scripts[pos].script;
            } else if (create) {
                var scr = {
                    tag: script,
                    script: {
                        defaultLangSys: {reserved: 0, reqFeatureIndex: 0xffff, featureIndexes: []},
                        langSysRecords: []
                    }
                };
                scripts.splice(-1 - pos, 0, scr);
                return scr.script;
            }
        }
    },

    /**
     * Returns a language system table
     * @instance
     * @param {string} [script='DFLT']
     * @param {string} [language='dlft']
     * @param {boolean} create - forces the creation of this langSysTable if it doesn't exist.
     * @return {Object}
     */
    getLangSysTable: function(script, language, create) {
        var scriptTable = this.getScriptTable(script, create);
        if (scriptTable) {
            if (!language || language === 'dflt' || language === 'DFLT') {
                return scriptTable.defaultLangSys;
            }
            var pos = searchTag(scriptTable.langSysRecords, language);
            if (pos >= 0) {
                return scriptTable.langSysRecords[pos].langSys;
            } else if (create) {
                var langSysRecord = {
                    tag: language,
                    langSys: {reserved: 0, reqFeatureIndex: 0xffff, featureIndexes: []}
                };
                scriptTable.langSysRecords.splice(-1 - pos, 0, langSysRecord);
                return langSysRecord.langSys;
            }
        }
    },

    /**
     * Get a specific feature table.
     * @instance
     * @param {string} [script='DFLT']
     * @param {string} [language='dlft']
     * @param {string} feature - One of the codes listed at https://www.microsoft.com/typography/OTSPEC/featurelist.htm
     * @param {boolean} create - forces the creation of the feature table if it doesn't exist.
     * @return {Object}
     */
    getFeatureTable: function(script, language, feature, create) {
        var langSysTable = this.getLangSysTable(script, language, create);
        if (langSysTable) {
            var featureRecord;
            var featIndexes = langSysTable.featureIndexes;
            var allFeatures = this.font.tables[this.tableName].features;
            // The FeatureIndex array of indices is in arbitrary order,
            // even if allFeatures is sorted alphabetically by feature tag.
            for (var i = 0; i < featIndexes.length; i++) {
                featureRecord = allFeatures[featIndexes[i]];
                if (featureRecord.tag === feature) {
                    return featureRecord.feature;
                }
            }
            if (create) {
                var index = allFeatures.length;
                // Automatic ordering of features would require to shift feature indexes in the script list.
                check.assert(index === 0 || feature >= allFeatures[index - 1].tag, 'Features must be added in alphabetical order.');
                featureRecord = {
                    tag: feature,
                    feature: { params: 0, lookupListIndexes: [] }
                };
                allFeatures.push(featureRecord);
                featIndexes.push(index);
                return featureRecord.feature;
            }
        }
    },

    /**
     * Get the lookup tables of a given type for a script/language/feature.
     * @instance
     * @param {string} [script='DFLT']
     * @param {string} [language='dlft']
     * @param {string} feature - 4-letter feature code
     * @param {number} lookupType - 1 to 9
     * @param {boolean} create - forces the creation of the lookup table if it doesn't exist, with no subtables.
     * @return {Object[]}
     */
    getLookupTables: function(script, language, feature, lookupType, create) {
        var featureTable = this.getFeatureTable(script, language, feature, create);
        var tables = [];
        if (featureTable) {
            var lookupTable;
            var lookupListIndexes = featureTable.lookupListIndexes;
            var allLookups = this.font.tables[this.tableName].lookups;
            // lookupListIndexes are in no particular order, so use naive search.
            for (var i = 0; i < lookupListIndexes.length; i++) {
                lookupTable = allLookups[lookupListIndexes[i]];
                if (lookupTable.lookupType === lookupType) {
                    tables.push(lookupTable);
                }
            }
            if (tables.length === 0 && create) {
                lookupTable = {
                    lookupType: lookupType,
                    lookupFlag: 0,
                    subtables: [],
                    markFilteringSet: undefined
                };
                var index = allLookups.length;
                allLookups.push(lookupTable);
                lookupListIndexes.push(index);
                return [lookupTable];
            }
        }
        return tables;
    },

    /**
     * Find a glyph in a class definition table
     * https://docs.microsoft.com/en-us/typography/opentype/spec/chapter2#class-definition-table
     * @param {object} classDefTable - an OpenType Layout class definition table
     * @param {number} glyphIndex - the index of the glyph to find
     * @returns {number} -1 if not found
     */
    getGlyphClass: function(classDefTable, glyphIndex) {
        switch (classDefTable.format) {
            case 1:
                if (classDefTable.startGlyph <= glyphIndex && glyphIndex < classDefTable.startGlyph + classDefTable.classes.length) {
                    return classDefTable.classes[glyphIndex - classDefTable.startGlyph];
                }
                return 0;
            case 2:
                var range = searchRange(classDefTable.ranges, glyphIndex);
                return range ? range.classId : 0;
        }
    },

    /**
     * Find a glyph in a coverage table
     * https://docs.microsoft.com/en-us/typography/opentype/spec/chapter2#coverage-table
     * @param {object} coverageTable - an OpenType Layout coverage table
     * @param {number} glyphIndex - the index of the glyph to find
     * @returns {number} -1 if not found
     */
    getCoverageIndex: function(coverageTable, glyphIndex) {
        switch (coverageTable.format) {
            case 1:
                var index = binSearch(coverageTable.glyphs, glyphIndex);
                return index >= 0 ? index : -1;
            case 2:
                var range = searchRange(coverageTable.ranges, glyphIndex);
                return range ? range.index + glyphIndex - range.start : -1;
        }
    },

    /**
     * Returns the list of glyph indexes of a coverage table.
     * Format 1: the list is stored raw
     * Format 2: compact list as range records.
     * @instance
     * @param  {Object} coverageTable
     * @return {Array}
     */
    expandCoverage: function(coverageTable) {
        if (coverageTable.format === 1) {
            return coverageTable.glyphs;
        } else {
            var glyphs = [];
            var ranges = coverageTable.ranges;
            for (var i = 0; i < ranges.length; i++) {
                var range = ranges[i];
                var start = range.start;
                var end = range.end;
                for (var j = start; j <= end; j++) {
                    glyphs.push(j);
                }
            }
            return glyphs;
        }
    }

};

// The Position object provides utility methods to manipulate

/**
 * @exports opentype.Position
 * @class
 * @extends opentype.Layout
 * @param {opentype.Font}
 * @constructor
 */
function Position(font) {
    Layout.call(this, font, 'gpos');
}

Position.prototype = Layout.prototype;

/**
 * Init some data for faster and easier access later.
 */
Position.prototype.init = function() {
    var script = this.getDefaultScriptName();
    this.defaultKerningTables = this.getKerningTables(script);
};

/**
 * Find a glyph pair in a list of lookup tables of type 2 and retrieve the xAdvance kerning value.
 *
 * @param {integer} leftIndex - left glyph index
 * @param {integer} rightIndex - right glyph index
 * @returns {integer}
 */
Position.prototype.getKerningValue = function(kerningLookups, leftIndex, rightIndex) {
    for (var i = 0; i < kerningLookups.length; i++) {
        var subtables = kerningLookups[i].subtables;
        for (var j = 0; j < subtables.length; j++) {
            var subtable = subtables[j];
            var covIndex = this.getCoverageIndex(subtable.coverage, leftIndex);
            if (covIndex < 0) { continue; }
            switch (subtable.posFormat) {
                case 1:
                    // Search Pair Adjustment Positioning Format 1
                    var pairSet = subtable.pairSets[covIndex];
                    for (var k = 0; k < pairSet.length; k++) {
                        var pair = pairSet[k];
                        if (pair.secondGlyph === rightIndex) {
                            return pair.value1 && pair.value1.xAdvance || 0;
                        }
                    }
                    break;      // left glyph found, not right glyph - try next subtable
                case 2:
                    // Search Pair Adjustment Positioning Format 2
                    var class1 = this.getGlyphClass(subtable.classDef1, leftIndex);
                    var class2 = this.getGlyphClass(subtable.classDef2, rightIndex);
                    var pair$1 = subtable.classRecords[class1][class2];
                    return pair$1.value1 && pair$1.value1.xAdvance || 0;
            }
        }
    }
    return 0;
};

/**
 * List all kerning lookup tables.
 *
 * @param {string} [script='DFLT'] - use font.position.getDefaultScriptName() for a better default value
 * @param {string} [language='dflt']
 * @return {object[]} The list of kerning lookup tables (may be empty), or undefined if there is no GPOS table (and we should use the kern table)
 */
Position.prototype.getKerningTables = function(script, language) {
    if (this.font.tables.gpos) {
        return this.getLookupTables(script, language, 'kern', 2);
    }
};

// The Substitution object provides utility methods to manipulate

/**
 * @exports opentype.Substitution
 * @class
 * @extends opentype.Layout
 * @param {opentype.Font}
 * @constructor
 */
function Substitution(font) {
    Layout.call(this, font, 'gsub');
}

// Check if 2 arrays of primitives are equal.
function arraysEqual(ar1, ar2) {
    var n = ar1.length;
    if (n !== ar2.length) { return false; }
    for (var i = 0; i < n; i++) {
        if (ar1[i] !== ar2[i]) { return false; }
    }
    return true;
}

// Find the first subtable of a lookup table in a particular format.
function getSubstFormat(lookupTable, format, defaultSubtable) {
    var subtables = lookupTable.subtables;
    for (var i = 0; i < subtables.length; i++) {
        var subtable = subtables[i];
        if (subtable.substFormat === format) {
            return subtable;
        }
    }
    if (defaultSubtable) {
        subtables.push(defaultSubtable);
        return defaultSubtable;
    }
    return undefined;
}

Substitution.prototype = Layout.prototype;

/**
 * Create a default GSUB table.
 * @return {Object} gsub - The GSUB table.
 */
Substitution.prototype.createDefaultTable = function() {
    // Generate a default empty GSUB table with just a DFLT script and dflt lang sys.
    return {
        version: 1,
        scripts: [{
            tag: 'DFLT',
            script: {
                defaultLangSys: { reserved: 0, reqFeatureIndex: 0xffff, featureIndexes: [] },
                langSysRecords: []
            }
        }],
        features: [],
        lookups: []
    };
};

/**
 * List all single substitutions (lookup type 1) for a given script, language, and feature.
 * @param {string} [script='DFLT']
 * @param {string} [language='dflt']
 * @param {string} feature - 4-character feature name ('aalt', 'salt', 'ss01'...)
 * @return {Array} substitutions - The list of substitutions.
 */
Substitution.prototype.getSingle = function(feature, script, language) {
    var substitutions = [];
    var lookupTables = this.getLookupTables(script, language, feature, 1);
    for (var idx = 0; idx < lookupTables.length; idx++) {
        var subtables = lookupTables[idx].subtables;
        for (var i = 0; i < subtables.length; i++) {
            var subtable = subtables[i];
            var glyphs = this.expandCoverage(subtable.coverage);
            var j = (void 0);
            if (subtable.substFormat === 1) {
                var delta = subtable.deltaGlyphId;
                for (j = 0; j < glyphs.length; j++) {
                    var glyph = glyphs[j];
                    substitutions.push({ sub: glyph, by: glyph + delta });
                }
            } else {
                var substitute = subtable.substitute;
                for (j = 0; j < glyphs.length; j++) {
                    substitutions.push({ sub: glyphs[j], by: substitute[j] });
                }
            }
        }
    }
    return substitutions;
};

/**
 * List all multiple substitutions (lookup type 2) for a given script, language, and feature.
 * @param {string} [script='DFLT']
 * @param {string} [language='dflt']
 * @param {string} feature - 4-character feature name ('ccmp', 'stch')
 * @return {Array} substitutions - The list of substitutions.
 */
Substitution.prototype.getMultiple = function(feature, script, language) {
    var substitutions = [];
    var lookupTables = this.getLookupTables(script, language, feature, 2);
    for (var idx = 0; idx < lookupTables.length; idx++) {
        var subtables = lookupTables[idx].subtables;
        for (var i = 0; i < subtables.length; i++) {
            var subtable = subtables[i];
            var glyphs = this.expandCoverage(subtable.coverage);
            var j = (void 0);

            for (j = 0; j < glyphs.length; j++) {
                var glyph = glyphs[j];
                var replacements = subtable.sequences[j];
                substitutions.push({ sub: glyph, by: replacements });
            }
        }
    }
    return substitutions;
};

/**
 * List all alternates (lookup type 3) for a given script, language, and feature.
 * @param {string} [script='DFLT']
 * @param {string} [language='dflt']
 * @param {string} feature - 4-character feature name ('aalt', 'salt'...)
 * @return {Array} alternates - The list of alternates
 */
Substitution.prototype.getAlternates = function(feature, script, language) {
    var alternates = [];
    var lookupTables = this.getLookupTables(script, language, feature, 3);
    for (var idx = 0; idx < lookupTables.length; idx++) {
        var subtables = lookupTables[idx].subtables;
        for (var i = 0; i < subtables.length; i++) {
            var subtable = subtables[i];
            var glyphs = this.expandCoverage(subtable.coverage);
            var alternateSets = subtable.alternateSets;
            for (var j = 0; j < glyphs.length; j++) {
                alternates.push({ sub: glyphs[j], by: alternateSets[j] });
            }
        }
    }
    return alternates;
};

/**
 * List all ligatures (lookup type 4) for a given script, language, and feature.
 * The result is an array of ligature objects like { sub: [ids], by: id }
 * @param {string} feature - 4-letter feature name ('liga', 'rlig', 'dlig'...)
 * @param {string} [script='DFLT']
 * @param {string} [language='dflt']
 * @return {Array} ligatures - The list of ligatures.
 */
Substitution.prototype.getLigatures = function(feature, script, language) {
    var ligatures = [];
    var lookupTables = this.getLookupTables(script, language, feature, 4);
    for (var idx = 0; idx < lookupTables.length; idx++) {
        var subtables = lookupTables[idx].subtables;
        for (var i = 0; i < subtables.length; i++) {
            var subtable = subtables[i];
            var glyphs = this.expandCoverage(subtable.coverage);
            var ligatureSets = subtable.ligatureSets;
            for (var j = 0; j < glyphs.length; j++) {
                var startGlyph = glyphs[j];
                var ligSet = ligatureSets[j];
                for (var k = 0; k < ligSet.length; k++) {
                    var lig = ligSet[k];
                    ligatures.push({
                        sub: [startGlyph].concat(lig.components),
                        by: lig.ligGlyph
                    });
                }
            }
        }
    }
    return ligatures;
};

/**
 * Add or modify a single substitution (lookup type 1)
 * Format 2, more flexible, is always used.
 * @param {string} feature - 4-letter feature name ('liga', 'rlig', 'dlig'...)
 * @param {Object} substitution - { sub: id, by: id } (format 1 is not supported)
 * @param {string} [script='DFLT']
 * @param {string} [language='dflt']
 */
Substitution.prototype.addSingle = function(feature, substitution, script, language) {
    var lookupTable = this.getLookupTables(script, language, feature, 1, true)[0];
    var subtable = getSubstFormat(lookupTable, 2, {                // lookup type 1 subtable, format 2, coverage format 1
        substFormat: 2,
        coverage: {format: 1, glyphs: []},
        substitute: []
    });
    check.assert(subtable.coverage.format === 1, 'Single: unable to modify coverage table format ' + subtable.coverage.format);
    var coverageGlyph = substitution.sub;
    var pos = this.binSearch(subtable.coverage.glyphs, coverageGlyph);
    if (pos < 0) {
        pos = -1 - pos;
        subtable.coverage.glyphs.splice(pos, 0, coverageGlyph);
        subtable.substitute.splice(pos, 0, 0);
    }
    subtable.substitute[pos] = substitution.by;
};

/**
 * Add or modify a multiple substitution (lookup type 2)
 * @param {string} feature - 4-letter feature name ('ccmp', 'stch')
 * @param {Object} substitution - { sub: id, by: [id] } for format 2.
 * @param {string} [script='DFLT']
 * @param {string} [language='dflt']
 */
Substitution.prototype.addMultiple = function(feature, substitution, script, language) {
    check.assert(substitution.by instanceof Array && substitution.by.length > 1, 'Multiple: "by" must be an array of two or more ids');
    var lookupTable = this.getLookupTables(script, language, feature, 2, true)[0];
    var subtable = getSubstFormat(lookupTable, 1, {                // lookup type 2 subtable, format 1, coverage format 1
        substFormat: 1,
        coverage: {format: 1, glyphs: []},
        sequences: []
    });
    check.assert(subtable.coverage.format === 1, 'Multiple: unable to modify coverage table format ' + subtable.coverage.format);
    var coverageGlyph = substitution.sub;
    var pos = this.binSearch(subtable.coverage.glyphs, coverageGlyph);
    if (pos < 0) {
        pos = -1 - pos;
        subtable.coverage.glyphs.splice(pos, 0, coverageGlyph);
        subtable.sequences.splice(pos, 0, 0);
    }
    subtable.sequences[pos] = substitution.by;
};

/**
 * Add or modify an alternate substitution (lookup type 3)
 * @param {string} feature - 4-letter feature name ('liga', 'rlig', 'dlig'...)
 * @param {Object} substitution - { sub: id, by: [ids] }
 * @param {string} [script='DFLT']
 * @param {string} [language='dflt']
 */
Substitution.prototype.addAlternate = function(feature, substitution, script, language) {
    var lookupTable = this.getLookupTables(script, language, feature, 3, true)[0];
    var subtable = getSubstFormat(lookupTable, 1, {                // lookup type 3 subtable, format 1, coverage format 1
        substFormat: 1,
        coverage: {format: 1, glyphs: []},
        alternateSets: []
    });
    check.assert(subtable.coverage.format === 1, 'Alternate: unable to modify coverage table format ' + subtable.coverage.format);
    var coverageGlyph = substitution.sub;
    var pos = this.binSearch(subtable.coverage.glyphs, coverageGlyph);
    if (pos < 0) {
        pos = -1 - pos;
        subtable.coverage.glyphs.splice(pos, 0, coverageGlyph);
        subtable.alternateSets.splice(pos, 0, 0);
    }
    subtable.alternateSets[pos] = substitution.by;
};

/**
 * Add a ligature (lookup type 4)
 * Ligatures with more components must be stored ahead of those with fewer components in order to be found
 * @param {string} feature - 4-letter feature name ('liga', 'rlig', 'dlig'...)
 * @param {Object} ligature - { sub: [ids], by: id }
 * @param {string} [script='DFLT']
 * @param {string} [language='dflt']
 */
Substitution.prototype.addLigature = function(feature, ligature, script, language) {
    var lookupTable = this.getLookupTables(script, language, feature, 4, true)[0];
    var subtable = lookupTable.subtables[0];
    if (!subtable) {
        subtable = {                // lookup type 4 subtable, format 1, coverage format 1
            substFormat: 1,
            coverage: { format: 1, glyphs: [] },
            ligatureSets: []
        };
        lookupTable.subtables[0] = subtable;
    }
    check.assert(subtable.coverage.format === 1, 'Ligature: unable to modify coverage table format ' + subtable.coverage.format);
    var coverageGlyph = ligature.sub[0];
    var ligComponents = ligature.sub.slice(1);
    var ligatureTable = {
        ligGlyph: ligature.by,
        components: ligComponents
    };
    var pos = this.binSearch(subtable.coverage.glyphs, coverageGlyph);
    if (pos >= 0) {
        // ligatureSet already exists
        var ligatureSet = subtable.ligatureSets[pos];
        for (var i = 0; i < ligatureSet.length; i++) {
            // If ligature already exists, return.
            if (arraysEqual(ligatureSet[i].components, ligComponents)) {
                return;
            }
        }
        // ligature does not exist: add it.
        ligatureSet.push(ligatureTable);
    } else {
        // Create a new ligatureSet and add coverage for the first glyph.
        pos = -1 - pos;
        subtable.coverage.glyphs.splice(pos, 0, coverageGlyph);
        subtable.ligatureSets.splice(pos, 0, [ligatureTable]);
    }
};

/**
 * List all feature data for a given script and language.
 * @param {string} feature - 4-letter feature name
 * @param {string} [script='DFLT']
 * @param {string} [language='dflt']
 * @return {Array} substitutions - The list of substitutions.
 */
Substitution.prototype.getFeature = function(feature, script, language) {
    if (/ss\d\d/.test(feature)) {
        // ss01 - ss20
        return this.getSingle(feature, script, language);
    }
    switch (feature) {
        case 'aalt':
        case 'salt':
            return this.getSingle(feature, script, language)
                    .concat(this.getAlternates(feature, script, language));
        case 'dlig':
        case 'liga':
        case 'rlig':
            return this.getLigatures(feature, script, language);
        case 'ccmp':
            return this.getMultiple(feature, script, language)
                .concat(this.getLigatures(feature, script, language));
        case 'stch':
            return this.getMultiple(feature, script, language);
    }
    return undefined;
};

/**
 * Add a substitution to a feature for a given script and language.
 * @param {string} feature - 4-letter feature name
 * @param {Object} sub - the substitution to add (an object like { sub: id or [ids], by: id or [ids] })
 * @param {string} [script='DFLT']
 * @param {string} [language='dflt']
 */
Substitution.prototype.add = function(feature, sub, script, language) {
    if (/ss\d\d/.test(feature)) {
        // ss01 - ss20
        return this.addSingle(feature, sub, script, language);
    }
    switch (feature) {
        case 'aalt':
        case 'salt':
            if (typeof sub.by === 'number') {
                return this.addSingle(feature, sub, script, language);
            }
            return this.addAlternate(feature, sub, script, language);
        case 'dlig':
        case 'liga':
        case 'rlig':
            return this.addLigature(feature, sub, script, language);
        case 'ccmp':
            if (sub.by instanceof Array) {
                return this.addMultiple(feature, sub, script, language);
            }
            return this.addLigature(feature, sub, script, language);
    }
    return undefined;
};

function isBrowser() {
    return typeof window !== 'undefined';
}

function nodeBufferToArrayBuffer(buffer) {
    var ab = new ArrayBuffer(buffer.length);
    var view = new Uint8Array(ab);
    for (var i = 0; i < buffer.length; ++i) {
        view[i] = buffer[i];
    }

    return ab;
}

function arrayBufferToNodeBuffer(ab) {
    var buffer = new Buffer(ab.byteLength);
    var view = new Uint8Array(ab);
    for (var i = 0; i < buffer.length; ++i) {
        buffer[i] = view[i];
    }

    return buffer;
}

function checkArgument(expression, message) {
    if (!expression) {
        throw message;
    }
}

// The `glyf` table describes the glyphs in TrueType outline format.

// Parse the coordinate data for a glyph.
function parseGlyphCoordinate(p, flag, previousValue, shortVectorBitMask, sameBitMask) {
    var v;
    if ((flag & shortVectorBitMask) > 0) {
        // The coordinate is 1 byte long.
        v = p.parseByte();
        // The `same` bit is re-used for short values to signify the sign of the value.
        if ((flag & sameBitMask) === 0) {
            v = -v;
        }

        v = previousValue + v;
    } else {
        //  The coordinate is 2 bytes long.
        // If the `same` bit is set, the coordinate is the same as the previous coordinate.
        if ((flag & sameBitMask) > 0) {
            v = previousValue;
        } else {
            // Parse the coordinate as a signed 16-bit delta value.
            v = previousValue + p.parseShort();
        }
    }

    return v;
}

// Parse a TrueType glyph.
function parseGlyph(glyph, data, start) {
    var p = new parse.Parser(data, start);
    glyph.numberOfContours = p.parseShort();
    glyph._xMin = p.parseShort();
    glyph._yMin = p.parseShort();
    glyph._xMax = p.parseShort();
    glyph._yMax = p.parseShort();
    var flags;
    var flag;

    if (glyph.numberOfContours > 0) {
        // This glyph is not a composite.
        var endPointIndices = glyph.endPointIndices = [];
        for (var i = 0; i < glyph.numberOfContours; i += 1) {
            endPointIndices.push(p.parseUShort());
        }

        glyph.instructionLength = p.parseUShort();
        glyph.instructions = [];
        for (var i$1 = 0; i$1 < glyph.instructionLength; i$1 += 1) {
            glyph.instructions.push(p.parseByte());
        }

        var numberOfCoordinates = endPointIndices[endPointIndices.length - 1] + 1;
        flags = [];
        for (var i$2 = 0; i$2 < numberOfCoordinates; i$2 += 1) {
            flag = p.parseByte();
            flags.push(flag);
            // If bit 3 is set, we repeat this flag n times, where n is the next byte.
            if ((flag & 8) > 0) {
                var repeatCount = p.parseByte();
                for (var j = 0; j < repeatCount; j += 1) {
                    flags.push(flag);
                    i$2 += 1;
                }
            }
        }

        check.argument(flags.length === numberOfCoordinates, 'Bad flags.');

        if (endPointIndices.length > 0) {
            var points = [];
            var point;
            // X/Y coordinates are relative to the previous point, except for the first point which is relative to 0,0.
            if (numberOfCoordinates > 0) {
                for (var i$3 = 0; i$3 < numberOfCoordinates; i$3 += 1) {
                    flag = flags[i$3];
                    point = {};
                    point.onCurve = !!(flag & 1);
                    point.lastPointOfContour = endPointIndices.indexOf(i$3) >= 0;
                    points.push(point);
                }

                var px = 0;
                for (var i$4 = 0; i$4 < numberOfCoordinates; i$4 += 1) {
                    flag = flags[i$4];
                    point = points[i$4];
                    point.x = parseGlyphCoordinate(p, flag, px, 2, 16);
                    px = point.x;
                }

                var py = 0;
                for (var i$5 = 0; i$5 < numberOfCoordinates; i$5 += 1) {
                    flag = flags[i$5];
                    point = points[i$5];
                    point.y = parseGlyphCoordinate(p, flag, py, 4, 32);
                    py = point.y;
                }
            }

            glyph.points = points;
        } else {
            glyph.points = [];
        }
    } else if (glyph.numberOfContours === 0) {
        glyph.points = [];
    } else {
        glyph.isComposite = true;
        glyph.points = [];
        glyph.components = [];
        var moreComponents = true;
        while (moreComponents) {
            flags = p.parseUShort();
            var component = {
                glyphIndex: p.parseUShort(),
                xScale: 1,
                scale01: 0,
                scale10: 0,
                yScale: 1,
                dx: 0,
                dy: 0
            };
            if ((flags & 1) > 0) {
                // The arguments are words
                if ((flags & 2) > 0) {
                    // values are offset
                    component.dx = p.parseShort();
                    component.dy = p.parseShort();
                } else {
                    // values are matched points
                    component.matchedPoints = [p.parseUShort(), p.parseUShort()];
                }

            } else {
                // The arguments are bytes
                if ((flags & 2) > 0) {
                    // values are offset
                    component.dx = p.parseChar();
                    component.dy = p.parseChar();
                } else {
                    // values are matched points
                    component.matchedPoints = [p.parseByte(), p.parseByte()];
                }
            }

            if ((flags & 8) > 0) {
                // We have a scale
                component.xScale = component.yScale = p.parseF2Dot14();
            } else if ((flags & 64) > 0) {
                // We have an X / Y scale
                component.xScale = p.parseF2Dot14();
                component.yScale = p.parseF2Dot14();
            } else if ((flags & 128) > 0) {
                // We have a 2x2 transformation
                component.xScale = p.parseF2Dot14();
                component.scale01 = p.parseF2Dot14();
                component.scale10 = p.parseF2Dot14();
                component.yScale = p.parseF2Dot14();
            }

            glyph.components.push(component);
            moreComponents = !!(flags & 32);
        }
        if (flags & 0x100) {
            // We have instructions
            glyph.instructionLength = p.parseUShort();
            glyph.instructions = [];
            for (var i$6 = 0; i$6 < glyph.instructionLength; i$6 += 1) {
                glyph.instructions.push(p.parseByte());
            }
        }
    }
}

// Transform an array of points and return a new array.
function transformPoints(points, transform) {
    var newPoints = [];
    for (var i = 0; i < points.length; i += 1) {
        var pt = points[i];
        var newPt = {
            x: transform.xScale * pt.x + transform.scale01 * pt.y + transform.dx,
            y: transform.scale10 * pt.x + transform.yScale * pt.y + transform.dy,
            onCurve: pt.onCurve,
            lastPointOfContour: pt.lastPointOfContour
        };
        newPoints.push(newPt);
    }

    return newPoints;
}

function getContours(points) {
    var contours = [];
    var currentContour = [];
    for (var i = 0; i < points.length; i += 1) {
        var pt = points[i];
        currentContour.push(pt);
        if (pt.lastPointOfContour) {
            contours.push(currentContour);
            currentContour = [];
        }
    }

    check.argument(currentContour.length === 0, 'There are still points left in the current contour.');
    return contours;
}

// Convert the TrueType glyph outline to a Path.
function getPath(points) {
    var p = new Path();
    if (!points) {
        return p;
    }

    var contours = getContours(points);

    for (var contourIndex = 0; contourIndex < contours.length; ++contourIndex) {
        var contour = contours[contourIndex];

        var prev = null;
        var curr = contour[contour.length - 1];
        var next = contour[0];

        if (curr.onCurve) {
            p.moveTo(curr.x, curr.y);
        } else {
            if (next.onCurve) {
                p.moveTo(next.x, next.y);
            } else {
                // If both first and last points are off-curve, start at their middle.
                var start = {x: (curr.x + next.x) * 0.5, y: (curr.y + next.y) * 0.5};
                p.moveTo(start.x, start.y);
            }
        }

        for (var i = 0; i < contour.length; ++i) {
            prev = curr;
            curr = next;
            next = contour[(i + 1) % contour.length];

            if (curr.onCurve) {
                // This is a straight line.
                p.lineTo(curr.x, curr.y);
            } else {
                var prev2 = prev;
                var next2 = next;

                if (!prev.onCurve) {
                    prev2 = { x: (curr.x + prev.x) * 0.5, y: (curr.y + prev.y) * 0.5 };
                }

                if (!next.onCurve) {
                    next2 = { x: (curr.x + next.x) * 0.5, y: (curr.y + next.y) * 0.5 };
                }

                p.quadraticCurveTo(curr.x, curr.y, next2.x, next2.y);
            }
        }

        p.closePath();
    }
    return p;
}

function buildPath(glyphs, glyph) {
    if (glyph.isComposite) {
        for (var j = 0; j < glyph.components.length; j += 1) {
            var component = glyph.components[j];
            var componentGlyph = glyphs.get(component.glyphIndex);
            // Force the ttfGlyphLoader to parse the glyph.
            componentGlyph.getPath();
            if (componentGlyph.points) {
                var transformedPoints = (void 0);
                if (component.matchedPoints === undefined) {
                    // component positioned by offset
                    transformedPoints = transformPoints(componentGlyph.points, component);
                } else {
                    // component positioned by matched points
                    if ((component.matchedPoints[0] > glyph.points.length - 1) ||
                        (component.matchedPoints[1] > componentGlyph.points.length - 1)) {
                        throw Error('Matched points out of range in ' + glyph.name);
                    }
                    var firstPt = glyph.points[component.matchedPoints[0]];
                    var secondPt = componentGlyph.points[component.matchedPoints[1]];
                    var transform = {
                        xScale: component.xScale, scale01: component.scale01,
                        scale10: component.scale10, yScale: component.yScale,
                        dx: 0, dy: 0
                    };
                    secondPt = transformPoints([secondPt], transform)[0];
                    transform.dx = firstPt.x - secondPt.x;
                    transform.dy = firstPt.y - secondPt.y;
                    transformedPoints = transformPoints(componentGlyph.points, transform);
                }
                glyph.points = glyph.points.concat(transformedPoints);
            }
        }
    }

    return getPath(glyph.points);
}

function parseGlyfTableAll(data, start, loca, font) {
    var glyphs = new glyphset.GlyphSet(font);

    // The last element of the loca table is invalid.
    for (var i = 0; i < loca.length - 1; i += 1) {
        var offset = loca[i];
        var nextOffset = loca[i + 1];
        if (offset !== nextOffset) {
            glyphs.push(i, glyphset.ttfGlyphLoader(font, i, parseGlyph, data, start + offset, buildPath));
        } else {
            glyphs.push(i, glyphset.glyphLoader(font, i));
        }
    }

    return glyphs;
}

function parseGlyfTableOnLowMemory(data, start, loca, font) {
    var glyphs = new glyphset.GlyphSet(font);

    font._push = function(i) {
        var offset = loca[i];
        var nextOffset = loca[i + 1];
        if (offset !== nextOffset) {
            glyphs.push(i, glyphset.ttfGlyphLoader(font, i, parseGlyph, data, start + offset, buildPath));
        } else {
            glyphs.push(i, glyphset.glyphLoader(font, i));
        }
    };

    return glyphs;
}

// Parse all the glyphs according to the offsets from the `loca` table.
function parseGlyfTable(data, start, loca, font, opt) {
    if (opt.lowMemory)
        { return parseGlyfTableOnLowMemory(data, start, loca, font); }
    else
        { return parseGlyfTableAll(data, start, loca, font); }
}

var glyf = { getPath: getPath, parse: parseGlyfTable};

/* A TrueType font hinting interpreter.
*
* (c) 2017 Axel Kittenberger
*
* This interpreter has been implemented according to this documentation:
* https://developer.apple.com/fonts/TrueType-Reference-Manual/RM05/Chap5.html
*
* According to the documentation F24DOT6 values are used for pixels.
* That means calculation is 1/64 pixel accurate and uses integer operations.
* However, Javascript has floating point operations by default and only
* those are available. One could make a case to simulate the 1/64 accuracy
* exactly by truncating after every division operation
* (for example with << 0) to get pixel exactly results as other TrueType
* implementations. It may make sense since some fonts are pixel optimized
* by hand using DELTAP instructions. The current implementation doesn't
* and rather uses full floating point precision.
*
* xScale, yScale and rotation is currently ignored.
*
* A few non-trivial instructions are missing as I didn't encounter yet
* a font that used them to test a possible implementation.
*
* Some fonts seem to use undocumented features regarding the twilight zone.
* Only some of them are implemented as they were encountered.
*
* The exports.DEBUG statements are removed on the minified distribution file.
*/

var instructionTable;
var exec;
var execGlyph;
var execComponent;

/*
* Creates a hinting object.
*
* There ought to be exactly one
* for each truetype font that is used for hinting.
*/
function Hinting(font) {
    // the font this hinting object is for
    this.font = font;

    this.getCommands = function (hPoints) {
        return glyf.getPath(hPoints).commands;
    };

    // cached states
    this._fpgmState  =
    this._prepState  =
        undefined;

    // errorState
    // 0 ... all okay
    // 1 ... had an error in a glyf,
    //       continue working but stop spamming
    //       the console
    // 2 ... error at prep, stop hinting at this ppem
    // 3 ... error at fpeg, stop hinting for this font at all
    this._errorState = 0;
}

/*
* Not rounding.
*/
function roundOff(v) {
    return v;
}

/*
* Rounding to grid.
*/
function roundToGrid(v) {
    //Rounding in TT is supposed to "symmetrical around zero"
    return Math.sign(v) * Math.round(Math.abs(v));
}

/*
* Rounding to double grid.
*/
function roundToDoubleGrid(v) {
    return Math.sign(v) * Math.round(Math.abs(v * 2)) / 2;
}

/*
* Rounding to half grid.
*/
function roundToHalfGrid(v) {
    return Math.sign(v) * (Math.round(Math.abs(v) + 0.5) - 0.5);
}

/*
* Rounding to up to grid.
*/
function roundUpToGrid(v) {
    return Math.sign(v) * Math.ceil(Math.abs(v));
}

/*
* Rounding to down to grid.
*/
function roundDownToGrid(v) {
    return Math.sign(v) * Math.floor(Math.abs(v));
}

/*
* Super rounding.
*/
var roundSuper = function (v) {
    var period = this.srPeriod;
    var phase = this.srPhase;
    var threshold = this.srThreshold;
    var sign = 1;

    if (v < 0) {
        v = -v;
        sign = -1;
    }

    v += threshold - phase;

    v = Math.trunc(v / period) * period;

    v += phase;

    // according to http://xgridfit.sourceforge.net/round.html
    if (v < 0) { return phase * sign; }

    return v * sign;
};

/*
* Unit vector of x-axis.
*/
var xUnitVector = {
    x: 1,

    y: 0,

    axis: 'x',

    // Gets the projected distance between two points.
    // o1/o2 ... if true, respective original position is used.
    distance: function (p1, p2, o1, o2) {
        return (o1 ? p1.xo : p1.x) - (o2 ? p2.xo : p2.x);
    },

    // Moves point p so the moved position has the same relative
    // position to the moved positions of rp1 and rp2 than the
    // original positions had.
    //
    // See APPENDIX on INTERPOLATE at the bottom of this file.
    interpolate: function (p, rp1, rp2, pv) {
        var do1;
        var do2;
        var doa1;
        var doa2;
        var dm1;
        var dm2;
        var dt;

        if (!pv || pv === this) {
            do1 = p.xo - rp1.xo;
            do2 = p.xo - rp2.xo;
            dm1 = rp1.x - rp1.xo;
            dm2 = rp2.x - rp2.xo;
            doa1 = Math.abs(do1);
            doa2 = Math.abs(do2);
            dt = doa1 + doa2;

            if (dt === 0) {
                p.x = p.xo + (dm1 + dm2) / 2;
                return;
            }

            p.x = p.xo + (dm1 * doa2 + dm2 * doa1) / dt;
            return;
        }

        do1 = pv.distance(p, rp1, true, true);
        do2 = pv.distance(p, rp2, true, true);
        dm1 = pv.distance(rp1, rp1, false, true);
        dm2 = pv.distance(rp2, rp2, false, true);
        doa1 = Math.abs(do1);
        doa2 = Math.abs(do2);
        dt = doa1 + doa2;

        if (dt === 0) {
            xUnitVector.setRelative(p, p, (dm1 + dm2) / 2, pv, true);
            return;
        }

        xUnitVector.setRelative(p, p, (dm1 * doa2 + dm2 * doa1) / dt, pv, true);
    },

    // Slope of line normal to this
    normalSlope: Number.NEGATIVE_INFINITY,

    // Sets the point 'p' relative to point 'rp'
    // by the distance 'd'.
    //
    // See APPENDIX on SETRELATIVE at the bottom of this file.
    //
    // p   ... point to set
    // rp  ... reference point
    // d   ... distance on projection vector
    // pv  ... projection vector (undefined = this)
    // org ... if true, uses the original position of rp as reference.
    setRelative: function (p, rp, d, pv, org) {
        if (!pv || pv === this) {
            p.x = (org ? rp.xo : rp.x) + d;
            return;
        }

        var rpx = org ? rp.xo : rp.x;
        var rpy = org ? rp.yo : rp.y;
        var rpdx = rpx + d * pv.x;
        var rpdy = rpy + d * pv.y;

        p.x = rpdx + (p.y - rpdy) / pv.normalSlope;
    },

    // Slope of vector line.
    slope: 0,

    // Touches the point p.
    touch: function (p) {
        p.xTouched = true;
    },

    // Tests if a point p is touched.
    touched: function (p) {
        return p.xTouched;
    },

    // Untouches the point p.
    untouch: function (p) {
        p.xTouched = false;
    }
};

/*
* Unit vector of y-axis.
*/
var yUnitVector = {
    x: 0,

    y: 1,

    axis: 'y',

    // Gets the projected distance between two points.
    // o1/o2 ... if true, respective original position is used.
    distance: function (p1, p2, o1, o2) {
        return (o1 ? p1.yo : p1.y) - (o2 ? p2.yo : p2.y);
    },

    // Moves point p so the moved position has the same relative
    // position to the moved positions of rp1 and rp2 than the
    // original positions had.
    //
    // See APPENDIX on INTERPOLATE at the bottom of this file.
    interpolate: function (p, rp1, rp2, pv) {
        var do1;
        var do2;
        var doa1;
        var doa2;
        var dm1;
        var dm2;
        var dt;

        if (!pv || pv === this) {
            do1 = p.yo - rp1.yo;
            do2 = p.yo - rp2.yo;
            dm1 = rp1.y - rp1.yo;
            dm2 = rp2.y - rp2.yo;
            doa1 = Math.abs(do1);
            doa2 = Math.abs(do2);
            dt = doa1 + doa2;

            if (dt === 0) {
                p.y = p.yo + (dm1 + dm2) / 2;
                return;
            }

            p.y = p.yo + (dm1 * doa2 + dm2 * doa1) / dt;
            return;
        }

        do1 = pv.distance(p, rp1, true, true);
        do2 = pv.distance(p, rp2, true, true);
        dm1 = pv.distance(rp1, rp1, false, true);
        dm2 = pv.distance(rp2, rp2, false, true);
        doa1 = Math.abs(do1);
        doa2 = Math.abs(do2);
        dt = doa1 + doa2;

        if (dt === 0) {
            yUnitVector.setRelative(p, p, (dm1 + dm2) / 2, pv, true);
            return;
        }

        yUnitVector.setRelative(p, p, (dm1 * doa2 + dm2 * doa1) / dt, pv, true);
    },

    // Slope of line normal to this.
    normalSlope: 0,

    // Sets the point 'p' relative to point 'rp'
    // by the distance 'd'
    //
    // See APPENDIX on SETRELATIVE at the bottom of this file.
    //
    // p   ... point to set
    // rp  ... reference point
    // d   ... distance on projection vector
    // pv  ... projection vector (undefined = this)
    // org ... if true, uses the original position of rp as reference.
    setRelative: function (p, rp, d, pv, org) {
        if (!pv || pv === this) {
            p.y = (org ? rp.yo : rp.y) + d;
            return;
        }

        var rpx = org ? rp.xo : rp.x;
        var rpy = org ? rp.yo : rp.y;
        var rpdx = rpx + d * pv.x;
        var rpdy = rpy + d * pv.y;

        p.y = rpdy + pv.normalSlope * (p.x - rpdx);
    },

    // Slope of vector line.
    slope: Number.POSITIVE_INFINITY,

    // Touches the point p.
    touch: function (p) {
        p.yTouched = true;
    },

    // Tests if a point p is touched.
    touched: function (p) {
        return p.yTouched;
    },

    // Untouches the point p.
    untouch: function (p) {
        p.yTouched = false;
    }
};

Object.freeze(xUnitVector);
Object.freeze(yUnitVector);

/*
* Creates a unit vector that is not x- or y-axis.
*/
function UnitVector(x, y) {
    this.x = x;
    this.y = y;
    this.axis = undefined;
    this.slope = y / x;
    this.normalSlope = -x / y;
    Object.freeze(this);
}

/*
* Gets the projected distance between two points.
* o1/o2 ... if true, respective original position is used.
*/
UnitVector.prototype.distance = function(p1, p2, o1, o2) {
    return (
        this.x * xUnitVector.distance(p1, p2, o1, o2) +
        this.y * yUnitVector.distance(p1, p2, o1, o2)
    );
};

/*
* Moves point p so the moved position has the same relative
* position to the moved positions of rp1 and rp2 than the
* original positions had.
*
* See APPENDIX on INTERPOLATE at the bottom of this file.
*/
UnitVector.prototype.interpolate = function(p, rp1, rp2, pv) {
    var dm1;
    var dm2;
    var do1;
    var do2;
    var doa1;
    var doa2;
    var dt;

    do1 = pv.distance(p, rp1, true, true);
    do2 = pv.distance(p, rp2, true, true);
    dm1 = pv.distance(rp1, rp1, false, true);
    dm2 = pv.distance(rp2, rp2, false, true);
    doa1 = Math.abs(do1);
    doa2 = Math.abs(do2);
    dt = doa1 + doa2;

    if (dt === 0) {
        this.setRelative(p, p, (dm1 + dm2) / 2, pv, true);
        return;
    }

    this.setRelative(p, p, (dm1 * doa2 + dm2 * doa1) / dt, pv, true);
};

/*
* Sets the point 'p' relative to point 'rp'
* by the distance 'd'
*
* See APPENDIX on SETRELATIVE at the bottom of this file.
*
* p   ...  point to set
* rp  ... reference point
* d   ... distance on projection vector
* pv  ... projection vector (undefined = this)
* org ... if true, uses the original position of rp as reference.
*/
UnitVector.prototype.setRelative = function(p, rp, d, pv, org) {
    pv = pv || this;

    var rpx = org ? rp.xo : rp.x;
    var rpy = org ? rp.yo : rp.y;
    var rpdx = rpx + d * pv.x;
    var rpdy = rpy + d * pv.y;

    var pvns = pv.normalSlope;
    var fvs = this.slope;

    var px = p.x;
    var py = p.y;

    p.x = (fvs * px - pvns * rpdx + rpdy - py) / (fvs - pvns);
    p.y = fvs * (p.x - px) + py;
};

/*
* Touches the point p.
*/
UnitVector.prototype.touch = function(p) {
    p.xTouched = true;
    p.yTouched = true;
};

/*
* Returns a unit vector with x/y coordinates.
*/
function getUnitVector(x, y) {
    var d = Math.sqrt(x * x + y * y);

    x /= d;
    y /= d;

    if (x === 1 && y === 0) { return xUnitVector; }
    else if (x === 0 && y === 1) { return yUnitVector; }
    else { return new UnitVector(x, y); }
}

/*
* Creates a point in the hinting engine.
*/
function HPoint(
    x,
    y,
    lastPointOfContour,
    onCurve
) {
    this.x = this.xo = Math.round(x * 64) / 64; // hinted x value and original x-value
    this.y = this.yo = Math.round(y * 64) / 64; // hinted y value and original y-value

    this.lastPointOfContour = lastPointOfContour;
    this.onCurve = onCurve;
    this.prevPointOnContour = undefined;
    this.nextPointOnContour = undefined;
    this.xTouched = false;
    this.yTouched = false;

    Object.preventExtensions(this);
}

/*
* Returns the next touched point on the contour.
*
* v  ... unit vector to test touch axis.
*/
HPoint.prototype.nextTouched = function(v) {
    var p = this.nextPointOnContour;

    while (!v.touched(p) && p !== this) { p = p.nextPointOnContour; }

    return p;
};

/*
* Returns the previous touched point on the contour
*
* v  ... unit vector to test touch axis.
*/
HPoint.prototype.prevTouched = function(v) {
    var p = this.prevPointOnContour;

    while (!v.touched(p) && p !== this) { p = p.prevPointOnContour; }

    return p;
};

/*
* The zero point.
*/
var HPZero = Object.freeze(new HPoint(0, 0));

/*
* The default state of the interpreter.
*
* Note: Freezing the defaultState and then deriving from it
* makes the V8 Javascript engine going awkward,
* so this is avoided, albeit the defaultState shouldn't
* ever change.
*/
var defaultState = {
    cvCutIn: 17 / 16,    // control value cut in
    deltaBase: 9,
    deltaShift: 0.125,
    loop: 1,             // loops some instructions
    minDis: 1,           // minimum distance
    autoFlip: true
};

/*
* The current state of the interpreter.
*
* env  ... 'fpgm' or 'prep' or 'glyf'
* prog ... the program
*/
function State(env, prog) {
    this.env = env;
    this.stack = [];
    this.prog = prog;

    switch (env) {
        case 'glyf' :
            this.zp0 = this.zp1 = this.zp2 = 1;
            this.rp0 = this.rp1 = this.rp2 = 0;
            /* fall through */
        case 'prep' :
            this.fv = this.pv = this.dpv = xUnitVector;
            this.round = roundToGrid;
    }
}

/*
* Executes a glyph program.
*
* This does the hinting for each glyph.
*
* Returns an array of moved points.
*
* glyph: the glyph to hint
* ppem: the size the glyph is rendered for
*/
Hinting.prototype.exec = function(glyph, ppem) {
    if (typeof ppem !== 'number') {
        throw new Error('Point size is not a number!');
    }

    // Received a fatal error, don't do any hinting anymore.
    if (this._errorState > 2) { return; }

    var font = this.font;
    var prepState = this._prepState;

    if (!prepState || prepState.ppem !== ppem) {
        var fpgmState = this._fpgmState;

        if (!fpgmState) {
            // Executes the fpgm state.
            // This is used by fonts to define functions.
            State.prototype = defaultState;

            fpgmState =
            this._fpgmState =
                new State('fpgm', font.tables.fpgm);

            fpgmState.funcs = [ ];
            fpgmState.font = font;

            if (exports.DEBUG) {
                console.log('---EXEC FPGM---');
                fpgmState.step = -1;
            }

            try {
                exec(fpgmState);
            } catch (e) {
                console.log('Hinting error in FPGM:' + e);
                this._errorState = 3;
                return;
            }
        }

        // Executes the prep program for this ppem setting.
        // This is used by fonts to set cvt values
        // depending on to be rendered font size.

        State.prototype = fpgmState;
        prepState =
        this._prepState =
            new State('prep', font.tables.prep);

        prepState.ppem = ppem;

        // Creates a copy of the cvt table
        // and scales it to the current ppem setting.
        var oCvt = font.tables.cvt;
        if (oCvt) {
            var cvt = prepState.cvt = new Array(oCvt.length);
            var scale = ppem / font.unitsPerEm;
            for (var c = 0; c < oCvt.length; c++) {
                cvt[c] = oCvt[c] * scale;
            }
        } else {
            prepState.cvt = [];
        }

        if (exports.DEBUG) {
            console.log('---EXEC PREP---');
            prepState.step = -1;
        }

        try {
            exec(prepState);
        } catch (e) {
            if (this._errorState < 2) {
                console.log('Hinting error in PREP:' + e);
            }
            this._errorState = 2;
        }
    }

    if (this._errorState > 1) { return; }

    try {
        return execGlyph(glyph, prepState);
    } catch (e) {
        if (this._errorState < 1) {
            console.log('Hinting error:' + e);
            console.log('Note: further hinting errors are silenced');
        }
        this._errorState = 1;
        return undefined;
    }
};

/*
* Executes the hinting program for a glyph.
*/
execGlyph = function(glyph, prepState) {
    // original point positions
    var xScale = prepState.ppem / prepState.font.unitsPerEm;
    var yScale = xScale;
    var components = glyph.components;
    var contours;
    var gZone;
    var state;

    State.prototype = prepState;
    if (!components) {
        state = new State('glyf', glyph.instructions);
        if (exports.DEBUG) {
            console.log('---EXEC GLYPH---');
            state.step = -1;
        }
        execComponent(glyph, state, xScale, yScale);
        gZone = state.gZone;
    } else {
        var font = prepState.font;
        gZone = [];
        contours = [];
        for (var i = 0; i < components.length; i++) {
            var c = components[i];
            var cg = font.glyphs.get(c.glyphIndex);

            state = new State('glyf', cg.instructions);

            if (exports.DEBUG) {
                console.log('---EXEC COMP ' + i + '---');
                state.step = -1;
            }

            execComponent(cg, state, xScale, yScale);
            // appends the computed points to the result array
            // post processes the component points
            var dx = Math.round(c.dx * xScale);
            var dy = Math.round(c.dy * yScale);
            var gz = state.gZone;
            var cc = state.contours;
            for (var pi = 0; pi < gz.length; pi++) {
                var p = gz[pi];
                p.xTouched = p.yTouched = false;
                p.xo = p.x = p.x + dx;
                p.yo = p.y = p.y + dy;
            }

            var gLen = gZone.length;
            gZone.push.apply(gZone, gz);
            for (var j = 0; j < cc.length; j++) {
                contours.push(cc[j] + gLen);
            }
        }

        if (glyph.instructions && !state.inhibitGridFit) {
            // the composite has instructions on its own
            state = new State('glyf', glyph.instructions);

            state.gZone = state.z0 = state.z1 = state.z2 = gZone;

            state.contours = contours;

            // note: HPZero cannot be used here, since
            //       the point might be modified
            gZone.push(
                new HPoint(0, 0),
                new HPoint(Math.round(glyph.advanceWidth * xScale), 0)
            );

            if (exports.DEBUG) {
                console.log('---EXEC COMPOSITE---');
                state.step = -1;
            }

            exec(state);

            gZone.length -= 2;
        }
    }

    return gZone;
};

/*
* Executes the hinting program for a component of a multi-component glyph
* or of the glyph itself for a non-component glyph.
*/
execComponent = function(glyph, state, xScale, yScale)
{
    var points = glyph.points || [];
    var pLen = points.length;
    var gZone = state.gZone = state.z0 = state.z1 = state.z2 = [];
    var contours = state.contours = [];

    // Scales the original points and
    // makes copies for the hinted points.
    var cp; // current point
    for (var i = 0; i < pLen; i++) {
        cp = points[i];

        gZone[i] = new HPoint(
            cp.x * xScale,
            cp.y * yScale,
            cp.lastPointOfContour,
            cp.onCurve
        );
    }

    // Chain links the contours.
    var sp; // start point
    var np; // next point

    for (var i$1 = 0; i$1 < pLen; i$1++) {
        cp = gZone[i$1];

        if (!sp) {
            sp = cp;
            contours.push(i$1);
        }

        if (cp.lastPointOfContour) {
            cp.nextPointOnContour = sp;
            sp.prevPointOnContour = cp;
            sp = undefined;
        } else {
            np = gZone[i$1 + 1];
            cp.nextPointOnContour = np;
            np.prevPointOnContour = cp;
        }
    }

    if (state.inhibitGridFit) { return; }

    if (exports.DEBUG) {
        console.log('PROCESSING GLYPH', state.stack);
        for (var i$2 = 0; i$2 < pLen; i$2++) {
            console.log(i$2, gZone[i$2].x, gZone[i$2].y);
        }
    }

    gZone.push(
        new HPoint(0, 0),
        new HPoint(Math.round(glyph.advanceWidth * xScale), 0)
    );

    exec(state);

    // Removes the extra points.
    gZone.length -= 2;

    if (exports.DEBUG) {
        console.log('FINISHED GLYPH', state.stack);
        for (var i$3 = 0; i$3 < pLen; i$3++) {
            console.log(i$3, gZone[i$3].x, gZone[i$3].y);
        }
    }
};

/*
* Executes the program loaded in state.
*/
exec = function(state) {
    var prog = state.prog;

    if (!prog) { return; }

    var pLen = prog.length;
    var ins;

    for (state.ip = 0; state.ip < pLen; state.ip++) {
        if (exports.DEBUG) { state.step++; }
        ins = instructionTable[prog[state.ip]];

        if (!ins) {
            throw new Error(
                'unknown instruction: 0x' +
                Number(prog[state.ip]).toString(16)
            );
        }

        ins(state);

        // very extensive debugging for each step
        /*
        if (exports.DEBUG) {
            var da;
            if (state.gZone) {
                da = [];
                for (let i = 0; i < state.gZone.length; i++)
                {
                    da.push(i + ' ' +
                        state.gZone[i].x * 64 + ' ' +
                        state.gZone[i].y * 64 + ' ' +
                        (state.gZone[i].xTouched ? 'x' : '') +
                        (state.gZone[i].yTouched ? 'y' : '')
                    );
                }
                console.log('GZ', da);
            }

            if (state.tZone) {
                da = [];
                for (let i = 0; i < state.tZone.length; i++) {
                    da.push(i + ' ' +
                        state.tZone[i].x * 64 + ' ' +
                        state.tZone[i].y * 64 + ' ' +
                        (state.tZone[i].xTouched ? 'x' : '') +
                        (state.tZone[i].yTouched ? 'y' : '')
                    );
                }
                console.log('TZ', da);
            }

            if (state.stack.length > 10) {
                console.log(
                    state.stack.length,
                    '...', state.stack.slice(state.stack.length - 10)
                );
            } else {
                console.log(state.stack.length, state.stack);
            }
        }
        */
    }
};

/*
* Initializes the twilight zone.
*
* This is only done if a SZPx instruction
* refers to the twilight zone.
*/
function initTZone(state)
{
    var tZone = state.tZone = new Array(state.gZone.length);

    // no idea if this is actually correct...
    for (var i = 0; i < tZone.length; i++)
    {
        tZone[i] = new HPoint(0, 0);
    }
}

/*
* Skips the instruction pointer ahead over an IF/ELSE block.
* handleElse .. if true breaks on matching ELSE
*/
function skip(state, handleElse)
{
    var prog = state.prog;
    var ip = state.ip;
    var nesting = 1;
    var ins;

    do {
        ins = prog[++ip];
        if (ins === 0x58) // IF
            { nesting++; }
        else if (ins === 0x59) // EIF
            { nesting--; }
        else if (ins === 0x40) // NPUSHB
            { ip += prog[ip + 1] + 1; }
        else if (ins === 0x41) // NPUSHW
            { ip += 2 * prog[ip + 1] + 1; }
        else if (ins >= 0xB0 && ins <= 0xB7) // PUSHB
            { ip += ins - 0xB0 + 1; }
        else if (ins >= 0xB8 && ins <= 0xBF) // PUSHW
            { ip += (ins - 0xB8 + 1) * 2; }
        else if (handleElse && nesting === 1 && ins === 0x1B) // ELSE
            { break; }
    } while (nesting > 0);

    state.ip = ip;
}

/*----------------------------------------------------------*
*          And then a lot of instructions...                *
*----------------------------------------------------------*/

// SVTCA[a] Set freedom and projection Vectors To Coordinate Axis
// 0x00-0x01
function SVTCA(v, state) {
    if (exports.DEBUG) { console.log(state.step, 'SVTCA[' + v.axis + ']'); }

    state.fv = state.pv = state.dpv = v;
}

// SPVTCA[a] Set Projection Vector to Coordinate Axis
// 0x02-0x03
function SPVTCA(v, state) {
    if (exports.DEBUG) { console.log(state.step, 'SPVTCA[' + v.axis + ']'); }

    state.pv = state.dpv = v;
}

// SFVTCA[a] Set Freedom Vector to Coordinate Axis
// 0x04-0x05
function SFVTCA(v, state) {
    if (exports.DEBUG) { console.log(state.step, 'SFVTCA[' + v.axis + ']'); }

    state.fv = v;
}

// SPVTL[a] Set Projection Vector To Line
// 0x06-0x07
function SPVTL(a, state) {
    var stack = state.stack;
    var p2i = stack.pop();
    var p1i = stack.pop();
    var p2 = state.z2[p2i];
    var p1 = state.z1[p1i];

    if (exports.DEBUG) { console.log('SPVTL[' + a + ']', p2i, p1i); }

    var dx;
    var dy;

    if (!a) {
        dx = p1.x - p2.x;
        dy = p1.y - p2.y;
    } else {
        dx = p2.y - p1.y;
        dy = p1.x - p2.x;
    }

    state.pv = state.dpv = getUnitVector(dx, dy);
}

// SFVTL[a] Set Freedom Vector To Line
// 0x08-0x09
function SFVTL(a, state) {
    var stack = state.stack;
    var p2i = stack.pop();
    var p1i = stack.pop();
    var p2 = state.z2[p2i];
    var p1 = state.z1[p1i];

    if (exports.DEBUG) { console.log('SFVTL[' + a + ']', p2i, p1i); }

    var dx;
    var dy;

    if (!a) {
        dx = p1.x - p2.x;
        dy = p1.y - p2.y;
    } else {
        dx = p2.y - p1.y;
        dy = p1.x - p2.x;
    }

    state.fv = getUnitVector(dx, dy);
}

// SPVFS[] Set Projection Vector From Stack
// 0x0A
function SPVFS(state) {
    var stack = state.stack;
    var y = stack.pop();
    var x = stack.pop();

    if (exports.DEBUG) { console.log(state.step, 'SPVFS[]', y, x); }

    state.pv = state.dpv = getUnitVector(x, y);
}

// SFVFS[] Set Freedom Vector From Stack
// 0x0B
function SFVFS(state) {
    var stack = state.stack;
    var y = stack.pop();
    var x = stack.pop();

    if (exports.DEBUG) { console.log(state.step, 'SPVFS[]', y, x); }

    state.fv = getUnitVector(x, y);
}

// GPV[] Get Projection Vector
// 0x0C
function GPV(state) {
    var stack = state.stack;
    var pv = state.pv;

    if (exports.DEBUG) { console.log(state.step, 'GPV[]'); }

    stack.push(pv.x * 0x4000);
    stack.push(pv.y * 0x4000);
}

// GFV[] Get Freedom Vector
// 0x0C
function GFV(state) {
    var stack = state.stack;
    var fv = state.fv;

    if (exports.DEBUG) { console.log(state.step, 'GFV[]'); }

    stack.push(fv.x * 0x4000);
    stack.push(fv.y * 0x4000);
}

// SFVTPV[] Set Freedom Vector To Projection Vector
// 0x0E
function SFVTPV(state) {
    state.fv = state.pv;

    if (exports.DEBUG) { console.log(state.step, 'SFVTPV[]'); }
}

// ISECT[] moves point p to the InterSECTion of two lines
// 0x0F
function ISECT(state)
{
    var stack = state.stack;
    var pa0i = stack.pop();
    var pa1i = stack.pop();
    var pb0i = stack.pop();
    var pb1i = stack.pop();
    var pi = stack.pop();
    var z0 = state.z0;
    var z1 = state.z1;
    var pa0 = z0[pa0i];
    var pa1 = z0[pa1i];
    var pb0 = z1[pb0i];
    var pb1 = z1[pb1i];
    var p = state.z2[pi];

    if (exports.DEBUG) { console.log('ISECT[], ', pa0i, pa1i, pb0i, pb1i, pi); }

    // math from
    // en.wikipedia.org/wiki/Line%E2%80%93line_intersection#Given_two_points_on_each_line

    var x1 = pa0.x;
    var y1 = pa0.y;
    var x2 = pa1.x;
    var y2 = pa1.y;
    var x3 = pb0.x;
    var y3 = pb0.y;
    var x4 = pb1.x;
    var y4 = pb1.y;

    var div = (x1 - x2) * (y3 - y4) - (y1 - y2) * (x3 - x4);
    var f1 = x1 * y2 - y1 * x2;
    var f2 = x3 * y4 - y3 * x4;

    p.x = (f1 * (x3 - x4) - f2 * (x1 - x2)) / div;
    p.y = (f1 * (y3 - y4) - f2 * (y1 - y2)) / div;
}

// SRP0[] Set Reference Point 0
// 0x10
function SRP0(state) {
    state.rp0 = state.stack.pop();

    if (exports.DEBUG) { console.log(state.step, 'SRP0[]', state.rp0); }
}

// SRP1[] Set Reference Point 1
// 0x11
function SRP1(state) {
    state.rp1 = state.stack.pop();

    if (exports.DEBUG) { console.log(state.step, 'SRP1[]', state.rp1); }
}

// SRP1[] Set Reference Point 2
// 0x12
function SRP2(state) {
    state.rp2 = state.stack.pop();

    if (exports.DEBUG) { console.log(state.step, 'SRP2[]', state.rp2); }
}

// SZP0[] Set Zone Pointer 0
// 0x13
function SZP0(state) {
    var n = state.stack.pop();

    if (exports.DEBUG) { console.log(state.step, 'SZP0[]', n); }

    state.zp0 = n;

    switch (n) {
        case 0:
            if (!state.tZone) { initTZone(state); }
            state.z0 = state.tZone;
            break;
        case 1 :
            state.z0 = state.gZone;
            break;
        default :
            throw new Error('Invalid zone pointer');
    }
}

// SZP1[] Set Zone Pointer 1
// 0x14
function SZP1(state) {
    var n = state.stack.pop();

    if (exports.DEBUG) { console.log(state.step, 'SZP1[]', n); }

    state.zp1 = n;

    switch (n) {
        case 0:
            if (!state.tZone) { initTZone(state); }
            state.z1 = state.tZone;
            break;
        case 1 :
            state.z1 = state.gZone;
            break;
        default :
            throw new Error('Invalid zone pointer');
    }
}

// SZP2[] Set Zone Pointer 2
// 0x15
function SZP2(state) {
    var n = state.stack.pop();

    if (exports.DEBUG) { console.log(state.step, 'SZP2[]', n); }

    state.zp2 = n;

    switch (n) {
        case 0:
            if (!state.tZone) { initTZone(state); }
            state.z2 = state.tZone;
            break;
        case 1 :
            state.z2 = state.gZone;
            break;
        default :
            throw new Error('Invalid zone pointer');
    }
}

// SZPS[] Set Zone PointerS
// 0x16
function SZPS(state) {
    var n = state.stack.pop();

    if (exports.DEBUG) { console.log(state.step, 'SZPS[]', n); }

    state.zp0 = state.zp1 = state.zp2 = n;

    switch (n) {
        case 0:
            if (!state.tZone) { initTZone(state); }
            state.z0 = state.z1 = state.z2 = state.tZone;
            break;
        case 1 :
            state.z0 = state.z1 = state.z2 = state.gZone;
            break;
        default :
            throw new Error('Invalid zone pointer');
    }
}

// SLOOP[] Set LOOP variable
// 0x17
function SLOOP(state) {
    state.loop = state.stack.pop();

    if (exports.DEBUG) { console.log(state.step, 'SLOOP[]', state.loop); }
}

// RTG[] Round To Grid
// 0x18
function RTG(state) {
    if (exports.DEBUG) { console.log(state.step, 'RTG[]'); }

    state.round = roundToGrid;
}

// RTHG[] Round To Half Grid
// 0x19
function RTHG(state) {
    if (exports.DEBUG) { console.log(state.step, 'RTHG[]'); }

    state.round = roundToHalfGrid;
}

// SMD[] Set Minimum Distance
// 0x1A
function SMD(state) {
    var d = state.stack.pop();

    if (exports.DEBUG) { console.log(state.step, 'SMD[]', d); }

    state.minDis = d / 0x40;
}

// ELSE[] ELSE clause
// 0x1B
function ELSE(state) {
    // This instruction has been reached by executing a then branch
    // so it just skips ahead until matching EIF.
    //
    // In case the IF was negative the IF[] instruction already
    // skipped forward over the ELSE[]

    if (exports.DEBUG) { console.log(state.step, 'ELSE[]'); }

    skip(state, false);
}

// JMPR[] JuMP Relative
// 0x1C
function JMPR(state) {
    var o = state.stack.pop();

    if (exports.DEBUG) { console.log(state.step, 'JMPR[]', o); }

    // A jump by 1 would do nothing.
    state.ip += o - 1;
}

// SCVTCI[] Set Control Value Table Cut-In
// 0x1D
function SCVTCI(state) {
    var n = state.stack.pop();

    if (exports.DEBUG) { console.log(state.step, 'SCVTCI[]', n); }

    state.cvCutIn = n / 0x40;
}

// DUP[] DUPlicate top stack element
// 0x20
function DUP(state) {
    var stack = state.stack;

    if (exports.DEBUG) { console.log(state.step, 'DUP[]'); }

    stack.push(stack[stack.length - 1]);
}

// POP[] POP top stack element
// 0x21
function POP(state) {
    if (exports.DEBUG) { console.log(state.step, 'POP[]'); }

    state.stack.pop();
}

// CLEAR[] CLEAR the stack
// 0x22
function CLEAR(state) {
    if (exports.DEBUG) { console.log(state.step, 'CLEAR[]'); }

    state.stack.length = 0;
}

// SWAP[] SWAP the top two elements on the stack
// 0x23
function SWAP(state) {
    var stack = state.stack;

    var a = stack.pop();
    var b = stack.pop();

    if (exports.DEBUG) { console.log(state.step, 'SWAP[]'); }

    stack.push(a);
    stack.push(b);
}

// DEPTH[] DEPTH of the stack
// 0x24
function DEPTH(state) {
    var stack = state.stack;

    if (exports.DEBUG) { console.log(state.step, 'DEPTH[]'); }

    stack.push(stack.length);
}

// LOOPCALL[] LOOPCALL function
// 0x2A
function LOOPCALL(state) {
    var stack = state.stack;
    var fn = stack.pop();
    var c = stack.pop();

    if (exports.DEBUG) { console.log(state.step, 'LOOPCALL[]', fn, c); }

    // saves callers program
    var cip = state.ip;
    var cprog = state.prog;

    state.prog = state.funcs[fn];

    // executes the function
    for (var i = 0; i < c; i++) {
        exec(state);

        if (exports.DEBUG) { console.log(
            ++state.step,
            i + 1 < c ? 'next loopcall' : 'done loopcall',
            i
        ); }
    }

    // restores the callers program
    state.ip = cip;
    state.prog = cprog;
}

// CALL[] CALL function
// 0x2B
function CALL(state) {
    var fn = state.stack.pop();

    if (exports.DEBUG) { console.log(state.step, 'CALL[]', fn); }

    // saves callers program
    var cip = state.ip;
    var cprog = state.prog;

    state.prog = state.funcs[fn];

    // executes the function
    exec(state);

    // restores the callers program
    state.ip = cip;
    state.prog = cprog;

    if (exports.DEBUG) { console.log(++state.step, 'returning from', fn); }
}

// CINDEX[] Copy the INDEXed element to the top of the stack
// 0x25
function CINDEX(state) {
    var stack = state.stack;
    var k = stack.pop();

    if (exports.DEBUG) { console.log(state.step, 'CINDEX[]', k); }

    // In case of k == 1, it copies the last element after popping
    // thus stack.length - k.
    stack.push(stack[stack.length - k]);
}

// MINDEX[] Move the INDEXed element to the top of the stack
// 0x26
function MINDEX(state) {
    var stack = state.stack;
    var k = stack.pop();

    if (exports.DEBUG) { console.log(state.step, 'MINDEX[]', k); }

    stack.push(stack.splice(stack.length - k, 1)[0]);
}

// FDEF[] Function DEFinition
// 0x2C
function FDEF(state) {
    if (state.env !== 'fpgm') { throw new Error('FDEF not allowed here'); }
    var stack = state.stack;
    var prog = state.prog;
    var ip = state.ip;

    var fn = stack.pop();
    var ipBegin = ip;

    if (exports.DEBUG) { console.log(state.step, 'FDEF[]', fn); }

    while (prog[++ip] !== 0x2D){ }

    state.ip = ip;
    state.funcs[fn] = prog.slice(ipBegin + 1, ip);
}

// MDAP[a] Move Direct Absolute Point
// 0x2E-0x2F
function MDAP(round, state) {
    var pi = state.stack.pop();
    var p = state.z0[pi];
    var fv = state.fv;
    var pv = state.pv;

    if (exports.DEBUG) { console.log(state.step, 'MDAP[' + round + ']', pi); }

    var d = pv.distance(p, HPZero);

    if (round) { d = state.round(d); }

    fv.setRelative(p, HPZero, d, pv);
    fv.touch(p);

    state.rp0 = state.rp1 = pi;
}

// IUP[a] Interpolate Untouched Points through the outline
// 0x30
function IUP(v, state) {
    var z2 = state.z2;
    var pLen = z2.length - 2;
    var cp;
    var pp;
    var np;

    if (exports.DEBUG) { console.log(state.step, 'IUP[' + v.axis + ']'); }

    for (var i = 0; i < pLen; i++) {
        cp = z2[i]; // current point

        // if this point has been touched go on
        if (v.touched(cp)) { continue; }

        pp = cp.prevTouched(v);

        // no point on the contour has been touched?
        if (pp === cp) { continue; }

        np = cp.nextTouched(v);

        if (pp === np) {
            // only one point on the contour has been touched
            // so simply moves the point like that

            v.setRelative(cp, cp, v.distance(pp, pp, false, true), v, true);
        }

        v.interpolate(cp, pp, np, v);
    }
}

// SHP[] SHift Point using reference point
// 0x32-0x33
function SHP(a, state) {
    var stack = state.stack;
    var rpi = a ? state.rp1 : state.rp2;
    var rp = (a ? state.z0 : state.z1)[rpi];
    var fv = state.fv;
    var pv = state.pv;
    var loop = state.loop;
    var z2 = state.z2;

    while (loop--)
    {
        var pi = stack.pop();
        var p = z2[pi];

        var d = pv.distance(rp, rp, false, true);
        fv.setRelative(p, p, d, pv);
        fv.touch(p);

        if (exports.DEBUG) {
            console.log(
                state.step,
                (state.loop > 1 ?
                   'loop ' + (state.loop - loop) + ': ' :
                   ''
                ) +
                'SHP[' + (a ? 'rp1' : 'rp2') + ']', pi
            );
        }
    }

    state.loop = 1;
}

// SHC[] SHift Contour using reference point
// 0x36-0x37
function SHC(a, state) {
    var stack = state.stack;
    var rpi = a ? state.rp1 : state.rp2;
    var rp = (a ? state.z0 : state.z1)[rpi];
    var fv = state.fv;
    var pv = state.pv;
    var ci = stack.pop();
    var sp = state.z2[state.contours[ci]];
    var p = sp;

    if (exports.DEBUG) { console.log(state.step, 'SHC[' + a + ']', ci); }

    var d = pv.distance(rp, rp, false, true);

    do {
        if (p !== rp) { fv.setRelative(p, p, d, pv); }
        p = p.nextPointOnContour;
    } while (p !== sp);
}

// SHZ[] SHift Zone using reference point
// 0x36-0x37
function SHZ(a, state) {
    var stack = state.stack;
    var rpi = a ? state.rp1 : state.rp2;
    var rp = (a ? state.z0 : state.z1)[rpi];
    var fv = state.fv;
    var pv = state.pv;

    var e = stack.pop();

    if (exports.DEBUG) { console.log(state.step, 'SHZ[' + a + ']', e); }

    var z;
    switch (e) {
        case 0 : z = state.tZone; break;
        case 1 : z = state.gZone; break;
        default : throw new Error('Invalid zone');
    }

    var p;
    var d = pv.distance(rp, rp, false, true);
    var pLen = z.length - 2;
    for (var i = 0; i < pLen; i++)
    {
        p = z[i];
        fv.setRelative(p, p, d, pv);
        //if (p !== rp) fv.setRelative(p, p, d, pv);
    }
}

// SHPIX[] SHift point by a PIXel amount
// 0x38
function SHPIX(state) {
    var stack = state.stack;
    var loop = state.loop;
    var fv = state.fv;
    var d = stack.pop() / 0x40;
    var z2 = state.z2;

    while (loop--) {
        var pi = stack.pop();
        var p = z2[pi];

        if (exports.DEBUG) {
            console.log(
                state.step,
                (state.loop > 1 ? 'loop ' + (state.loop - loop) + ': ' : '') +
                'SHPIX[]', pi, d
            );
        }

        fv.setRelative(p, p, d);
        fv.touch(p);
    }

    state.loop = 1;
}

// IP[] Interpolate Point
// 0x39
function IP(state) {
    var stack = state.stack;
    var rp1i = state.rp1;
    var rp2i = state.rp2;
    var loop = state.loop;
    var rp1 = state.z0[rp1i];
    var rp2 = state.z1[rp2i];
    var fv = state.fv;
    var pv = state.dpv;
    var z2 = state.z2;

    while (loop--) {
        var pi = stack.pop();
        var p = z2[pi];

        if (exports.DEBUG) {
            console.log(
                state.step,
                (state.loop > 1 ? 'loop ' + (state.loop - loop) + ': ' : '') +
                'IP[]', pi, rp1i, '<->', rp2i
            );
        }

        fv.interpolate(p, rp1, rp2, pv);

        fv.touch(p);
    }

    state.loop = 1;
}

// MSIRP[a] Move Stack Indirect Relative Point
// 0x3A-0x3B
function MSIRP(a, state) {
    var stack = state.stack;
    var d = stack.pop() / 64;
    var pi = stack.pop();
    var p = state.z1[pi];
    var rp0 = state.z0[state.rp0];
    var fv = state.fv;
    var pv = state.pv;

    fv.setRelative(p, rp0, d, pv);
    fv.touch(p);

    if (exports.DEBUG) { console.log(state.step, 'MSIRP[' + a + ']', d, pi); }

    state.rp1 = state.rp0;
    state.rp2 = pi;
    if (a) { state.rp0 = pi; }
}

// ALIGNRP[] Align to reference point.
// 0x3C
function ALIGNRP(state) {
    var stack = state.stack;
    var rp0i = state.rp0;
    var rp0 = state.z0[rp0i];
    var loop = state.loop;
    var fv = state.fv;
    var pv = state.pv;
    var z1 = state.z1;

    while (loop--) {
        var pi = stack.pop();
        var p = z1[pi];

        if (exports.DEBUG) {
            console.log(
                state.step,
                (state.loop > 1 ? 'loop ' + (state.loop - loop) + ': ' : '') +
                'ALIGNRP[]', pi
            );
        }

        fv.setRelative(p, rp0, 0, pv);
        fv.touch(p);
    }

    state.loop = 1;
}

// RTG[] Round To Double Grid
// 0x3D
function RTDG(state) {
    if (exports.DEBUG) { console.log(state.step, 'RTDG[]'); }

    state.round = roundToDoubleGrid;
}

// MIAP[a] Move Indirect Absolute Point
// 0x3E-0x3F
function MIAP(round, state) {
    var stack = state.stack;
    var n = stack.pop();
    var pi = stack.pop();
    var p = state.z0[pi];
    var fv = state.fv;
    var pv = state.pv;
    var cv = state.cvt[n];

    if (exports.DEBUG) {
        console.log(
            state.step,
            'MIAP[' + round + ']',
            n, '(', cv, ')', pi
        );
    }

    var d = pv.distance(p, HPZero);

    if (round) {
        if (Math.abs(d - cv) < state.cvCutIn) { d = cv; }

        d = state.round(d);
    }

    fv.setRelative(p, HPZero, d, pv);

    if (state.zp0 === 0) {
        p.xo = p.x;
        p.yo = p.y;
    }

    fv.touch(p);

    state.rp0 = state.rp1 = pi;
}

// NPUSB[] PUSH N Bytes
// 0x40
function NPUSHB(state) {
    var prog = state.prog;
    var ip = state.ip;
    var stack = state.stack;

    var n = prog[++ip];

    if (exports.DEBUG) { console.log(state.step, 'NPUSHB[]', n); }

    for (var i = 0; i < n; i++) { stack.push(prog[++ip]); }

    state.ip = ip;
}

// NPUSHW[] PUSH N Words
// 0x41
function NPUSHW(state) {
    var ip = state.ip;
    var prog = state.prog;
    var stack = state.stack;
    var n = prog[++ip];

    if (exports.DEBUG) { console.log(state.step, 'NPUSHW[]', n); }

    for (var i = 0; i < n; i++) {
        var w = (prog[++ip] << 8) | prog[++ip];
        if (w & 0x8000) { w = -((w ^ 0xffff) + 1); }
        stack.push(w);
    }

    state.ip = ip;
}

// WS[] Write Store
// 0x42
function WS(state) {
    var stack = state.stack;
    var store = state.store;

    if (!store) { store = state.store = []; }

    var v = stack.pop();
    var l = stack.pop();

    if (exports.DEBUG) { console.log(state.step, 'WS', v, l); }

    store[l] = v;
}

// RS[] Read Store
// 0x43
function RS(state) {
    var stack = state.stack;
    var store = state.store;

    var l = stack.pop();

    if (exports.DEBUG) { console.log(state.step, 'RS', l); }

    var v = (store && store[l]) || 0;

    stack.push(v);
}

// WCVTP[] Write Control Value Table in Pixel units
// 0x44
function WCVTP(state) {
    var stack = state.stack;

    var v = stack.pop();
    var l = stack.pop();

    if (exports.DEBUG) { console.log(state.step, 'WCVTP', v, l); }

    state.cvt[l] = v / 0x40;
}

// RCVT[] Read Control Value Table entry
// 0x45
function RCVT(state) {
    var stack = state.stack;
    var cvte = stack.pop();

    if (exports.DEBUG) { console.log(state.step, 'RCVT', cvte); }

    stack.push(state.cvt[cvte] * 0x40);
}

// GC[] Get Coordinate projected onto the projection vector
// 0x46-0x47
function GC(a, state) {
    var stack = state.stack;
    var pi = stack.pop();
    var p = state.z2[pi];

    if (exports.DEBUG) { console.log(state.step, 'GC[' + a + ']', pi); }

    stack.push(state.dpv.distance(p, HPZero, a, false) * 0x40);
}

// MD[a] Measure Distance
// 0x49-0x4A
function MD(a, state) {
    var stack = state.stack;
    var pi2 = stack.pop();
    var pi1 = stack.pop();
    var p2 = state.z1[pi2];
    var p1 = state.z0[pi1];
    var d = state.dpv.distance(p1, p2, a, a);

    if (exports.DEBUG) { console.log(state.step, 'MD[' + a + ']', pi2, pi1, '->', d); }

    state.stack.push(Math.round(d * 64));
}

// MPPEM[] Measure Pixels Per EM
// 0x4B
function MPPEM(state) {
    if (exports.DEBUG) { console.log(state.step, 'MPPEM[]'); }
    state.stack.push(state.ppem);
}

// FLIPON[] set the auto FLIP Boolean to ON
// 0x4D
function FLIPON(state) {
    if (exports.DEBUG) { console.log(state.step, 'FLIPON[]'); }
    state.autoFlip = true;
}

// LT[] Less Than
// 0x50
function LT(state) {
    var stack = state.stack;
    var e2 = stack.pop();
    var e1 = stack.pop();

    if (exports.DEBUG) { console.log(state.step, 'LT[]', e2, e1); }

    stack.push(e1 < e2 ? 1 : 0);
}

// LTEQ[] Less Than or EQual
// 0x53
function LTEQ(state) {
    var stack = state.stack;
    var e2 = stack.pop();
    var e1 = stack.pop();

    if (exports.DEBUG) { console.log(state.step, 'LTEQ[]', e2, e1); }

    stack.push(e1 <= e2 ? 1 : 0);
}

// GTEQ[] Greater Than
// 0x52
function GT(state) {
    var stack = state.stack;
    var e2 = stack.pop();
    var e1 = stack.pop();

    if (exports.DEBUG) { console.log(state.step, 'GT[]', e2, e1); }

    stack.push(e1 > e2 ? 1 : 0);
}

// GTEQ[] Greater Than or EQual
// 0x53
function GTEQ(state) {
    var stack = state.stack;
    var e2 = stack.pop();
    var e1 = stack.pop();

    if (exports.DEBUG) { console.log(state.step, 'GTEQ[]', e2, e1); }

    stack.push(e1 >= e2 ? 1 : 0);
}

// EQ[] EQual
// 0x54
function EQ(state) {
    var stack = state.stack;
    var e2 = stack.pop();
    var e1 = stack.pop();

    if (exports.DEBUG) { console.log(state.step, 'EQ[]', e2, e1); }

    stack.push(e2 === e1 ? 1 : 0);
}

// NEQ[] Not EQual
// 0x55
function NEQ(state) {
    var stack = state.stack;
    var e2 = stack.pop();
    var e1 = stack.pop();

    if (exports.DEBUG) { console.log(state.step, 'NEQ[]', e2, e1); }

    stack.push(e2 !== e1 ? 1 : 0);
}

// ODD[] ODD
// 0x56
function ODD(state) {
    var stack = state.stack;
    var n = stack.pop();

    if (exports.DEBUG) { console.log(state.step, 'ODD[]', n); }

    stack.push(Math.trunc(n) % 2 ? 1 : 0);
}

// EVEN[] EVEN
// 0x57
function EVEN(state) {
    var stack = state.stack;
    var n = stack.pop();

    if (exports.DEBUG) { console.log(state.step, 'EVEN[]', n); }

    stack.push(Math.trunc(n) % 2 ? 0 : 1);
}

// IF[] IF test
// 0x58
function IF(state) {
    var test = state.stack.pop();

    if (exports.DEBUG) { console.log(state.step, 'IF[]', test); }

    // if test is true it just continues
    // if not the ip is skipped until matching ELSE or EIF
    if (!test) {
        skip(state, true);

        if (exports.DEBUG) { console.log(state.step,  'EIF[]'); }
    }
}

// EIF[] End IF
// 0x59
function EIF(state) {
    // this can be reached normally when
    // executing an else branch.
    // -> just ignore it

    if (exports.DEBUG) { console.log(state.step, 'EIF[]'); }
}

// AND[] logical AND
// 0x5A
function AND(state) {
    var stack = state.stack;
    var e2 = stack.pop();
    var e1 = stack.pop();

    if (exports.DEBUG) { console.log(state.step, 'AND[]', e2, e1); }

    stack.push(e2 && e1 ? 1 : 0);
}

// OR[] logical OR
// 0x5B
function OR(state) {
    var stack = state.stack;
    var e2 = stack.pop();
    var e1 = stack.pop();

    if (exports.DEBUG) { console.log(state.step, 'OR[]', e2, e1); }

    stack.push(e2 || e1 ? 1 : 0);
}

// NOT[] logical NOT
// 0x5C
function NOT(state) {
    var stack = state.stack;
    var e = stack.pop();

    if (exports.DEBUG) { console.log(state.step, 'NOT[]', e); }

    stack.push(e ? 0 : 1);
}

// DELTAP1[] DELTA exception P1
// DELTAP2[] DELTA exception P2
// DELTAP3[] DELTA exception P3
// 0x5D, 0x71, 0x72
function DELTAP123(b, state) {
    var stack = state.stack;
    var n = stack.pop();
    var fv = state.fv;
    var pv = state.pv;
    var ppem = state.ppem;
    var base = state.deltaBase + (b - 1) * 16;
    var ds = state.deltaShift;
    var z0 = state.z0;

    if (exports.DEBUG) { console.log(state.step, 'DELTAP[' + b + ']', n, stack); }

    for (var i = 0; i < n; i++) {
        var pi = stack.pop();
        var arg = stack.pop();
        var appem = base + ((arg & 0xF0) >> 4);
        if (appem !== ppem) { continue; }

        var mag = (arg & 0x0F) - 8;
        if (mag >= 0) { mag++; }
        if (exports.DEBUG) { console.log(state.step, 'DELTAPFIX', pi, 'by', mag * ds); }

        var p = z0[pi];
        fv.setRelative(p, p, mag * ds, pv);
    }
}

// SDB[] Set Delta Base in the graphics state
// 0x5E
function SDB(state) {
    var stack = state.stack;
    var n = stack.pop();

    if (exports.DEBUG) { console.log(state.step, 'SDB[]', n); }

    state.deltaBase = n;
}

// SDS[] Set Delta Shift in the graphics state
// 0x5F
function SDS(state) {
    var stack = state.stack;
    var n = stack.pop();

    if (exports.DEBUG) { console.log(state.step, 'SDS[]', n); }

    state.deltaShift = Math.pow(0.5, n);
}

// ADD[] ADD
// 0x60
function ADD(state) {
    var stack = state.stack;
    var n2 = stack.pop();
    var n1 = stack.pop();

    if (exports.DEBUG) { console.log(state.step, 'ADD[]', n2, n1); }

    stack.push(n1 + n2);
}

// SUB[] SUB
// 0x61
function SUB(state) {
    var stack = state.stack;
    var n2 = stack.pop();
    var n1 = stack.pop();

    if (exports.DEBUG) { console.log(state.step, 'SUB[]', n2, n1); }

    stack.push(n1 - n2);
}

// DIV[] DIV
// 0x62
function DIV(state) {
    var stack = state.stack;
    var n2 = stack.pop();
    var n1 = stack.pop();

    if (exports.DEBUG) { console.log(state.step, 'DIV[]', n2, n1); }

    stack.push(n1 * 64 / n2);
}

// MUL[] MUL
// 0x63
function MUL(state) {
    var stack = state.stack;
    var n2 = stack.pop();
    var n1 = stack.pop();

    if (exports.DEBUG) { console.log(state.step, 'MUL[]', n2, n1); }

    stack.push(n1 * n2 / 64);
}

// ABS[] ABSolute value
// 0x64
function ABS(state) {
    var stack = state.stack;
    var n = stack.pop();

    if (exports.DEBUG) { console.log(state.step, 'ABS[]', n); }

    stack.push(Math.abs(n));
}

// NEG[] NEGate
// 0x65
function NEG(state) {
    var stack = state.stack;
    var n = stack.pop();

    if (exports.DEBUG) { console.log(state.step, 'NEG[]', n); }

    stack.push(-n);
}

// FLOOR[] FLOOR
// 0x66
function FLOOR(state) {
    var stack = state.stack;
    var n = stack.pop();

    if (exports.DEBUG) { console.log(state.step, 'FLOOR[]', n); }

    stack.push(Math.floor(n / 0x40) * 0x40);
}

// CEILING[] CEILING
// 0x67
function CEILING(state) {
    var stack = state.stack;
    var n = stack.pop();

    if (exports.DEBUG) { console.log(state.step, 'CEILING[]', n); }

    stack.push(Math.ceil(n / 0x40) * 0x40);
}

// ROUND[ab] ROUND value
// 0x68-0x6B
function ROUND(dt, state) {
    var stack = state.stack;
    var n = stack.pop();

    if (exports.DEBUG) { console.log(state.step, 'ROUND[]'); }

    stack.push(state.round(n / 0x40) * 0x40);
}

// WCVTF[] Write Control Value Table in Funits
// 0x70
function WCVTF(state) {
    var stack = state.stack;
    var v = stack.pop();
    var l = stack.pop();

    if (exports.DEBUG) { console.log(state.step, 'WCVTF[]', v, l); }

    state.cvt[l] = v * state.ppem / state.font.unitsPerEm;
}

// DELTAC1[] DELTA exception C1
// DELTAC2[] DELTA exception C2
// DELTAC3[] DELTA exception C3
// 0x73, 0x74, 0x75
function DELTAC123(b, state) {
    var stack = state.stack;
    var n = stack.pop();
    var ppem = state.ppem;
    var base = state.deltaBase + (b - 1) * 16;
    var ds = state.deltaShift;

    if (exports.DEBUG) { console.log(state.step, 'DELTAC[' + b + ']', n, stack); }

    for (var i = 0; i < n; i++) {
        var c = stack.pop();
        var arg = stack.pop();
        var appem = base + ((arg & 0xF0) >> 4);
        if (appem !== ppem) { continue; }

        var mag = (arg & 0x0F) - 8;
        if (mag >= 0) { mag++; }

        var delta = mag * ds;

        if (exports.DEBUG) { console.log(state.step, 'DELTACFIX', c, 'by', delta); }

        state.cvt[c] += delta;
    }
}

// SROUND[] Super ROUND
// 0x76
function SROUND(state) {
    var n = state.stack.pop();

    if (exports.DEBUG) { console.log(state.step, 'SROUND[]', n); }

    state.round = roundSuper;

    var period;

    switch (n & 0xC0) {
        case 0x00:
            period = 0.5;
            break;
        case 0x40:
            period = 1;
            break;
        case 0x80:
            period = 2;
            break;
        default:
            throw new Error('invalid SROUND value');
    }

    state.srPeriod = period;

    switch (n & 0x30) {
        case 0x00:
            state.srPhase = 0;
            break;
        case 0x10:
            state.srPhase = 0.25 * period;
            break;
        case 0x20:
            state.srPhase = 0.5  * period;
            break;
        case 0x30:
            state.srPhase = 0.75 * period;
            break;
        default: throw new Error('invalid SROUND value');
    }

    n &= 0x0F;

    if (n === 0) { state.srThreshold = 0; }
    else { state.srThreshold = (n / 8 - 0.5) * period; }
}

// S45ROUND[] Super ROUND 45 degrees
// 0x77
function S45ROUND(state) {
    var n = state.stack.pop();

    if (exports.DEBUG) { console.log(state.step, 'S45ROUND[]', n); }

    state.round = roundSuper;

    var period;

    switch (n & 0xC0) {
        case 0x00:
            period = Math.sqrt(2) / 2;
            break;
        case 0x40:
            period = Math.sqrt(2);
            break;
        case 0x80:
            period = 2 * Math.sqrt(2);
            break;
        default:
            throw new Error('invalid S45ROUND value');
    }

    state.srPeriod = period;

    switch (n & 0x30) {
        case 0x00:
            state.srPhase = 0;
            break;
        case 0x10:
            state.srPhase = 0.25 * period;
            break;
        case 0x20:
            state.srPhase = 0.5  * period;
            break;
        case 0x30:
            state.srPhase = 0.75 * period;
            break;
        default:
            throw new Error('invalid S45ROUND value');
    }

    n &= 0x0F;

    if (n === 0) { state.srThreshold = 0; }
    else { state.srThreshold = (n / 8 - 0.5) * period; }
}

// ROFF[] Round Off
// 0x7A
function ROFF(state) {
    if (exports.DEBUG) { console.log(state.step, 'ROFF[]'); }

    state.round = roundOff;
}

// RUTG[] Round Up To Grid
// 0x7C
function RUTG(state) {
    if (exports.DEBUG) { console.log(state.step, 'RUTG[]'); }

    state.round = roundUpToGrid;
}

// RDTG[] Round Down To Grid
// 0x7D
function RDTG(state) {
    if (exports.DEBUG) { console.log(state.step, 'RDTG[]'); }

    state.round = roundDownToGrid;
}

// SCANCTRL[] SCAN conversion ConTRoL
// 0x85
function SCANCTRL(state) {
    var n = state.stack.pop();

    // ignored by opentype.js

    if (exports.DEBUG) { console.log(state.step, 'SCANCTRL[]', n); }
}

// SDPVTL[a] Set Dual Projection Vector To Line
// 0x86-0x87
function SDPVTL(a, state) {
    var stack = state.stack;
    var p2i = stack.pop();
    var p1i = stack.pop();
    var p2 = state.z2[p2i];
    var p1 = state.z1[p1i];

    if (exports.DEBUG) { console.log(state.step, 'SDPVTL[' + a + ']', p2i, p1i); }

    var dx;
    var dy;

    if (!a) {
        dx = p1.x - p2.x;
        dy = p1.y - p2.y;
    } else {
        dx = p2.y - p1.y;
        dy = p1.x - p2.x;
    }

    state.dpv = getUnitVector(dx, dy);
}

// GETINFO[] GET INFOrmation
// 0x88
function GETINFO(state) {
    var stack = state.stack;
    var sel = stack.pop();
    var r = 0;

    if (exports.DEBUG) { console.log(state.step, 'GETINFO[]', sel); }

    // v35 as in no subpixel hinting
    if (sel & 0x01) { r = 35; }

    // TODO rotation and stretch currently not supported
    // and thus those GETINFO are always 0.

    // opentype.js is always gray scaling
    if (sel & 0x20) { r |= 0x1000; }

    stack.push(r);
}

// ROLL[] ROLL the top three stack elements
// 0x8A
function ROLL(state) {
    var stack = state.stack;
    var a = stack.pop();
    var b = stack.pop();
    var c = stack.pop();

    if (exports.DEBUG) { console.log(state.step, 'ROLL[]'); }

    stack.push(b);
    stack.push(a);
    stack.push(c);
}

// MAX[] MAXimum of top two stack elements
// 0x8B
function MAX(state) {
    var stack = state.stack;
    var e2 = stack.pop();
    var e1 = stack.pop();

    if (exports.DEBUG) { console.log(state.step, 'MAX[]', e2, e1); }

    stack.push(Math.max(e1, e2));
}

// MIN[] MINimum of top two stack elements
// 0x8C
function MIN(state) {
    var stack = state.stack;
    var e2 = stack.pop();
    var e1 = stack.pop();

    if (exports.DEBUG) { console.log(state.step, 'MIN[]', e2, e1); }

    stack.push(Math.min(e1, e2));
}

// SCANTYPE[] SCANTYPE
// 0x8D
function SCANTYPE(state) {
    var n = state.stack.pop();
    // ignored by opentype.js
    if (exports.DEBUG) { console.log(state.step, 'SCANTYPE[]', n); }
}

// INSTCTRL[] INSTCTRL
// 0x8D
function INSTCTRL(state) {
    var s = state.stack.pop();
    var v = state.stack.pop();

    if (exports.DEBUG) { console.log(state.step, 'INSTCTRL[]', s, v); }

    switch (s) {
        case 1 : state.inhibitGridFit = !!v; return;
        case 2 : state.ignoreCvt = !!v; return;
        default: throw new Error('invalid INSTCTRL[] selector');
    }
}

// PUSHB[abc] PUSH Bytes
// 0xB0-0xB7
function PUSHB(n, state) {
    var stack = state.stack;
    var prog = state.prog;
    var ip = state.ip;

    if (exports.DEBUG) { console.log(state.step, 'PUSHB[' + n + ']'); }

    for (var i = 0; i < n; i++) { stack.push(prog[++ip]); }

    state.ip = ip;
}

// PUSHW[abc] PUSH Words
// 0xB8-0xBF
function PUSHW(n, state) {
    var ip = state.ip;
    var prog = state.prog;
    var stack = state.stack;

    if (exports.DEBUG) { console.log(state.ip, 'PUSHW[' + n + ']'); }

    for (var i = 0; i < n; i++) {
        var w = (prog[++ip] << 8) | prog[++ip];
        if (w & 0x8000) { w = -((w ^ 0xffff) + 1); }
        stack.push(w);
    }

    state.ip = ip;
}

// MDRP[abcde] Move Direct Relative Point
// 0xD0-0xEF
// (if indirect is 0)
//
// and
//
// MIRP[abcde] Move Indirect Relative Point
// 0xE0-0xFF
// (if indirect is 1)

function MDRP_MIRP(indirect, setRp0, keepD, ro, dt, state) {
    var stack = state.stack;
    var cvte = indirect && stack.pop();
    var pi = stack.pop();
    var rp0i = state.rp0;
    var rp = state.z0[rp0i];
    var p = state.z1[pi];

    var md = state.minDis;
    var fv = state.fv;
    var pv = state.dpv;
    var od; // original distance
    var d; // moving distance
    var sign; // sign of distance
    var cv;

    d = od = pv.distance(p, rp, true, true);
    sign = d >= 0 ? 1 : -1; // Math.sign would be 0 in case of 0

    // TODO consider autoFlip
    d = Math.abs(d);

    if (indirect) {
        cv = state.cvt[cvte];

        if (ro && Math.abs(d - cv) < state.cvCutIn) { d = cv; }
    }

    if (keepD && d < md) { d = md; }

    if (ro) { d = state.round(d); }

    fv.setRelative(p, rp, sign * d, pv);
    fv.touch(p);

    if (exports.DEBUG) {
        console.log(
            state.step,
            (indirect ? 'MIRP[' : 'MDRP[') +
            (setRp0 ? 'M' : 'm') +
            (keepD ? '>' : '_') +
            (ro ? 'R' : '_') +
            (dt === 0 ? 'Gr' : (dt === 1 ? 'Bl' : (dt === 2 ? 'Wh' : ''))) +
            ']',
            indirect ?
                cvte + '(' + state.cvt[cvte] + ',' +  cv + ')' :
                '',
            pi,
            '(d =', od, '->', sign * d, ')'
        );
    }

    state.rp1 = state.rp0;
    state.rp2 = pi;
    if (setRp0) { state.rp0 = pi; }
}

/*
* The instruction table.
*/
instructionTable = [
    /* 0x00 */ SVTCA.bind(undefined, yUnitVector),
    /* 0x01 */ SVTCA.bind(undefined, xUnitVector),
    /* 0x02 */ SPVTCA.bind(undefined, yUnitVector),
    /* 0x03 */ SPVTCA.bind(undefined, xUnitVector),
    /* 0x04 */ SFVTCA.bind(undefined, yUnitVector),
    /* 0x05 */ SFVTCA.bind(undefined, xUnitVector),
    /* 0x06 */ SPVTL.bind(undefined, 0),
    /* 0x07 */ SPVTL.bind(undefined, 1),
    /* 0x08 */ SFVTL.bind(undefined, 0),
    /* 0x09 */ SFVTL.bind(undefined, 1),
    /* 0x0A */ SPVFS,
    /* 0x0B */ SFVFS,
    /* 0x0C */ GPV,
    /* 0x0D */ GFV,
    /* 0x0E */ SFVTPV,
    /* 0x0F */ ISECT,
    /* 0x10 */ SRP0,
    /* 0x11 */ SRP1,
    /* 0x12 */ SRP2,
    /* 0x13 */ SZP0,
    /* 0x14 */ SZP1,
    /* 0x15 */ SZP2,
    /* 0x16 */ SZPS,
    /* 0x17 */ SLOOP,
    /* 0x18 */ RTG,
    /* 0x19 */ RTHG,
    /* 0x1A */ SMD,
    /* 0x1B */ ELSE,
    /* 0x1C */ JMPR,
    /* 0x1D */ SCVTCI,
    /* 0x1E */ undefined,   // TODO SSWCI
    /* 0x1F */ undefined,   // TODO SSW
    /* 0x20 */ DUP,
    /* 0x21 */ POP,
    /* 0x22 */ CLEAR,
    /* 0x23 */ SWAP,
    /* 0x24 */ DEPTH,
    /* 0x25 */ CINDEX,
    /* 0x26 */ MINDEX,
    /* 0x27 */ undefined,   // TODO ALIGNPTS
    /* 0x28 */ undefined,
    /* 0x29 */ undefined,   // TODO UTP
    /* 0x2A */ LOOPCALL,
    /* 0x2B */ CALL,
    /* 0x2C */ FDEF,
    /* 0x2D */ undefined,   // ENDF (eaten by FDEF)
    /* 0x2E */ MDAP.bind(undefined, 0),
    /* 0x2F */ MDAP.bind(undefined, 1),
    /* 0x30 */ IUP.bind(undefined, yUnitVector),
    /* 0x31 */ IUP.bind(undefined, xUnitVector),
    /* 0x32 */ SHP.bind(undefined, 0),
    /* 0x33 */ SHP.bind(undefined, 1),
    /* 0x34 */ SHC.bind(undefined, 0),
    /* 0x35 */ SHC.bind(undefined, 1),
    /* 0x36 */ SHZ.bind(undefined, 0),
    /* 0x37 */ SHZ.bind(undefined, 1),
    /* 0x38 */ SHPIX,
    /* 0x39 */ IP,
    /* 0x3A */ MSIRP.bind(undefined, 0),
    /* 0x3B */ MSIRP.bind(undefined, 1),
    /* 0x3C */ ALIGNRP,
    /* 0x3D */ RTDG,
    /* 0x3E */ MIAP.bind(undefined, 0),
    /* 0x3F */ MIAP.bind(undefined, 1),
    /* 0x40 */ NPUSHB,
    /* 0x41 */ NPUSHW,
    /* 0x42 */ WS,
    /* 0x43 */ RS,
    /* 0x44 */ WCVTP,
    /* 0x45 */ RCVT,
    /* 0x46 */ GC.bind(undefined, 0),
    /* 0x47 */ GC.bind(undefined, 1),
    /* 0x48 */ undefined,   // TODO SCFS
    /* 0x49 */ MD.bind(undefined, 0),
    /* 0x4A */ MD.bind(undefined, 1),
    /* 0x4B */ MPPEM,
    /* 0x4C */ undefined,   // TODO MPS
    /* 0x4D */ FLIPON,
    /* 0x4E */ undefined,   // TODO FLIPOFF
    /* 0x4F */ undefined,   // TODO DEBUG
    /* 0x50 */ LT,
    /* 0x51 */ LTEQ,
    /* 0x52 */ GT,
    /* 0x53 */ GTEQ,
    /* 0x54 */ EQ,
    /* 0x55 */ NEQ,
    /* 0x56 */ ODD,
    /* 0x57 */ EVEN,
    /* 0x58 */ IF,
    /* 0x59 */ EIF,
    /* 0x5A */ AND,
    /* 0x5B */ OR,
    /* 0x5C */ NOT,
    /* 0x5D */ DELTAP123.bind(undefined, 1),
    /* 0x5E */ SDB,
    /* 0x5F */ SDS,
    /* 0x60 */ ADD,
    /* 0x61 */ SUB,
    /* 0x62 */ DIV,
    /* 0x63 */ MUL,
    /* 0x64 */ ABS,
    /* 0x65 */ NEG,
    /* 0x66 */ FLOOR,
    /* 0x67 */ CEILING,
    /* 0x68 */ ROUND.bind(undefined, 0),
    /* 0x69 */ ROUND.bind(undefined, 1),
    /* 0x6A */ ROUND.bind(undefined, 2),
    /* 0x6B */ ROUND.bind(undefined, 3),
    /* 0x6C */ undefined,   // TODO NROUND[ab]
    /* 0x6D */ undefined,   // TODO NROUND[ab]
    /* 0x6E */ undefined,   // TODO NROUND[ab]
    /* 0x6F */ undefined,   // TODO NROUND[ab]
    /* 0x70 */ WCVTF,
    /* 0x71 */ DELTAP123.bind(undefined, 2),
    /* 0x72 */ DELTAP123.bind(undefined, 3),
    /* 0x73 */ DELTAC123.bind(undefined, 1),
    /* 0x74 */ DELTAC123.bind(undefined, 2),
    /* 0x75 */ DELTAC123.bind(undefined, 3),
    /* 0x76 */ SROUND,
    /* 0x77 */ S45ROUND,
    /* 0x78 */ undefined,   // TODO JROT[]
    /* 0x79 */ undefined,   // TODO JROF[]
    /* 0x7A */ ROFF,
    /* 0x7B */ undefined,
    /* 0x7C */ RUTG,
    /* 0x7D */ RDTG,
    /* 0x7E */ POP, // actually SANGW, supposed to do only a pop though
    /* 0x7F */ POP, // actually AA, supposed to do only a pop though
    /* 0x80 */ undefined,   // TODO FLIPPT
    /* 0x81 */ undefined,   // TODO FLIPRGON
    /* 0x82 */ undefined,   // TODO FLIPRGOFF
    /* 0x83 */ undefined,
    /* 0x84 */ undefined,
    /* 0x85 */ SCANCTRL,
    /* 0x86 */ SDPVTL.bind(undefined, 0),
    /* 0x87 */ SDPVTL.bind(undefined, 1),
    /* 0x88 */ GETINFO,
    /* 0x89 */ undefined,   // TODO IDEF
    /* 0x8A */ ROLL,
    /* 0x8B */ MAX,
    /* 0x8C */ MIN,
    /* 0x8D */ SCANTYPE,
    /* 0x8E */ INSTCTRL,
    /* 0x8F */ undefined,
    /* 0x90 */ undefined,
    /* 0x91 */ undefined,
    /* 0x92 */ undefined,
    /* 0x93 */ undefined,
    /* 0x94 */ undefined,
    /* 0x95 */ undefined,
    /* 0x96 */ undefined,
    /* 0x97 */ undefined,
    /* 0x98 */ undefined,
    /* 0x99 */ undefined,
    /* 0x9A */ undefined,
    /* 0x9B */ undefined,
    /* 0x9C */ undefined,
    /* 0x9D */ undefined,
    /* 0x9E */ undefined,
    /* 0x9F */ undefined,
    /* 0xA0 */ undefined,
    /* 0xA1 */ undefined,
    /* 0xA2 */ undefined,
    /* 0xA3 */ undefined,
    /* 0xA4 */ undefined,
    /* 0xA5 */ undefined,
    /* 0xA6 */ undefined,
    /* 0xA7 */ undefined,
    /* 0xA8 */ undefined,
    /* 0xA9 */ undefined,
    /* 0xAA */ undefined,
    /* 0xAB */ undefined,
    /* 0xAC */ undefined,
    /* 0xAD */ undefined,
    /* 0xAE */ undefined,
    /* 0xAF */ undefined,
    /* 0xB0 */ PUSHB.bind(undefined, 1),
    /* 0xB1 */ PUSHB.bind(undefined, 2),
    /* 0xB2 */ PUSHB.bind(undefined, 3),
    /* 0xB3 */ PUSHB.bind(undefined, 4),
    /* 0xB4 */ PUSHB.bind(undefined, 5),
    /* 0xB5 */ PUSHB.bind(undefined, 6),
    /* 0xB6 */ PUSHB.bind(undefined, 7),
    /* 0xB7 */ PUSHB.bind(undefined, 8),
    /* 0xB8 */ PUSHW.bind(undefined, 1),
    /* 0xB9 */ PUSHW.bind(undefined, 2),
    /* 0xBA */ PUSHW.bind(undefined, 3),
    /* 0xBB */ PUSHW.bind(undefined, 4),
    /* 0xBC */ PUSHW.bind(undefined, 5),
    /* 0xBD */ PUSHW.bind(undefined, 6),
    /* 0xBE */ PUSHW.bind(undefined, 7),
    /* 0xBF */ PUSHW.bind(undefined, 8),
    /* 0xC0 */ MDRP_MIRP.bind(undefined, 0, 0, 0, 0, 0),
    /* 0xC1 */ MDRP_MIRP.bind(undefined, 0, 0, 0, 0, 1),
    /* 0xC2 */ MDRP_MIRP.bind(undefined, 0, 0, 0, 0, 2),
    /* 0xC3 */ MDRP_MIRP.bind(undefined, 0, 0, 0, 0, 3),
    /* 0xC4 */ MDRP_MIRP.bind(undefined, 0, 0, 0, 1, 0),
    /* 0xC5 */ MDRP_MIRP.bind(undefined, 0, 0, 0, 1, 1),
    /* 0xC6 */ MDRP_MIRP.bind(undefined, 0, 0, 0, 1, 2),
    /* 0xC7 */ MDRP_MIRP.bind(undefined, 0, 0, 0, 1, 3),
    /* 0xC8 */ MDRP_MIRP.bind(undefined, 0, 0, 1, 0, 0),
    /* 0xC9 */ MDRP_MIRP.bind(undefined, 0, 0, 1, 0, 1),
    /* 0xCA */ MDRP_MIRP.bind(undefined, 0, 0, 1, 0, 2),
    /* 0xCB */ MDRP_MIRP.bind(undefined, 0, 0, 1, 0, 3),
    /* 0xCC */ MDRP_MIRP.bind(undefined, 0, 0, 1, 1, 0),
    /* 0xCD */ MDRP_MIRP.bind(undefined, 0, 0, 1, 1, 1),
    /* 0xCE */ MDRP_MIRP.bind(undefined, 0, 0, 1, 1, 2),
    /* 0xCF */ MDRP_MIRP.bind(undefined, 0, 0, 1, 1, 3),
    /* 0xD0 */ MDRP_MIRP.bind(undefined, 0, 1, 0, 0, 0),
    /* 0xD1 */ MDRP_MIRP.bind(undefined, 0, 1, 0, 0, 1),
    /* 0xD2 */ MDRP_MIRP.bind(undefined, 0, 1, 0, 0, 2),
    /* 0xD3 */ MDRP_MIRP.bind(undefined, 0, 1, 0, 0, 3),
    /* 0xD4 */ MDRP_MIRP.bind(undefined, 0, 1, 0, 1, 0),
    /* 0xD5 */ MDRP_MIRP.bind(undefined, 0, 1, 0, 1, 1),
    /* 0xD6 */ MDRP_MIRP.bind(undefined, 0, 1, 0, 1, 2),
    /* 0xD7 */ MDRP_MIRP.bind(undefined, 0, 1, 0, 1, 3),
    /* 0xD8 */ MDRP_MIRP.bind(undefined, 0, 1, 1, 0, 0),
    /* 0xD9 */ MDRP_MIRP.bind(undefined, 0, 1, 1, 0, 1),
    /* 0xDA */ MDRP_MIRP.bind(undefined, 0, 1, 1, 0, 2),
    /* 0xDB */ MDRP_MIRP.bind(undefined, 0, 1, 1, 0, 3),
    /* 0xDC */ MDRP_MIRP.bind(undefined, 0, 1, 1, 1, 0),
    /* 0xDD */ MDRP_MIRP.bind(undefined, 0, 1, 1, 1, 1),
    /* 0xDE */ MDRP_MIRP.bind(undefined, 0, 1, 1, 1, 2),
    /* 0xDF */ MDRP_MIRP.bind(undefined, 0, 1, 1, 1, 3),
    /* 0xE0 */ MDRP_MIRP.bind(undefined, 1, 0, 0, 0, 0),
    /* 0xE1 */ MDRP_MIRP.bind(undefined, 1, 0, 0, 0, 1),
    /* 0xE2 */ MDRP_MIRP.bind(undefined, 1, 0, 0, 0, 2),
    /* 0xE3 */ MDRP_MIRP.bind(undefined, 1, 0, 0, 0, 3),
    /* 0xE4 */ MDRP_MIRP.bind(undefined, 1, 0, 0, 1, 0),
    /* 0xE5 */ MDRP_MIRP.bind(undefined, 1, 0, 0, 1, 1),
    /* 0xE6 */ MDRP_MIRP.bind(undefined, 1, 0, 0, 1, 2),
    /* 0xE7 */ MDRP_MIRP.bind(undefined, 1, 0, 0, 1, 3),
    /* 0xE8 */ MDRP_MIRP.bind(undefined, 1, 0, 1, 0, 0),
    /* 0xE9 */ MDRP_MIRP.bind(undefined, 1, 0, 1, 0, 1),
    /* 0xEA */ MDRP_MIRP.bind(undefined, 1, 0, 1, 0, 2),
    /* 0xEB */ MDRP_MIRP.bind(undefined, 1, 0, 1, 0, 3),
    /* 0xEC */ MDRP_MIRP.bind(undefined, 1, 0, 1, 1, 0),
    /* 0xED */ MDRP_MIRP.bind(undefined, 1, 0, 1, 1, 1),
    /* 0xEE */ MDRP_MIRP.bind(undefined, 1, 0, 1, 1, 2),
    /* 0xEF */ MDRP_MIRP.bind(undefined, 1, 0, 1, 1, 3),
    /* 0xF0 */ MDRP_MIRP.bind(undefined, 1, 1, 0, 0, 0),
    /* 0xF1 */ MDRP_MIRP.bind(undefined, 1, 1, 0, 0, 1),
    /* 0xF2 */ MDRP_MIRP.bind(undefined, 1, 1, 0, 0, 2),
    /* 0xF3 */ MDRP_MIRP.bind(undefined, 1, 1, 0, 0, 3),
    /* 0xF4 */ MDRP_MIRP.bind(undefined, 1, 1, 0, 1, 0),
    /* 0xF5 */ MDRP_MIRP.bind(undefined, 1, 1, 0, 1, 1),
    /* 0xF6 */ MDRP_MIRP.bind(undefined, 1, 1, 0, 1, 2),
    /* 0xF7 */ MDRP_MIRP.bind(undefined, 1, 1, 0, 1, 3),
    /* 0xF8 */ MDRP_MIRP.bind(undefined, 1, 1, 1, 0, 0),
    /* 0xF9 */ MDRP_MIRP.bind(undefined, 1, 1, 1, 0, 1),
    /* 0xFA */ MDRP_MIRP.bind(undefined, 1, 1, 1, 0, 2),
    /* 0xFB */ MDRP_MIRP.bind(undefined, 1, 1, 1, 0, 3),
    /* 0xFC */ MDRP_MIRP.bind(undefined, 1, 1, 1, 1, 0),
    /* 0xFD */ MDRP_MIRP.bind(undefined, 1, 1, 1, 1, 1),
    /* 0xFE */ MDRP_MIRP.bind(undefined, 1, 1, 1, 1, 2),
    /* 0xFF */ MDRP_MIRP.bind(undefined, 1, 1, 1, 1, 3)
];

/*****************************
  Mathematical Considerations
******************************

fv ... refers to freedom vector
pv ... refers to projection vector
rp ... refers to reference point
p  ... refers to to point being operated on
d  ... refers to distance

SETRELATIVE:
============

case freedom vector == x-axis:
------------------------------

                        (pv)
                     .-'
              rpd .-'
               .-*
          d .-'90°'
         .-'       '
      .-'           '
   *-'               ' b
  rp                  '
                       '
                        '
            p *----------*-------------- (fv)
                          pm

  rpdx = rpx + d * pv.x
  rpdy = rpy + d * pv.y

  equation of line b

   y - rpdy = pvns * (x- rpdx)

   y = p.y

   x = rpdx + ( p.y - rpdy ) / pvns


case freedom vector == y-axis:
------------------------------

    * pm
    |\
    | \
    |  \
    |   \
    |    \
    |     \
    |      \
    |       \
    |        \
    |         \ b
    |          \
    |           \
    |            \    .-' (pv)
    |         90° \.-'
    |           .-'* rpd
    |        .-'
    *     *-'  d
    p     rp

  rpdx = rpx + d * pv.x
  rpdy = rpy + d * pv.y

  equation of line b:
           pvns ... normal slope to pv

   y - rpdy = pvns * (x - rpdx)

   x = p.x

   y = rpdy +  pvns * (p.x - rpdx)



generic case:
-------------


                              .'(fv)
                            .'
                          .* pm
                        .' !
                      .'    .
                    .'      !
                  .'         . b
                .'           !
               *              .
              p               !
                         90°   .    ... (pv)
                           ...-*-'''
                  ...---'''    rpd
         ...---'''   d
   *--'''
  rp

    rpdx = rpx + d * pv.x
    rpdy = rpy + d * pv.y

 equation of line b:
    pvns... normal slope to pv

    y - rpdy = pvns * (x - rpdx)

 equation of freedom vector line:
    fvs ... slope of freedom vector (=fy/fx)

    y - py = fvs * (x - px)


  on pm both equations are true for same x/y

    y - rpdy = pvns * (x - rpdx)

    y - py = fvs * (x - px)

  form to y and set equal:

    pvns * (x - rpdx) + rpdy = fvs * (x - px) + py

  expand:

    pvns * x - pvns * rpdx + rpdy = fvs * x - fvs * px + py

  switch:

    fvs * x - fvs * px + py = pvns * x - pvns * rpdx + rpdy

  solve for x:

    fvs * x - pvns * x = fvs * px - pvns * rpdx - py + rpdy



          fvs * px - pvns * rpdx + rpdy - py
    x =  -----------------------------------
                 fvs - pvns

  and:

    y = fvs * (x - px) + py



INTERPOLATE:
============

Examples of point interpolation.

The weight of the movement of the reference point gets bigger
the further the other reference point is away, thus the safest
option (that is avoiding 0/0 divisions) is to weight the
original distance of the other point by the sum of both distances.

If the sum of both distances is 0, then move the point by the
arithmetic average of the movement of both reference points.




           (+6)
    rp1o *---->*rp1
         .     .                          (+12)
         .     .                  rp2o *---------->* rp2
         .     .                       .           .
         .     .                       .           .
         .    10          20           .           .
         |.........|...................|           .
               .   .                               .
               .   . (+8)                          .
                po *------>*p                      .
               .           .                       .
               .    12     .          24           .
               |...........|.......................|
                                  36


-------



           (+10)
    rp1o *-------->*rp1
         .         .                      (-10)
         .         .              rp2 *<---------* rpo2
         .         .                   .         .
         .         .                   .         .
         .    10   .          30       .         .
         |.........|.............................|
                   .                   .
                   . (+5)              .
                po *--->* p            .
                   .    .              .
                   .    .   20         .
                   |....|..............|
                     5        15


-------


           (+10)
    rp1o *-------->*rp1
         .         .
         .         .
    rp2o *-------->*rp2


                               (+10)
                          po *-------->* p

-------


           (+10)
    rp1o *-------->*rp1
         .         .
         .         .(+30)
    rp2o *---------------------------->*rp2


                                        (+25)
                          po *----------------------->* p



vim: set ts=4 sw=4 expandtab:
*****/

/**
 * Converts a string into a list of tokens.
 */

/**
 * Create a new token
 * @param {string} char a single char
 */
function Token(char) {
    this.char = char;
    this.state = {};
    this.activeState = null;
}

/**
 * Create a new context range
 * @param {number} startIndex range start index
 * @param {number} endOffset range end index offset
 * @param {string} contextName owner context name
 */
function ContextRange(startIndex, endOffset, contextName) {
    this.contextName = contextName;
    this.startIndex = startIndex;
    this.endOffset = endOffset;
}

/**
 * Check context start and end
 * @param {string} contextName a unique context name
 * @param {function} checkStart a predicate function the indicates a context's start
 * @param {function} checkEnd a predicate function the indicates a context's end
 */
function ContextChecker(contextName, checkStart, checkEnd) {
    this.contextName = contextName;
    this.openRange = null;
    this.ranges = [];
    this.checkStart = checkStart;
    this.checkEnd = checkEnd;
}

/**
 * @typedef ContextParams
 * @type Object
 * @property {array} context context items
 * @property {number} currentIndex current item index
 */

/**
 * Create a context params
 * @param {array} context a list of items
 * @param {number} currentIndex current item index
 */
function ContextParams(context, currentIndex) {
    this.context = context;
    this.index = currentIndex;
    this.length = context.length;
    this.current = context[currentIndex];
    this.backtrack = context.slice(0, currentIndex);
    this.lookahead = context.slice(currentIndex + 1);
}

/**
 * Create an event instance
 * @param {string} eventId event unique id
 */
function Event(eventId) {
    this.eventId = eventId;
    this.subscribers = [];
}

/**
 * Initialize a core events and auto subscribe required event handlers
 * @param {any} events an object that enlists core events handlers
 */
function initializeCoreEvents(events) {
    var this$1 = this;

    var coreEvents = [
        'start', 'end', 'next', 'newToken', 'contextStart',
        'contextEnd', 'insertToken', 'removeToken', 'removeRange',
        'replaceToken', 'replaceRange', 'composeRUD', 'updateContextsRanges'
    ];

    coreEvents.forEach(function (eventId) {
        Object.defineProperty(this$1.events, eventId, {
            value: new Event(eventId)
        });
    });

    if (!!events) {
        coreEvents.forEach(function (eventId) {
            var event = events[eventId];
            if (typeof event === 'function') {
                this$1.events[eventId].subscribe(event);
            }
        });
    }
    var requiresContextUpdate = [
        'insertToken', 'removeToken', 'removeRange',
        'replaceToken', 'replaceRange', 'composeRUD'
    ];
    requiresContextUpdate.forEach(function (eventId) {
        this$1.events[eventId].subscribe(
            this$1.updateContextsRanges
        );
    });
}

/**
 * Converts a string into a list of tokens
 * @param {any} events tokenizer core events
 */
function Tokenizer(events) {
    this.tokens = [];
    this.registeredContexts = {};
    this.contextCheckers = [];
    this.events = {};
    this.registeredModifiers = [];

    initializeCoreEvents.call(this, events);
}

/**
 * Sets the state of a token, usually called by a state modifier.
 * @param {string} key state item key
 * @param {any} value state item value
 */
Token.prototype.setState = function(key, value) {
    this.state[key] = value;
    this.activeState = { key: key, value: this.state[key] };
    return this.activeState;
};

Token.prototype.getState = function (stateId) {
    return this.state[stateId] || null;
};

/**
 * Checks if an index exists in the tokens list.
 * @param {number} index token index
 */
Tokenizer.prototype.inboundIndex = function(index) {
    return index >= 0 && index < this.tokens.length;
};

/**
 * Compose and apply a list of operations (replace, update, delete)
 * @param {array} RUDs replace, update and delete operations
 * TODO: Perf. Optimization (lengthBefore === lengthAfter ? dispatch once)
 */
Tokenizer.prototype.composeRUD = function (RUDs) {
    var this$1 = this;

    var silent = true;
    var state = RUDs.map(function (RUD) { return (
        this$1[RUD[0]].apply(this$1, RUD.slice(1).concat(silent))
    ); });
    var hasFAILObject = function (obj) { return (
        typeof obj === 'object' &&
        obj.hasOwnProperty('FAIL')
    ); };
    if (state.every(hasFAILObject)) {
        return {
            FAIL: "composeRUD: one or more operations hasn't completed successfully",
            report: state.filter(hasFAILObject)
        };
    }
    this.dispatch('composeRUD', [state.filter(function (op) { return !hasFAILObject(op); })]);
};

/**
 * Replace a range of tokens with a list of tokens
 * @param {number} startIndex range start index
 * @param {number} offset range offset
 * @param {token} tokens a list of tokens to replace
 * @param {boolean} silent dispatch events and update context ranges
 */
Tokenizer.prototype.replaceRange = function (startIndex, offset, tokens, silent) {
    offset = offset !== null ? offset : this.tokens.length;
    var isTokenType = tokens.every(function (token) { return token instanceof Token; });
    if (!isNaN(startIndex) && this.inboundIndex(startIndex) && isTokenType) {
        var replaced = this.tokens.splice.apply(
            this.tokens, [startIndex, offset].concat(tokens)
        );
        if (!silent) { this.dispatch('replaceToken', [startIndex, offset, tokens]); }
        return [replaced, tokens];
    } else {
        return { FAIL: 'replaceRange: invalid tokens or startIndex.' };
    }
};

/**
 * Replace a token with another token
 * @param {number} index token index
 * @param {token} token a token to replace
 * @param {boolean} silent dispatch events and update context ranges
 */
Tokenizer.prototype.replaceToken = function (index, token, silent) {
    if (!isNaN(index) && this.inboundIndex(index) && token instanceof Token) {
        var replaced = this.tokens.splice(index, 1, token);
        if (!silent) { this.dispatch('replaceToken', [index, token]); }
        return [replaced[0], token];
    } else {
        return { FAIL: 'replaceToken: invalid token or index.' };
    }
};

/**
 * Removes a range of tokens
 * @param {number} startIndex range start index
 * @param {number} offset range offset
 * @param {boolean} silent dispatch events and update context ranges
 */
Tokenizer.prototype.removeRange = function(startIndex, offset, silent) {
    offset = !isNaN(offset) ? offset : this.tokens.length;
    var tokens = this.tokens.splice(startIndex, offset);
    if (!silent) { this.dispatch('removeRange', [tokens, startIndex, offset]); }
    return tokens;
};

/**
 * Remove a token at a certain index
 * @param {number} index token index
 * @param {boolean} silent dispatch events and update context ranges
 */
Tokenizer.prototype.removeToken = function(index, silent) {
    if (!isNaN(index) && this.inboundIndex(index)) {
        var token = this.tokens.splice(index, 1);
        if (!silent) { this.dispatch('removeToken', [token, index]); }
        return token;
    } else {
        return { FAIL: 'removeToken: invalid token index.' };
    }
};

/**
 * Insert a list of tokens at a certain index
 * @param {array} tokens a list of tokens to insert
 * @param {number} index insert the list of tokens at index
 * @param {boolean} silent dispatch events and update context ranges
 */
Tokenizer.prototype.insertToken = function (tokens, index, silent) {
    var tokenType = tokens.every(
        function (token) { return token instanceof Token; }
    );
    if (tokenType) {
        this.tokens.splice.apply(
            this.tokens, [index, 0].concat(tokens)
        );
        if (!silent) { this.dispatch('insertToken', [tokens, index]); }
        return tokens;
    } else {
        return { FAIL: 'insertToken: invalid token(s).' };
    }
};

/**
 * A state modifier that is called on 'newToken' event
 * @param {string} modifierId state modifier id
 * @param {function} condition a predicate function that returns true or false
 * @param {function} modifier a function to update token state
 */
Tokenizer.prototype.registerModifier = function(modifierId, condition, modifier) {
    this.events.newToken.subscribe(function(token, contextParams) {
        var conditionParams = [token, contextParams];
        var canApplyModifier = (
            condition === null ||
            condition.apply(this, conditionParams) === true
        );
        var modifierParams = [token, contextParams];
        if (canApplyModifier) {
            var newStateValue = modifier.apply(this, modifierParams);
            token.setState(modifierId, newStateValue);
        }
    });
    this.registeredModifiers.push(modifierId);
};

/**
 * Subscribe a handler to an event
 * @param {function} eventHandler an event handler function
 */
Event.prototype.subscribe = function (eventHandler) {
    if (typeof eventHandler === 'function') {
        return ((this.subscribers.push(eventHandler)) - 1);
    } else {
        return { FAIL: ("invalid '" + (this.eventId) + "' event handler")};
    }
};

/**
 * Unsubscribe an event handler
 * @param {string} subsId subscription id
 */
Event.prototype.unsubscribe = function (subsId) {
    this.subscribers.splice(subsId, 1);
};

/**
 * Sets context params current value index
 * @param {number} index context params current value index
 */
ContextParams.prototype.setCurrentIndex = function(index) {
    this.index = index;
    this.current = this.context[index];
    this.backtrack = this.context.slice(0, index);
    this.lookahead = this.context.slice(index + 1);
};

/**
 * Get an item at an offset from the current value
 * example (current value is 3):
 *  1    2   [3]   4    5   |   items values
 * -2   -1    0    1    2   |   offset values
 * @param {number} offset an offset from current value index
 */
ContextParams.prototype.get = function (offset) {
    switch (true) {
        case (offset === 0):
            return this.current;
        case (offset < 0 && Math.abs(offset) <= this.backtrack.length):
            return this.backtrack.slice(offset)[0];
        case (offset > 0 && offset <= this.lookahead.length):
            return this.lookahead[offset - 1];
        default:
            return null;
    }
};

/**
 * Converts a context range into a string value
 * @param {contextRange} range a context range
 */
Tokenizer.prototype.rangeToText = function (range) {
    if (range instanceof ContextRange) {
        return (
            this.getRangeTokens(range)
                .map(function (token) { return token.char; }).join('')
        );
    }
};

/**
 * Converts all tokens into a string
 */
Tokenizer.prototype.getText = function () {
    return this.tokens.map(function (token) { return token.char; }).join('');
};

/**
 * Get a context by name
 * @param {string} contextName context name to get
 */
Tokenizer.prototype.getContext = function (contextName) {
    var context = this.registeredContexts[contextName];
    return !!context ? context : null;
};

/**
 * Subscribes a new event handler to an event
 * @param {string} eventName event name to subscribe to
 * @param {function} eventHandler a function to be invoked on event
 */
Tokenizer.prototype.on = function(eventName, eventHandler) {
    var event = this.events[eventName];
    if (!!event) {
        return event.subscribe(eventHandler);
    } else {
        return null;
    }
};

/**
 * Dispatches an event
 * @param {string} eventName event name
 * @param {any} args event handler arguments
 */
Tokenizer.prototype.dispatch = function(eventName, args) {
    var this$1 = this;

    var event = this.events[eventName];
    if (event instanceof Event) {
        event.subscribers.forEach(function (subscriber) {
            subscriber.apply(this$1, args || []);
        });
    }
};

/**
 * Register a new context checker
 * @param {string} contextName a unique context name
 * @param {function} contextStartCheck a predicate function that returns true on context start
 * @param {function} contextEndCheck  a predicate function that returns true on context end
 * TODO: call tokenize on registration to update context ranges with the new context.
 */
Tokenizer.prototype.registerContextChecker = function(contextName, contextStartCheck, contextEndCheck) {
    if (!!this.getContext(contextName)) { return {
        FAIL:
        ("context name '" + contextName + "' is already registered.")
    }; }
    if (typeof contextStartCheck !== 'function') { return {
        FAIL:
        "missing context start check."
    }; }
    if (typeof contextEndCheck !== 'function') { return {
        FAIL:
        "missing context end check."
    }; }
    var contextCheckers = new ContextChecker(
        contextName, contextStartCheck, contextEndCheck
    );
    this.registeredContexts[contextName] = contextCheckers;
    this.contextCheckers.push(contextCheckers);
    return contextCheckers;
};

/**
 * Gets a context range tokens
 * @param {contextRange} range a context range
 */
Tokenizer.prototype.getRangeTokens = function(range) {
    var endIndex = range.startIndex + range.endOffset;
    return [].concat(
        this.tokens
            .slice(range.startIndex, endIndex)
    );
};

/**
 * Gets the ranges of a context
 * @param {string} contextName context name
 */
Tokenizer.prototype.getContextRanges = function(contextName) {
    var context = this.getContext(contextName);
    if (!!context) {
        return context.ranges;
    } else {
        return { FAIL: ("context checker '" + contextName + "' is not registered.") };
    }
};

/**
 * Resets context ranges to run context update
 */
Tokenizer.prototype.resetContextsRanges = function () {
    var registeredContexts = this.registeredContexts;
    for (var contextName in registeredContexts) {
        if (registeredContexts.hasOwnProperty(contextName)) {
            var context = registeredContexts[contextName];
            context.ranges = [];
        }
    }
};

/**
 * Updates context ranges
 */
Tokenizer.prototype.updateContextsRanges = function () {
    this.resetContextsRanges();
    var chars = this.tokens.map(function (token) { return token.char; });
    for (var i = 0; i < chars.length; i++) {
        var contextParams = new ContextParams(chars, i);
        this.runContextCheck(contextParams);
    }
    this.dispatch('updateContextsRanges', [this.registeredContexts]);
};

/**
 * Sets the end offset of an open range
 * @param {number} offset range end offset
 * @param {string} contextName context name
 */
Tokenizer.prototype.setEndOffset = function (offset, contextName) {
    var startIndex = this.getContext(contextName).openRange.startIndex;
    var range = new ContextRange(startIndex, offset, contextName);
    var ranges = this.getContext(contextName).ranges;
    range.rangeId = contextName + "." + (ranges.length);
    ranges.push(range);
    this.getContext(contextName).openRange = null;
    return range;
};

/**
 * Runs a context check on the current context
 * @param {contextParams} contextParams current context params
 */
Tokenizer.prototype.runContextCheck = function(contextParams) {
    var this$1 = this;

    var index = contextParams.index;
    this.contextCheckers.forEach(function (contextChecker) {
        var contextName = contextChecker.contextName;
        var openRange = this$1.getContext(contextName).openRange;
        if (!openRange && contextChecker.checkStart(contextParams)) {
            openRange = new ContextRange(index, null, contextName);
            this$1.getContext(contextName).openRange = openRange;
            this$1.dispatch('contextStart', [contextName, index]);
        }
        if (!!openRange && contextChecker.checkEnd(contextParams)) {
            var offset = (index - openRange.startIndex) + 1;
            var range = this$1.setEndOffset(offset, contextName);
            this$1.dispatch('contextEnd', [contextName, range]);
        }
    });
};

/**
 * Converts a text into a list of tokens
 * @param {string} text a text to tokenize
 */
Tokenizer.prototype.tokenize = function (text) {
    this.tokens = [];
    this.resetContextsRanges();
    var chars = Array.from(text);
    this.dispatch('start');
    for (var i = 0; i < chars.length; i++) {
        var char = chars[i];
        var contextParams = new ContextParams(chars, i);
        this.dispatch('next', [contextParams]);
        this.runContextCheck(contextParams);
        var token = new Token(char);
        this.tokens.push(token);
        this.dispatch('newToken', [token, contextParams]);
    }
    this.dispatch('end', [this.tokens]);
    return this.tokens;
};

// ╭─┄┄┄────────────────────────┄─────────────────────────────────────────────╮
// ┊ Character Class Assertions ┊ Checks if a char belongs to a certain class ┊
// ╰─╾──────────────────────────┄─────────────────────────────────────────────╯
// jscs:disable maximumLineLength
/**
 * Check if a char is Arabic
 * @param {string} c a single char
 */
function isArabicChar(c) {
    return /[\u0600-\u065F\u066A-\u06D2\u06FA-\u06FF]/.test(c);
}

/**
 * Check if a char is an isolated arabic char
 * @param {string} c a single char
 */
function isIsolatedArabicChar(char) {
    return /[\u0630\u0690\u0621\u0631\u0661\u0671\u0622\u0632\u0672\u0692\u06C2\u0623\u0673\u0693\u06C3\u0624\u0694\u06C4\u0625\u0675\u0695\u06C5\u06E5\u0676\u0696\u06C6\u0627\u0677\u0697\u06C7\u0648\u0688\u0698\u06C8\u0689\u0699\u06C9\u068A\u06CA\u066B\u068B\u06CB\u068C\u068D\u06CD\u06FD\u068E\u06EE\u06FE\u062F\u068F\u06CF\u06EF]/.test(char);
}

/**
 * Check if a char is an Arabic Tashkeel char
 * @param {string} c a single char
 */
function isTashkeelArabicChar(char) {
    return /[\u0600-\u0605\u060C-\u060E\u0610-\u061B\u061E\u064B-\u065F\u0670\u06D6-\u06DC\u06DF-\u06E4\u06E7\u06E8\u06EA-\u06ED]/.test(char);
}

/**
 * Check if a char is Latin
 * @param {string} c a single char
 */
function isLatinChar(c) {
    return /[A-z]/.test(c);
}

/**
 * Check if a char is whitespace char
 * @param {string} c a single char
 */
function isWhiteSpace(c) {
    return /\s/.test(c);
}

/**
 * Query a feature by some of it's properties to lookup a glyph substitution.
 */

/**
 * Create feature query instance
 * @param {Font} font opentype font instance
 */
function FeatureQuery(font) {
    this.font = font;
    this.features = {};
}

/**
 * @typedef SubstitutionAction
 * @type Object
 * @property {number} id substitution type
 * @property {string} tag feature tag
 * @property {any} substitution substitution value(s)
 */

/**
 * Create a substitution action instance
 * @param {SubstitutionAction} action
 */
function SubstitutionAction(action) {
    this.id = action.id;
    this.tag = action.tag;
    this.substitution = action.substitution;
}

/**
 * Lookup a coverage table
 * @param {number} glyphIndex glyph index
 * @param {CoverageTable} coverage coverage table
 */
function lookupCoverage(glyphIndex, coverage) {
    if (!glyphIndex) { return -1; }
    switch (coverage.format) {
        case 1:
            return coverage.glyphs.indexOf(glyphIndex);

        case 2:
            var ranges = coverage.ranges;
            for (var i = 0; i < ranges.length; i++) {
                var range = ranges[i];
                if (glyphIndex >= range.start && glyphIndex <= range.end) {
                    var offset = glyphIndex - range.start;
                    return range.index + offset;
                }
            }
            break;
        default:
            return -1; // not found
    }
    return -1;
}

/**
 * Handle a single substitution - format 1
 * @param {ContextParams} contextParams context params to lookup
 */
function singleSubstitutionFormat1(glyphIndex, subtable) {
    var substituteIndex = lookupCoverage(glyphIndex, subtable.coverage);
    if (substituteIndex === -1) { return null; }
    return glyphIndex + subtable.deltaGlyphId;
}

/**
 * Handle a single substitution - format 2
 * @param {ContextParams} contextParams context params to lookup
 */
function singleSubstitutionFormat2(glyphIndex, subtable) {
    var substituteIndex = lookupCoverage(glyphIndex, subtable.coverage);
    if (substituteIndex === -1) { return null; }
    return subtable.substitute[substituteIndex];
}

/**
 * Lookup a list of coverage tables
 * @param {any} coverageList a list of coverage tables
 * @param {ContextParams} contextParams context params to lookup
 */
function lookupCoverageList(coverageList, contextParams) {
    var lookupList = [];
    for (var i = 0; i < coverageList.length; i++) {
        var coverage = coverageList[i];
        var glyphIndex = contextParams.current;
        glyphIndex = Array.isArray(glyphIndex) ? glyphIndex[0] : glyphIndex;
        var lookupIndex = lookupCoverage(glyphIndex, coverage);
        if (lookupIndex !== -1) {
            lookupList.push(lookupIndex);
        }
    }
    if (lookupList.length !== coverageList.length) { return -1; }
    return lookupList;
}

/**
 * Handle chaining context substitution - format 3
 * @param {ContextParams} contextParams context params to lookup
 */
function chainingSubstitutionFormat3(contextParams, subtable) {
    var lookupsCount = (
        subtable.inputCoverage.length +
        subtable.lookaheadCoverage.length +
        subtable.backtrackCoverage.length
    );
    if (contextParams.context.length < lookupsCount) { return []; }
    // INPUT LOOKUP //
    var inputLookups = lookupCoverageList(
        subtable.inputCoverage, contextParams
    );
    if (inputLookups === -1) { return []; }
    // LOOKAHEAD LOOKUP //
    var lookaheadOffset = subtable.inputCoverage.length - 1;
    if (contextParams.lookahead.length < subtable.lookaheadCoverage.length) { return []; }
    var lookaheadContext = contextParams.lookahead.slice(lookaheadOffset);
    while (lookaheadContext.length && isTashkeelArabicChar(lookaheadContext[0].char)) {
        lookaheadContext.shift();
    }
    var lookaheadParams = new ContextParams(lookaheadContext, 0);
    var lookaheadLookups = lookupCoverageList(
        subtable.lookaheadCoverage, lookaheadParams
    );
    // BACKTRACK LOOKUP //
    var backtrackContext = [].concat(contextParams.backtrack);
    backtrackContext.reverse();
    while (backtrackContext.length && isTashkeelArabicChar(backtrackContext[0].char)) {
        backtrackContext.shift();
    }
    if (backtrackContext.length < subtable.backtrackCoverage.length) { return []; }
    var backtrackParams = new ContextParams(backtrackContext, 0);
    var backtrackLookups = lookupCoverageList(
        subtable.backtrackCoverage, backtrackParams
    );
    var contextRulesMatch = (
        inputLookups.length === subtable.inputCoverage.length &&
        lookaheadLookups.length === subtable.lookaheadCoverage.length &&
        backtrackLookups.length === subtable.backtrackCoverage.length
    );
    var substitutions = [];
    if (contextRulesMatch) {
        for (var i = 0; i < subtable.lookupRecords.length; i++) {
            var lookupRecord = subtable.lookupRecords[i];
            var lookupListIndex = lookupRecord.lookupListIndex;
            var lookupTable = this.getLookupByIndex(lookupListIndex);
            for (var s = 0; s < lookupTable.subtables.length; s++) {
                var subtable$1 = lookupTable.subtables[s];
                var lookup = this.getLookupMethod(lookupTable, subtable$1);
                var substitutionType = this.getSubstitutionType(lookupTable, subtable$1);
                if (substitutionType === '12') {
                    for (var n = 0; n < inputLookups.length; n++) {
                        var glyphIndex = contextParams.get(n);
                        var substitution = lookup(glyphIndex);
                        if (substitution) { substitutions.push(substitution); }
                    }
                }
            }
        }
    }
    return substitutions;
}

/**
 * Handle ligature substitution - format 1
 * @param {ContextParams} contextParams context params to lookup
 */
function ligatureSubstitutionFormat1(contextParams, subtable) {
    // COVERAGE LOOKUP //
    var glyphIndex = contextParams.current;
    var ligSetIndex = lookupCoverage(glyphIndex, subtable.coverage);
    if (ligSetIndex === -1) { return null; }
    // COMPONENTS LOOKUP
    // (!) note, components are ordered in the written direction.
    var ligature;
    var ligatureSet = subtable.ligatureSets[ligSetIndex];
    for (var s = 0; s < ligatureSet.length; s++) {
        ligature = ligatureSet[s];
        for (var l = 0; l < ligature.components.length; l++) {
            var lookaheadItem = contextParams.lookahead[l];
            var component = ligature.components[l];
            if (lookaheadItem !== component) { break; }
            if (l === ligature.components.length - 1) { return ligature; }
        }
    }
    return null;
}

/**
 * Handle decomposition substitution - format 1
 * @param {number} glyphIndex glyph index
 * @param {any} subtable subtable
 */
function decompositionSubstitutionFormat1(glyphIndex, subtable) {
    var substituteIndex = lookupCoverage(glyphIndex, subtable.coverage);
    if (substituteIndex === -1) { return null; }
    return subtable.sequences[substituteIndex];
}

/**
 * Get default script features indexes
 */
FeatureQuery.prototype.getDefaultScriptFeaturesIndexes = function () {
    var scripts = this.font.tables.gsub.scripts;
    for (var s = 0; s < scripts.length; s++) {
        var script = scripts[s];
        if (script.tag === 'DFLT') { return (
            script.script.defaultLangSys.featureIndexes
        ); }
    }
    return [];
};

/**
 * Get feature indexes of a specific script
 * @param {string} scriptTag script tag
 */
FeatureQuery.prototype.getScriptFeaturesIndexes = function(scriptTag) {
    var tables = this.font.tables;
    if (!tables.gsub) { return []; }
    if (!scriptTag) { return this.getDefaultScriptFeaturesIndexes(); }
    var scripts = this.font.tables.gsub.scripts;
    for (var i = 0; i < scripts.length; i++) {
        var script = scripts[i];
        if (script.tag === scriptTag && script.script.defaultLangSys) {
            return script.script.defaultLangSys.featureIndexes;
        } else {
            var langSysRecords = script.langSysRecords;
            if (!!langSysRecords) {
                for (var j = 0; j < langSysRecords.length; j++) {
                    var langSysRecord = langSysRecords[j];
                    if (langSysRecord.tag === scriptTag) {
                        var langSys = langSysRecord.langSys;
                        return langSys.featureIndexes;
                    }
                }
            }
        }
    }
    return this.getDefaultScriptFeaturesIndexes();
};

/**
 * Map a feature tag to a gsub feature
 * @param {any} features gsub features
 * @param {string} scriptTag script tag
 */
FeatureQuery.prototype.mapTagsToFeatures = function (features, scriptTag) {
    var tags = {};
    for (var i = 0; i < features.length; i++) {
        var tag = features[i].tag;
        var feature = features[i].feature;
        tags[tag] = feature;
    }
    this.features[scriptTag].tags = tags;
};

/**
 * Get features of a specific script
 * @param {string} scriptTag script tag
 */
FeatureQuery.prototype.getScriptFeatures = function (scriptTag) {
    var features = this.features[scriptTag];
    if (this.features.hasOwnProperty(scriptTag)) { return features; }
    var featuresIndexes = this.getScriptFeaturesIndexes(scriptTag);
    if (!featuresIndexes) { return null; }
    var gsub = this.font.tables.gsub;
    features = featuresIndexes.map(function (index) { return gsub.features[index]; });
    this.features[scriptTag] = features;
    this.mapTagsToFeatures(features, scriptTag);
    return features;
};

/**
 * Get substitution type
 * @param {any} lookupTable lookup table
 * @param {any} subtable subtable
 */
FeatureQuery.prototype.getSubstitutionType = function(lookupTable, subtable) {
    var lookupType = lookupTable.lookupType.toString();
    var substFormat = subtable.substFormat.toString();
    return lookupType + substFormat;
};

/**
 * Get lookup method
 * @param {any} lookupTable lookup table
 * @param {any} subtable subtable
 */
FeatureQuery.prototype.getLookupMethod = function(lookupTable, subtable) {
    var this$1 = this;

    var substitutionType = this.getSubstitutionType(lookupTable, subtable);
    switch (substitutionType) {
        case '11':
            return function (glyphIndex) { return singleSubstitutionFormat1.apply(
                this$1, [glyphIndex, subtable]
            ); };
        case '12':
            return function (glyphIndex) { return singleSubstitutionFormat2.apply(
                this$1, [glyphIndex, subtable]
            ); };
        case '63':
            return function (contextParams) { return chainingSubstitutionFormat3.apply(
                this$1, [contextParams, subtable]
            ); };
        case '41':
            return function (contextParams) { return ligatureSubstitutionFormat1.apply(
                this$1, [contextParams, subtable]
            ); };
        case '21':
            return function (glyphIndex) { return decompositionSubstitutionFormat1.apply(
                this$1, [glyphIndex, subtable]
            ); };
        default:
            throw new Error(
                "lookupType: " + (lookupTable.lookupType) + " - " +
                "substFormat: " + (subtable.substFormat) + " " +
                "is not yet supported"
            );
    }
};

/**
 * [ LOOKUP TYPES ]
 * -------------------------------
 * Single                        1;
 * Multiple                      2;
 * Alternate                     3;
 * Ligature                      4;
 * Context                       5;
 * ChainingContext               6;
 * ExtensionSubstitution         7;
 * ReverseChainingContext        8;
 * -------------------------------
 *
 */

/**
 * @typedef FQuery
 * @type Object
 * @param {string} tag feature tag
 * @param {string} script feature script
 * @param {ContextParams} contextParams context params
 */

/**
 * Lookup a feature using a query parameters
 * @param {FQuery} query feature query
 */
FeatureQuery.prototype.lookupFeature = function (query) {
    var contextParams = query.contextParams;
    var currentIndex = contextParams.index;
    var feature = this.getFeature({
        tag: query.tag, script: query.script
    });
    if (!feature) { return new Error(
        "font '" + (this.font.names.fullName.en) + "' " +
        "doesn't support feature '" + (query.tag) + "' " +
        "for script '" + (query.script) + "'."
    ); }
    var lookups = this.getFeatureLookups(feature);
    var substitutions = [].concat(contextParams.context);
    for (var l = 0; l < lookups.length; l++) {
        var lookupTable = lookups[l];
        var subtables = this.getLookupSubtables(lookupTable);
        for (var s = 0; s < subtables.length; s++) {
            var subtable = subtables[s];
            var substType = this.getSubstitutionType(lookupTable, subtable);
            var lookup = this.getLookupMethod(lookupTable, subtable);
            var substitution = (void 0);
            switch (substType) {
                case '11':
                    substitution = lookup(contextParams.current);
                    if (substitution) {
                        substitutions.splice(currentIndex, 1, new SubstitutionAction({
                            id: 11, tag: query.tag, substitution: substitution
                        }));
                    }
                    break;
                case '12':
                    substitution = lookup(contextParams.current);
                    if (substitution) {
                        substitutions.splice(currentIndex, 1, new SubstitutionAction({
                            id: 12, tag: query.tag, substitution: substitution
                        }));
                    }
                    break;
                case '63':
                    substitution = lookup(contextParams);
                    if (Array.isArray(substitution) && substitution.length) {
                        substitutions.splice(currentIndex, 1, new SubstitutionAction({
                            id: 63, tag: query.tag, substitution: substitution
                        }));
                    }
                    break;
                case '41':
                    substitution = lookup(contextParams);
                    if (substitution) {
                        substitutions.splice(currentIndex, 1, new SubstitutionAction({
                            id: 41, tag: query.tag, substitution: substitution
                        }));
                    }
                    break;
                case '21':
                    substitution = lookup(contextParams.current);
                    if (substitution) {
                        substitutions.splice(currentIndex, 1, new SubstitutionAction({
                            id: 21, tag: query.tag, substitution: substitution
                        }));
                    }
                    break;
            }
            contextParams = new ContextParams(substitutions, currentIndex);
            if (Array.isArray(substitution) && !substitution.length) { continue; }
            substitution = null;
        }
    }
    return substitutions.length ? substitutions : null;
};

/**
 * Checks if a font supports a specific features
 * @param {FQuery} query feature query object
 */
FeatureQuery.prototype.supports = function (query) {
    if (!query.script) { return false; }
    this.getScriptFeatures(query.script);
    var supportedScript = this.features.hasOwnProperty(query.script);
    if (!query.tag) { return supportedScript; }
    var supportedFeature = (
        this.features[query.script].some(function (feature) { return feature.tag === query.tag; })
    );
    return supportedScript && supportedFeature;
};

/**
 * Get lookup table subtables
 * @param {any} lookupTable lookup table
 */
FeatureQuery.prototype.getLookupSubtables = function (lookupTable) {
    return lookupTable.subtables || null;
};

/**
 * Get lookup table by index
 * @param {number} index lookup table index
 */
FeatureQuery.prototype.getLookupByIndex = function (index) {
    var lookups = this.font.tables.gsub.lookups;
    return lookups[index] || null;
};

/**
 * Get lookup tables for a feature
 * @param {string} feature
 */
FeatureQuery.prototype.getFeatureLookups = function (feature) {
    // TODO: memoize
    return feature.lookupListIndexes.map(this.getLookupByIndex.bind(this));
};

/**
 * Query a feature by it's properties
 * @param {any} query an object that describes the properties of a query
 */
FeatureQuery.prototype.getFeature = function getFeature(query) {
    if (!this.font) { return { FAIL: "No font was found"}; }
    if (!this.features.hasOwnProperty(query.script)) {
        this.getScriptFeatures(query.script);
    }
    var scriptFeatures = this.features[query.script];
    if (!scriptFeatures) { return (
        { FAIL: ("No feature for script " + (query.script))}
    ); }
    if (!scriptFeatures.tags[query.tag]) { return null; }
    return this.features[query.script].tags[query.tag];
};

/**
 * Arabic word context checkers
 */

function arabicWordStartCheck(contextParams) {
    var char = contextParams.current;
    var prevChar = contextParams.get(-1);
    return (
        // ? arabic first char
        (prevChar === null && isArabicChar(char)) ||
        // ? arabic char preceded with a non arabic char
        (!isArabicChar(prevChar) && isArabicChar(char))
    );
}

function arabicWordEndCheck(contextParams) {
    var nextChar = contextParams.get(1);
    return (
        // ? last arabic char
        (nextChar === null) ||
        // ? next char is not arabic
        (!isArabicChar(nextChar))
    );
}

var arabicWordCheck = {
    startCheck: arabicWordStartCheck,
    endCheck: arabicWordEndCheck
};

/**
 * Arabic sentence context checkers
 */

function arabicSentenceStartCheck(contextParams) {
    var char = contextParams.current;
    var prevChar = contextParams.get(-1);
    return (
        // ? an arabic char preceded with a non arabic char
        (isArabicChar(char) || isTashkeelArabicChar(char)) &&
        !isArabicChar(prevChar)
    );
}

function arabicSentenceEndCheck(contextParams) {
    var nextChar = contextParams.get(1);
    switch (true) {
        case nextChar === null:
            return true;
        case (!isArabicChar(nextChar) && !isTashkeelArabicChar(nextChar)):
            var nextIsWhitespace = isWhiteSpace(nextChar);
            if (!nextIsWhitespace) { return true; }
            if (nextIsWhitespace) {
                var arabicCharAhead = false;
                arabicCharAhead = (
                    contextParams.lookahead.some(
                        function (c) { return isArabicChar(c) || isTashkeelArabicChar(c); }
                    )
                );
                if (!arabicCharAhead) { return true; }
            }
            break;
        default:
            return false;
    }
}

var arabicSentenceCheck = {
    startCheck: arabicSentenceStartCheck,
    endCheck: arabicSentenceEndCheck
};

/**
 * Apply single substitution format 1
 * @param {Array} substitutions substitutions
 * @param {any} tokens a list of tokens
 * @param {number} index token index
 */
function singleSubstitutionFormat1$1(action, tokens, index) {
    tokens[index].setState(action.tag, action.substitution);
}

/**
 * Apply single substitution format 2
 * @param {Array} substitutions substitutions
 * @param {any} tokens a list of tokens
 * @param {number} index token index
 */
function singleSubstitutionFormat2$1(action, tokens, index) {
    tokens[index].setState(action.tag, action.substitution);
}

/**
 * Apply chaining context substitution format 3
 * @param {Array} substitutions substitutions
 * @param {any} tokens a list of tokens
 * @param {number} index token index
 */
function chainingSubstitutionFormat3$1(action, tokens, index) {
    action.substitution.forEach(function (subst, offset) {
        var token = tokens[index + offset];
        token.setState(action.tag, subst);
    });
}

/**
 * Apply ligature substitution format 1
 * @param {Array} substitutions substitutions
 * @param {any} tokens a list of tokens
 * @param {number} index token index
 */
function ligatureSubstitutionFormat1$1(action, tokens, index) {
    var token = tokens[index];
    token.setState(action.tag, action.substitution.ligGlyph);
    var compsCount = action.substitution.components.length;
    for (var i = 0; i < compsCount; i++) {
        token = tokens[index + i + 1];
        token.setState('deleted', true);
    }
}

/**
 * Supported substitutions
 */
var SUBSTITUTIONS = {
    11: singleSubstitutionFormat1$1,
    12: singleSubstitutionFormat2$1,
    63: chainingSubstitutionFormat3$1,
    41: ligatureSubstitutionFormat1$1
};

/**
 * Apply substitutions to a list of tokens
 * @param {Array} substitutions substitutions
 * @param {any} tokens a list of tokens
 * @param {number} index token index
 */
function applySubstitution(action, tokens, index) {
    if (action instanceof SubstitutionAction && SUBSTITUTIONS[action.id]) {
        SUBSTITUTIONS[action.id](action, tokens, index);
    }
}

/**
 * Apply Arabic presentation forms to a range of tokens
 */

/**
 * Check if a char can be connected to it's preceding char
 * @param {ContextParams} charContextParams context params of a char
 */
function willConnectPrev(charContextParams) {
    var backtrack = [].concat(charContextParams.backtrack);
    for (var i = backtrack.length - 1; i >= 0; i--) {
        var prevChar = backtrack[i];
        var isolated = isIsolatedArabicChar(prevChar);
        var tashkeel = isTashkeelArabicChar(prevChar);
        if (!isolated && !tashkeel) { return true; }
        if (isolated) { return false; }
    }
    return false;
}

/**
 * Check if a char can be connected to it's proceeding char
 * @param {ContextParams} charContextParams context params of a char
 */
function willConnectNext(charContextParams) {
    if (isIsolatedArabicChar(charContextParams.current)) { return false; }
    for (var i = 0; i < charContextParams.lookahead.length; i++) {
        var nextChar = charContextParams.lookahead[i];
        var tashkeel = isTashkeelArabicChar(nextChar);
        if (!tashkeel) { return true; }
    }
    return false;
}

/**
 * Apply arabic presentation forms to a list of tokens
 * @param {ContextRange} range a range of tokens
 */
function arabicPresentationForms(range) {
    var this$1 = this;

    var script = 'arab';
    var tags = this.featuresTags[script];
    var tokens = this.tokenizer.getRangeTokens(range);
    if (tokens.length === 1) { return; }
    var contextParams = new ContextParams(
        tokens.map(function (token) { return token.getState('glyphIndex'); }
    ), 0);
    var charContextParams = new ContextParams(
        tokens.map(function (token) { return token.char; }
    ), 0);
    tokens.forEach(function (token, index) {
        if (isTashkeelArabicChar(token.char)) { return; }
        contextParams.setCurrentIndex(index);
        charContextParams.setCurrentIndex(index);
        var CONNECT = 0; // 2 bits 00 (10: can connect next) (01: can connect prev)
        if (willConnectPrev(charContextParams)) { CONNECT |= 1; }
        if (willConnectNext(charContextParams)) { CONNECT |= 2; }
        var tag;
        switch (CONNECT) {
            case 1: (tag = 'fina'); break;
            case 2: (tag = 'init'); break;
            case 3: (tag = 'medi'); break;
        }
        if (tags.indexOf(tag) === -1) { return; }
        var substitutions = this$1.query.lookupFeature({
            tag: tag, script: script, contextParams: contextParams
        });
        if (substitutions instanceof Error) { return console.info(substitutions.message); }
        substitutions.forEach(function (action, index) {
            if (action instanceof SubstitutionAction) {
                applySubstitution(action, tokens, index);
                contextParams.context[index] = action.substitution;
            }
        });
    });
}

/**
 * Apply Arabic required ligatures feature to a range of tokens
 */

/**
 * Update context params
 * @param {any} tokens a list of tokens
 * @param {number} index current item index
 */
function getContextParams(tokens, index) {
    var context = tokens.map(function (token) { return token.activeState.value; });
    return new ContextParams(context, index || 0);
}

/**
 * Apply Arabic required ligatures to a context range
 * @param {ContextRange} range a range of tokens
 */
function arabicRequiredLigatures(range) {
    var this$1 = this;

    var script = 'arab';
    var tokens = this.tokenizer.getRangeTokens(range);
    var contextParams = getContextParams(tokens);
    contextParams.context.forEach(function (glyphIndex, index) {
        contextParams.setCurrentIndex(index);
        var substitutions = this$1.query.lookupFeature({
            tag: 'rlig', script: script, contextParams: contextParams
        });
        if (substitutions.length) {
            substitutions.forEach(
                function (action) { return applySubstitution(action, tokens, index); }
            );
            contextParams = getContextParams(tokens);
        }
    });
}

/**
 * Latin word context checkers
 */

function latinWordStartCheck(contextParams) {
    var char = contextParams.current;
    var prevChar = contextParams.get(-1);
    return (
        // ? latin first char
        (prevChar === null && isLatinChar(char)) ||
        // ? latin char preceded with a non latin char
        (!isLatinChar(prevChar) && isLatinChar(char))
    );
}

function latinWordEndCheck(contextParams) {
    var nextChar = contextParams.get(1);
    return (
        // ? last latin char
        (nextChar === null) ||
        // ? next char is not latin
        (!isLatinChar(nextChar))
    );
}

var latinWordCheck = {
    startCheck: latinWordStartCheck,
    endCheck: latinWordEndCheck
};

/**
 * Apply Latin ligature feature to a range of tokens
 */

/**
 * Update context params
 * @param {any} tokens a list of tokens
 * @param {number} index current item index
 */
function getContextParams$1(tokens, index) {
    var context = tokens.map(function (token) { return token.activeState.value; });
    return new ContextParams(context, index || 0);
}

/**
 * Apply Arabic required ligatures to a context range
 * @param {ContextRange} range a range of tokens
 */
function latinLigature(range) {
    var this$1 = this;

    var script = 'latn';
    var tokens = this.tokenizer.getRangeTokens(range);
    var contextParams = getContextParams$1(tokens);
    contextParams.context.forEach(function (glyphIndex, index) {
        contextParams.setCurrentIndex(index);
        var substitutions = this$1.query.lookupFeature({
            tag: 'liga', script: script, contextParams: contextParams
        });
        if (substitutions.length) {
            substitutions.forEach(
                function (action) { return applySubstitution(action, tokens, index); }
            );
            contextParams = getContextParams$1(tokens);
        }
    });
}

/**
 * Infer bidirectional properties for a given text and apply
 * the corresponding layout rules.
 */

/**
 * Create Bidi. features
 * @param {string} baseDir text base direction. value either 'ltr' or 'rtl'
 */
function Bidi(baseDir) {
    this.baseDir = baseDir || 'ltr';
    this.tokenizer = new Tokenizer();
    this.featuresTags = {};
}

/**
 * Sets Bidi text
 * @param {string} text a text input
 */
Bidi.prototype.setText = function (text) {
    this.text = text;
};

/**
 * Store essential context checks:
 * arabic word check for applying gsub features
 * arabic sentence check for adjusting arabic layout
 */
Bidi.prototype.contextChecks = ({
    latinWordCheck: latinWordCheck,
    arabicWordCheck: arabicWordCheck,
    arabicSentenceCheck: arabicSentenceCheck
});

/**
 * Register arabic word check
 */
function registerContextChecker(checkId) {
    var check = this.contextChecks[(checkId + "Check")];
    return this.tokenizer.registerContextChecker(
        checkId, check.startCheck, check.endCheck
    );
}

/**
 * Perform pre tokenization procedure then
 * tokenize text input
 */
function tokenizeText() {
    registerContextChecker.call(this, 'latinWord');
    registerContextChecker.call(this, 'arabicWord');
    registerContextChecker.call(this, 'arabicSentence');
    return this.tokenizer.tokenize(this.text);
}

/**
 * Reverse arabic sentence layout
 * TODO: check base dir before applying adjustments - priority low
 */
function reverseArabicSentences() {
    var this$1 = this;

    var ranges = this.tokenizer.getContextRanges('arabicSentence');
    ranges.forEach(function (range) {
        var rangeTokens = this$1.tokenizer.getRangeTokens(range);
        this$1.tokenizer.replaceRange(
            range.startIndex,
            range.endOffset,
            rangeTokens.reverse()
        );
    });
}

/**
 * Register supported features tags
 * @param {script} script script tag
 * @param {Array} tags features tags list
 */
Bidi.prototype.registerFeatures = function (script, tags) {
    var this$1 = this;

    var supportedTags = tags.filter(
        function (tag) { return this$1.query.supports({script: script, tag: tag}); }
    );
    if (!this.featuresTags.hasOwnProperty(script)) {
        this.featuresTags[script] = supportedTags;
    } else {
        this.featuresTags[script] =
        this.featuresTags[script].concat(supportedTags);
    }
};

/**
 * Apply GSUB features
 * @param {Array} tagsList a list of features tags
 * @param {string} script a script tag
 * @param {Font} font opentype font instance
 */
Bidi.prototype.applyFeatures = function (font, features) {
    if (!font) { throw new Error(
        'No valid font was provided to apply features'
    ); }
    if (!this.query) { this.query = new FeatureQuery(font); }
    for (var f = 0; f < features.length; f++) {
        var feature = features[f];
        if (!this.query.supports({script: feature.script})) { continue; }
        this.registerFeatures(feature.script, feature.tags);
    }
};

/**
 * Register a state modifier
 * @param {string} modifierId state modifier id
 * @param {function} condition a predicate function that returns true or false
 * @param {function} modifier a modifier function to set token state
 */
Bidi.prototype.registerModifier = function (modifierId, condition, modifier) {
    this.tokenizer.registerModifier(modifierId, condition, modifier);
};

/**
 * Check if 'glyphIndex' is registered
 */
function checkGlyphIndexStatus() {
    if (this.tokenizer.registeredModifiers.indexOf('glyphIndex') === -1) {
        throw new Error(
            'glyphIndex modifier is required to apply ' +
            'arabic presentation features.'
        );
    }
}

/**
 * Apply arabic presentation forms features
 */
function applyArabicPresentationForms() {
    var this$1 = this;

    var script = 'arab';
    if (!this.featuresTags.hasOwnProperty(script)) { return; }
    checkGlyphIndexStatus.call(this);
    var ranges = this.tokenizer.getContextRanges('arabicWord');
    ranges.forEach(function (range) {
        arabicPresentationForms.call(this$1, range);
    });
}

/**
 * Apply required arabic ligatures
 */
function applyArabicRequireLigatures() {
    var this$1 = this;

    var script = 'arab';
    if (!this.featuresTags.hasOwnProperty(script)) { return; }
    var tags = this.featuresTags[script];
    if (tags.indexOf('rlig') === -1) { return; }
    checkGlyphIndexStatus.call(this);
    var ranges = this.tokenizer.getContextRanges('arabicWord');
    ranges.forEach(function (range) {
        arabicRequiredLigatures.call(this$1, range);
    });
}

/**
 * Apply required arabic ligatures
 */
function applyLatinLigatures() {
    var this$1 = this;

    var script = 'latn';
    if (!this.featuresTags.hasOwnProperty(script)) { return; }
    var tags = this.featuresTags[script];
    if (tags.indexOf('liga') === -1) { return; }
    checkGlyphIndexStatus.call(this);
    var ranges = this.tokenizer.getContextRanges('latinWord');
    ranges.forEach(function (range) {
        latinLigature.call(this$1, range);
    });
}

/**
 * Check if a context is registered
 * @param {string} contextId context id
 */
Bidi.prototype.checkContextReady = function (contextId) {
    return !!this.tokenizer.getContext(contextId);
};

/**
 * Apply features to registered contexts
 */
Bidi.prototype.applyFeaturesToContexts = function () {
    if (this.checkContextReady('arabicWord')) {
        applyArabicPresentationForms.call(this);
        applyArabicRequireLigatures.call(this);
    }
    if (this.checkContextReady('latinWord')) {
        applyLatinLigatures.call(this);
    }
    if (this.checkContextReady('arabicSentence')) {
        reverseArabicSentences.call(this);
    }
};

/**
 * process text input
 * @param {string} text an input text
 */
Bidi.prototype.processText = function(text) {
    if (!this.text || this.text !== text) {
        this.setText(text);
        tokenizeText.call(this);
        this.applyFeaturesToContexts();
    }
};

/**
 * Process a string of text to identify and adjust
 * bidirectional text entities.
 * @param {string} text input text
 */
Bidi.prototype.getBidiText = function (text) {
    this.processText(text);
    return this.tokenizer.getText();
};

/**
 * Get the current state index of each token
 * @param {text} text an input text
 */
Bidi.prototype.getTextGlyphs = function (text) {
    this.processText(text);
    var indexes = [];
    for (var i = 0; i < this.tokenizer.tokens.length; i++) {
        var token = this.tokenizer.tokens[i];
        if (token.state.deleted) { continue; }
        var index = token.activeState.value;
        indexes.push(Array.isArray(index) ? index[0] : index);
    }
    return indexes;
};

// The Font object

/**
 * @typedef FontOptions
 * @type Object
 * @property {Boolean} empty - whether to create a new empty font
 * @property {string} familyName
 * @property {string} styleName
 * @property {string=} fullName
 * @property {string=} postScriptName
 * @property {string=} designer
 * @property {string=} designerURL
 * @property {string=} manufacturer
 * @property {string=} manufacturerURL
 * @property {string=} license
 * @property {string=} licenseURL
 * @property {string=} version
 * @property {string=} description
 * @property {string=} copyright
 * @property {string=} trademark
 * @property {Number} unitsPerEm
 * @property {Number} ascender
 * @property {Number} descender
 * @property {Number} createdTimestamp
 * @property {string=} weightClass
 * @property {string=} widthClass
 * @property {string=} fsSelection
 */

/**
 * A Font represents a loaded OpenType font file.
 * It contains a set of glyphs and methods to draw text on a drawing context,
 * or to get a path representing the text.
 * @exports opentype.Font
 * @class
 * @param {FontOptions}
 * @constructor
 */
function Font(options) {
    options = options || {};
    options.tables = options.tables || {};

    if (!options.empty) {
        // Check that we've provided the minimum set of names.
        checkArgument(options.familyName, 'When creating a new Font object, familyName is required.');
        checkArgument(options.styleName, 'When creating a new Font object, styleName is required.');
        checkArgument(options.unitsPerEm, 'When creating a new Font object, unitsPerEm is required.');
        checkArgument(options.ascender, 'When creating a new Font object, ascender is required.');
        checkArgument(options.descender <= 0, 'When creating a new Font object, negative descender value is required.');

        // OS X will complain if the names are empty, so we put a single space everywhere by default.
        this.names = {
            fontFamily: {en: options.familyName || ' '},
            fontSubfamily: {en: options.styleName || ' '},
            fullName: {en: options.fullName || options.familyName + ' ' + options.styleName},
            // postScriptName may not contain any whitespace
            postScriptName: {en: options.postScriptName || (options.familyName + options.styleName).replace(/\s/g, '')},
            designer: {en: options.designer || ' '},
            designerURL: {en: options.designerURL || ' '},
            manufacturer: {en: options.manufacturer || ' '},
            manufacturerURL: {en: options.manufacturerURL || ' '},
            license: {en: options.license || ' '},
            licenseURL: {en: options.licenseURL || ' '},
            version: {en: options.version || 'Version 0.1'},
            description: {en: options.description || ' '},
            copyright: {en: options.copyright || ' '},
            trademark: {en: options.trademark || ' '}
        };
        this.unitsPerEm = options.unitsPerEm || 1000;
        this.ascender = options.ascender;
        this.descender = options.descender;
        this.createdTimestamp = options.createdTimestamp;
        this.tables = Object.assign(options.tables, {
            os2: Object.assign({
                usWeightClass: options.weightClass || this.usWeightClasses.MEDIUM,
                usWidthClass: options.widthClass || this.usWidthClasses.MEDIUM,
                fsSelection: options.fsSelection || this.fsSelectionValues.REGULAR,
            }, options.tables.os2)
        });
    }

    this.supported = true; // Deprecated: parseBuffer will throw an error if font is not supported.
    this.glyphs = new glyphset.GlyphSet(this, options.glyphs || []);
    this.encoding = new DefaultEncoding(this);
    this.position = new Position(this);
    this.substitution = new Substitution(this);
    this.tables = this.tables || {};

    // needed for low memory mode only.
    this._push = null;
    this._hmtxTableData = {};

    Object.defineProperty(this, 'hinting', {
        get: function() {
            if (this._hinting) { return this._hinting; }
            if (this.outlinesFormat === 'truetype') {
                return (this._hinting = new Hinting(this));
            }
        }
    });
}

/**
 * Check if the font has a glyph for the given character.
 * @param  {string}
 * @return {Boolean}
 */
Font.prototype.hasChar = function(c) {
    return this.encoding.charToGlyphIndex(c) !== null;
};

/**
 * Convert the given character to a single glyph index.
 * Note that this function assumes that there is a one-to-one mapping between
 * the given character and a glyph; for complex scripts this might not be the case.
 * @param  {string}
 * @return {Number}
 */
Font.prototype.charToGlyphIndex = function(s) {
    return this.encoding.charToGlyphIndex(s);
};

/**
 * Convert the given character to a single Glyph object.
 * Note that this function assumes that there is a one-to-one mapping between
 * the given character and a glyph; for complex scripts this might not be the case.
 * @param  {string}
 * @return {opentype.Glyph}
 */
Font.prototype.charToGlyph = function(c) {
    var glyphIndex = this.charToGlyphIndex(c);
    var glyph = this.glyphs.get(glyphIndex);
    if (!glyph) {
        // .notdef
        glyph = this.glyphs.get(0);
    }

    return glyph;
};

/**
 * Update features
 * @param {any} options features options
 */
Font.prototype.updateFeatures = function (options) {
    // TODO: update all features options not only 'latn'.
    return this.defaultRenderOptions.features.map(function (feature) {
        if (feature.script === 'latn') {
            return {
                script: 'latn',
                tags: feature.tags.filter(function (tag) { return options[tag]; })
            };
        } else {
            return feature;
        }
    });
};

/**
 * Convert the given text to a list of Glyph objects.
 * Note that there is no strict one-to-one mapping between characters and
 * glyphs, so the list of returned glyphs can be larger or smaller than the
 * length of the given string.
 * @param  {string}
 * @param  {GlyphRenderOptions} [options]
 * @return {opentype.Glyph[]}
 */
Font.prototype.stringToGlyphs = function(s, options) {
    var this$1 = this;


    var bidi = new Bidi();

    // Create and register 'glyphIndex' state modifier
    var charToGlyphIndexMod = function (token) { return this$1.charToGlyphIndex(token.char); };
    bidi.registerModifier('glyphIndex', null, charToGlyphIndexMod);

    // roll-back to default features
    var features = options ?
    this.updateFeatures(options.features) :
    this.defaultRenderOptions.features;

    bidi.applyFeatures(this, features);

    var indexes = bidi.getTextGlyphs(s);

    var length = indexes.length;

    // convert glyph indexes to glyph objects
    var glyphs = new Array(length);
    var notdef = this.glyphs.get(0);
    for (var i = 0; i < length; i += 1) {
        glyphs[i] = this.glyphs.get(indexes[i]) || notdef;
    }
    return glyphs;
};

/**
 * @param  {string}
 * @return {Number}
 */
Font.prototype.nameToGlyphIndex = function(name) {
    return this.glyphNames.nameToGlyphIndex(name);
};

/**
 * @param  {string}
 * @return {opentype.Glyph}
 */
Font.prototype.nameToGlyph = function(name) {
    var glyphIndex = this.nameToGlyphIndex(name);
    var glyph = this.glyphs.get(glyphIndex);
    if (!glyph) {
        // .notdef
        glyph = this.glyphs.get(0);
    }

    return glyph;
};

/**
 * @param  {Number}
 * @return {String}
 */
Font.prototype.glyphIndexToName = function(gid) {
    if (!this.glyphNames.glyphIndexToName) {
        return '';
    }

    return this.glyphNames.glyphIndexToName(gid);
};

/**
 * Retrieve the value of the kerning pair between the left glyph (or its index)
 * and the right glyph (or its index). If no kerning pair is found, return 0.
 * The kerning value gets added to the advance width when calculating the spacing
 * between glyphs.
 * For GPOS kerning, this method uses the default script and language, which covers
 * most use cases. To have greater control, use font.position.getKerningValue .
 * @param  {opentype.Glyph} leftGlyph
 * @param  {opentype.Glyph} rightGlyph
 * @return {Number}
 */
Font.prototype.getKerningValue = function(leftGlyph, rightGlyph) {
    leftGlyph = leftGlyph.index || leftGlyph;
    rightGlyph = rightGlyph.index || rightGlyph;
    var gposKerning = this.position.defaultKerningTables;
    if (gposKerning) {
        return this.position.getKerningValue(gposKerning, leftGlyph, rightGlyph);
    }
    // "kern" table
    return this.kerningPairs[leftGlyph + ',' + rightGlyph] || 0;
};

/**
 * @typedef GlyphRenderOptions
 * @type Object
 * @property {string} [script] - script used to determine which features to apply. By default, 'DFLT' or 'latn' is used.
 *                               See https://www.microsoft.com/typography/otspec/scripttags.htm
 * @property {string} [language='dflt'] - language system used to determine which features to apply.
 *                                        See https://www.microsoft.com/typography/developers/opentype/languagetags.aspx
 * @property {boolean} [kerning=true] - whether to include kerning values
 * @property {object} [features] - OpenType Layout feature tags. Used to enable or disable the features of the given script/language system.
 *                                 See https://www.microsoft.com/typography/otspec/featuretags.htm
 */
Font.prototype.defaultRenderOptions = {
    kerning: true,
    features: [
        /**
         * these 4 features are required to render Arabic text properly
         * and shouldn't be turned off when rendering arabic text.
         */
        { script: 'arab', tags: ['init', 'medi', 'fina', 'rlig'] },
        { script: 'latn', tags: ['liga', 'rlig'] }
    ]
};

/**
 * Helper function that invokes the given callback for each glyph in the given text.
 * The callback gets `(glyph, x, y, fontSize, options)`.* @param  {string} text
 * @param {string} text - The text to apply.
 * @param  {number} [x=0] - Horizontal position of the beginning of the text.
 * @param  {number} [y=0] - Vertical position of the *baseline* of the text.
 * @param  {number} [fontSize=72] - Font size in pixels. We scale the glyph units by `1 / unitsPerEm * fontSize`.
 * @param  {GlyphRenderOptions=} options
 * @param  {Function} callback
 */
Font.prototype.forEachGlyph = function(text, x, y, fontSize, options, callback) {
    x = x !== undefined ? x : 0;
    y = y !== undefined ? y : 0;
    fontSize = fontSize !== undefined ? fontSize : 72;
    options = Object.assign({}, this.defaultRenderOptions, options);
    var fontScale = 1 / this.unitsPerEm * fontSize;
    var glyphs = this.stringToGlyphs(text, options);
    var kerningLookups;
    if (options.kerning) {
        var script = options.script || this.position.getDefaultScriptName();
        kerningLookups = this.position.getKerningTables(script, options.language);
    }
    for (var i = 0; i < glyphs.length; i += 1) {
        var glyph = glyphs[i];
        callback.call(this, glyph, x, y, fontSize, options);
        if (glyph.advanceWidth) {
            x += glyph.advanceWidth * fontScale;
        }

        if (options.kerning && i < glyphs.length - 1) {
            // We should apply position adjustment lookups in a more generic way.
            // Here we only use the xAdvance value.
            var kerningValue = kerningLookups ?
                  this.position.getKerningValue(kerningLookups, glyph.index, glyphs[i + 1].index) :
                  this.getKerningValue(glyph, glyphs[i + 1]);
            x += kerningValue * fontScale;
        }

        if (options.letterSpacing) {
            x += options.letterSpacing * fontSize;
        } else if (options.tracking) {
            x += (options.tracking / 1000) * fontSize;
        }
    }
    return x;
};

/**
 * Create a Path object that represents the given text.
 * @param  {string} text - The text to create.
 * @param  {number} [x=0] - Horizontal position of the beginning of the text.
 * @param  {number} [y=0] - Vertical position of the *baseline* of the text.
 * @param  {number} [fontSize=72] - Font size in pixels. We scale the glyph units by `1 / unitsPerEm * fontSize`.
 * @param  {GlyphRenderOptions=} options
 * @return {opentype.Path}
 */
Font.prototype.getPath = function(text, x, y, fontSize, options) {
    var fullPath = new Path();
    this.forEachGlyph(text, x, y, fontSize, options, function(glyph, gX, gY, gFontSize) {
        var glyphPath = glyph.getPath(gX, gY, gFontSize, options, this);
        fullPath.extend(glyphPath);
    });
    return fullPath;
};

/**
 * Create an array of Path objects that represent the glyphs of a given text.
 * @param  {string} text - The text to create.
 * @param  {number} [x=0] - Horizontal position of the beginning of the text.
 * @param  {number} [y=0] - Vertical position of the *baseline* of the text.
 * @param  {number} [fontSize=72] - Font size in pixels. We scale the glyph units by `1 / unitsPerEm * fontSize`.
 * @param  {GlyphRenderOptions=} options
 * @return {opentype.Path[]}
 */
Font.prototype.getPaths = function(text, x, y, fontSize, options) {
    var glyphPaths = [];
    this.forEachGlyph(text, x, y, fontSize, options, function(glyph, gX, gY, gFontSize) {
        var glyphPath = glyph.getPath(gX, gY, gFontSize, options, this);
        glyphPaths.push(glyphPath);
    });

    return glyphPaths;
};

/**
 * Returns the advance width of a text.
 *
 * This is something different than Path.getBoundingBox() as for example a
 * suffixed whitespace increases the advanceWidth but not the bounding box
 * or an overhanging letter like a calligraphic 'f' might have a quite larger
 * bounding box than its advance width.
 *
 * This corresponds to canvas2dContext.measureText(text).width
 *
 * @param  {string} text - The text to create.
 * @param  {number} [fontSize=72] - Font size in pixels. We scale the glyph units by `1 / unitsPerEm * fontSize`.
 * @param  {GlyphRenderOptions=} options
 * @return advance width
 */
Font.prototype.getAdvanceWidth = function(text, fontSize, options) {
    return this.forEachGlyph(text, 0, 0, fontSize, options, function() {});
};

/**
 * Draw the text on the given drawing context.
 * @param  {CanvasRenderingContext2D} ctx - A 2D drawing context, like Canvas.
 * @param  {string} text - The text to create.
 * @param  {number} [x=0] - Horizontal position of the beginning of the text.
 * @param  {number} [y=0] - Vertical position of the *baseline* of the text.
 * @param  {number} [fontSize=72] - Font size in pixels. We scale the glyph units by `1 / unitsPerEm * fontSize`.
 * @param  {GlyphRenderOptions=} options
 */
Font.prototype.draw = function(ctx, text, x, y, fontSize, options) {
    this.getPath(text, x, y, fontSize, options).draw(ctx);
};

/**
 * Draw the points of all glyphs in the text.
 * On-curve points will be drawn in blue, off-curve points will be drawn in red.
 * @param {CanvasRenderingContext2D} ctx - A 2D drawing context, like Canvas.
 * @param {string} text - The text to create.
 * @param {number} [x=0] - Horizontal position of the beginning of the text.
 * @param {number} [y=0] - Vertical position of the *baseline* of the text.
 * @param {number} [fontSize=72] - Font size in pixels. We scale the glyph units by `1 / unitsPerEm * fontSize`.
 * @param {GlyphRenderOptions=} options
 */
Font.prototype.drawPoints = function(ctx, text, x, y, fontSize, options) {
    this.forEachGlyph(text, x, y, fontSize, options, function(glyph, gX, gY, gFontSize) {
        glyph.drawPoints(ctx, gX, gY, gFontSize);
    });
};

/**
 * Draw lines indicating important font measurements for all glyphs in the text.
 * Black lines indicate the origin of the coordinate system (point 0,0).
 * Blue lines indicate the glyph bounding box.
 * Green line indicates the advance width of the glyph.
 * @param {CanvasRenderingContext2D} ctx - A 2D drawing context, like Canvas.
 * @param {string} text - The text to create.
 * @param {number} [x=0] - Horizontal position of the beginning of the text.
 * @param {number} [y=0] - Vertical position of the *baseline* of the text.
 * @param {number} [fontSize=72] - Font size in pixels. We scale the glyph units by `1 / unitsPerEm * fontSize`.
 * @param {GlyphRenderOptions=} options
 */
Font.prototype.drawMetrics = function(ctx, text, x, y, fontSize, options) {
    this.forEachGlyph(text, x, y, fontSize, options, function(glyph, gX, gY, gFontSize) {
        glyph.drawMetrics(ctx, gX, gY, gFontSize);
    });
};

/**
 * @param  {string}
 * @return {string}
 */
Font.prototype.getEnglishName = function(name) {
    var translations = this.names[name];
    if (translations) {
        return translations.en;
    }
};

/**
 * Validate
 */
Font.prototype.validate = function() {
    var _this = this;

    function assert(predicate, message) {
    }

    function assertNamePresent(name) {
        var englishName = _this.getEnglishName(name);
        assert(englishName && englishName.trim().length > 0);
    }

    // Identification information
    assertNamePresent('fontFamily');
    assertNamePresent('weightName');
    assertNamePresent('manufacturer');
    assertNamePresent('copyright');
    assertNamePresent('version');

    // Dimension information
    assert(this.unitsPerEm > 0);
};

/**
 * Convert the font object to a SFNT data structure.
 * This structure contains all the necessary tables and metadata to create a binary OTF file.
 * @return {opentype.Table}
 */
Font.prototype.toTables = function() {
    return sfnt.fontToTable(this);
};
/**
 * @deprecated Font.toBuffer is deprecated. Use Font.toArrayBuffer instead.
 */
Font.prototype.toBuffer = function() {
    console.warn('Font.toBuffer is deprecated. Use Font.toArrayBuffer instead.');
    return this.toArrayBuffer();
};
/**
 * Converts a `opentype.Font` into an `ArrayBuffer`
 * @return {ArrayBuffer}
 */
Font.prototype.toArrayBuffer = function() {
    var sfntTable = this.toTables();
    var bytes = sfntTable.encode();
    var buffer = new ArrayBuffer(bytes.length);
    var intArray = new Uint8Array(buffer);
    for (var i = 0; i < bytes.length; i++) {
        intArray[i] = bytes[i];
    }

    return buffer;
};

/**
 * Initiate a download of the OpenType font.
 */
Font.prototype.download = function(fileName) {
    var familyName = this.getEnglishName('fontFamily');
    var styleName = this.getEnglishName('fontSubfamily');
    fileName = fileName || familyName.replace(/\s/g, '') + '-' + styleName + '.otf';
    var arrayBuffer = this.toArrayBuffer();

    if (isBrowser()) {
        window.URL = window.URL || window.webkitURL;

        if (window.URL) {
            var dataView = new DataView(arrayBuffer);
            var blob = new Blob([dataView], {type: 'font/opentype'});

            var link = document.createElement('a');
            link.href = window.URL.createObjectURL(blob);
            link.download = fileName;

            var event = document.createEvent('MouseEvents');
            event.initEvent('click', true, false);
            link.dispatchEvent(event);
        } else {
            console.warn('Font file could not be downloaded. Try using a different browser.');
        }
    } else {
        var fs = __webpack_require__(/*! fs */ "?4db5");
        var buffer = arrayBufferToNodeBuffer(arrayBuffer);
        fs.writeFileSync(fileName, buffer);
    }
};
/**
 * @private
 */
Font.prototype.fsSelectionValues = {
    ITALIC:              0x001, //1
    UNDERSCORE:          0x002, //2
    NEGATIVE:            0x004, //4
    OUTLINED:            0x008, //8
    STRIKEOUT:           0x010, //16
    BOLD:                0x020, //32
    REGULAR:             0x040, //64
    USER_TYPO_METRICS:   0x080, //128
    WWS:                 0x100, //256
    OBLIQUE:             0x200  //512
};

/**
 * @private
 */
Font.prototype.usWidthClasses = {
    ULTRA_CONDENSED: 1,
    EXTRA_CONDENSED: 2,
    CONDENSED: 3,
    SEMI_CONDENSED: 4,
    MEDIUM: 5,
    SEMI_EXPANDED: 6,
    EXPANDED: 7,
    EXTRA_EXPANDED: 8,
    ULTRA_EXPANDED: 9
};

/**
 * @private
 */
Font.prototype.usWeightClasses = {
    THIN: 100,
    EXTRA_LIGHT: 200,
    LIGHT: 300,
    NORMAL: 400,
    MEDIUM: 500,
    SEMI_BOLD: 600,
    BOLD: 700,
    EXTRA_BOLD: 800,
    BLACK:    900
};

// The `fvar` table stores font variation axes and instances.

function addName(name, names) {
    var nameString = JSON.stringify(name);
    var nameID = 256;
    for (var nameKey in names) {
        var n = parseInt(nameKey);
        if (!n || n < 256) {
            continue;
        }

        if (JSON.stringify(names[nameKey]) === nameString) {
            return n;
        }

        if (nameID <= n) {
            nameID = n + 1;
        }
    }

    names[nameID] = name;
    return nameID;
}

function makeFvarAxis(n, axis, names) {
    var nameID = addName(axis.name, names);
    return [
        {name: 'tag_' + n, type: 'TAG', value: axis.tag},
        {name: 'minValue_' + n, type: 'FIXED', value: axis.minValue << 16},
        {name: 'defaultValue_' + n, type: 'FIXED', value: axis.defaultValue << 16},
        {name: 'maxValue_' + n, type: 'FIXED', value: axis.maxValue << 16},
        {name: 'flags_' + n, type: 'USHORT', value: 0},
        {name: 'nameID_' + n, type: 'USHORT', value: nameID}
    ];
}

function parseFvarAxis(data, start, names) {
    var axis = {};
    var p = new parse.Parser(data, start);
    axis.tag = p.parseTag();
    axis.minValue = p.parseFixed();
    axis.defaultValue = p.parseFixed();
    axis.maxValue = p.parseFixed();
    p.skip('uShort', 1);  // reserved for flags; no values defined
    axis.name = names[p.parseUShort()] || {};
    return axis;
}

function makeFvarInstance(n, inst, axes, names) {
    var nameID = addName(inst.name, names);
    var fields = [
        {name: 'nameID_' + n, type: 'USHORT', value: nameID},
        {name: 'flags_' + n, type: 'USHORT', value: 0}
    ];

    for (var i = 0; i < axes.length; ++i) {
        var axisTag = axes[i].tag;
        fields.push({
            name: 'axis_' + n + ' ' + axisTag,
            type: 'FIXED',
            value: inst.coordinates[axisTag] << 16
        });
    }

    return fields;
}

function parseFvarInstance(data, start, axes, names) {
    var inst = {};
    var p = new parse.Parser(data, start);
    inst.name = names[p.parseUShort()] || {};
    p.skip('uShort', 1);  // reserved for flags; no values defined

    inst.coordinates = {};
    for (var i = 0; i < axes.length; ++i) {
        inst.coordinates[axes[i].tag] = p.parseFixed();
    }

    return inst;
}

function makeFvarTable(fvar, names) {
    var result = new table.Table('fvar', [
        {name: 'version', type: 'ULONG', value: 0x10000},
        {name: 'offsetToData', type: 'USHORT', value: 0},
        {name: 'countSizePairs', type: 'USHORT', value: 2},
        {name: 'axisCount', type: 'USHORT', value: fvar.axes.length},
        {name: 'axisSize', type: 'USHORT', value: 20},
        {name: 'instanceCount', type: 'USHORT', value: fvar.instances.length},
        {name: 'instanceSize', type: 'USHORT', value: 4 + fvar.axes.length * 4}
    ]);
    result.offsetToData = result.sizeOf();

    for (var i = 0; i < fvar.axes.length; i++) {
        result.fields = result.fields.concat(makeFvarAxis(i, fvar.axes[i], names));
    }

    for (var j = 0; j < fvar.instances.length; j++) {
        result.fields = result.fields.concat(makeFvarInstance(j, fvar.instances[j], fvar.axes, names));
    }

    return result;
}

function parseFvarTable(data, start, names) {
    var p = new parse.Parser(data, start);
    var tableVersion = p.parseULong();
    check.argument(tableVersion === 0x00010000, 'Unsupported fvar table version.');
    var offsetToData = p.parseOffset16();
    // Skip countSizePairs.
    p.skip('uShort', 1);
    var axisCount = p.parseUShort();
    var axisSize = p.parseUShort();
    var instanceCount = p.parseUShort();
    var instanceSize = p.parseUShort();

    var axes = [];
    for (var i = 0; i < axisCount; i++) {
        axes.push(parseFvarAxis(data, start + offsetToData + i * axisSize, names));
    }

    var instances = [];
    var instanceStart = start + offsetToData + axisCount * axisSize;
    for (var j = 0; j < instanceCount; j++) {
        instances.push(parseFvarInstance(data, instanceStart + j * instanceSize, axes, names));
    }

    return {axes: axes, instances: instances};
}

var fvar = { make: makeFvarTable, parse: parseFvarTable };

// The `GDEF` table contains various glyph properties

var attachList = function() {
    return {
        coverage: this.parsePointer(Parser.coverage),
        attachPoints: this.parseList(Parser.pointer(Parser.uShortList))
    };
};

var caretValue = function() {
    var format = this.parseUShort();
    check.argument(format === 1 || format === 2 || format === 3,
        'Unsupported CaretValue table version.');
    if (format === 1) {
        return { coordinate: this.parseShort() };
    } else if (format === 2) {
        return { pointindex: this.parseShort() };
    } else if (format === 3) {
        // Device / Variation Index tables unsupported
        return { coordinate: this.parseShort() };
    }
};

var ligGlyph = function() {
    return this.parseList(Parser.pointer(caretValue));
};

var ligCaretList = function() {
    return {
        coverage: this.parsePointer(Parser.coverage),
        ligGlyphs: this.parseList(Parser.pointer(ligGlyph))
    };
};

var markGlyphSets = function() {
    this.parseUShort(); // Version
    return this.parseList(Parser.pointer(Parser.coverage));
};

function parseGDEFTable(data, start) {
    start = start || 0;
    var p = new Parser(data, start);
    var tableVersion = p.parseVersion(1);
    check.argument(tableVersion === 1 || tableVersion === 1.2 || tableVersion === 1.3,
        'Unsupported GDEF table version.');
    var gdef = {
        version: tableVersion,
        classDef: p.parsePointer(Parser.classDef),
        attachList: p.parsePointer(attachList),
        ligCaretList: p.parsePointer(ligCaretList),
        markAttachClassDef: p.parsePointer(Parser.classDef)
    };
    if (tableVersion >= 1.2) {
        gdef.markGlyphSets = p.parsePointer(markGlyphSets);
    }
    return gdef;
}
var gdef = { parse: parseGDEFTable };

// The `GPOS` table contains kerning pairs, among other things.

var subtableParsers$1 = new Array(10);         // subtableParsers[0] is unused

// https://docs.microsoft.com/en-us/typography/opentype/spec/gpos#lookup-type-1-single-adjustment-positioning-subtable
// this = Parser instance
subtableParsers$1[1] = function parseLookup1() {
    var start = this.offset + this.relativeOffset;
    var posformat = this.parseUShort();
    if (posformat === 1) {
        return {
            posFormat: 1,
            coverage: this.parsePointer(Parser.coverage),
            value: this.parseValueRecord()
        };
    } else if (posformat === 2) {
        return {
            posFormat: 2,
            coverage: this.parsePointer(Parser.coverage),
            values: this.parseValueRecordList()
        };
    }
    check.assert(false, '0x' + start.toString(16) + ': GPOS lookup type 1 format must be 1 or 2.');
};

// https://docs.microsoft.com/en-us/typography/opentype/spec/gpos#lookup-type-2-pair-adjustment-positioning-subtable
subtableParsers$1[2] = function parseLookup2() {
    var start = this.offset + this.relativeOffset;
    var posFormat = this.parseUShort();
    check.assert(posFormat === 1 || posFormat === 2, '0x' + start.toString(16) + ': GPOS lookup type 2 format must be 1 or 2.');
    var coverage = this.parsePointer(Parser.coverage);
    var valueFormat1 = this.parseUShort();
    var valueFormat2 = this.parseUShort();
    if (posFormat === 1) {
        // Adjustments for Glyph Pairs
        return {
            posFormat: posFormat,
            coverage: coverage,
            valueFormat1: valueFormat1,
            valueFormat2: valueFormat2,
            pairSets: this.parseList(Parser.pointer(Parser.list(function() {
                return {        // pairValueRecord
                    secondGlyph: this.parseUShort(),
                    value1: this.parseValueRecord(valueFormat1),
                    value2: this.parseValueRecord(valueFormat2)
                };
            })))
        };
    } else if (posFormat === 2) {
        var classDef1 = this.parsePointer(Parser.classDef);
        var classDef2 = this.parsePointer(Parser.classDef);
        var class1Count = this.parseUShort();
        var class2Count = this.parseUShort();
        return {
            // Class Pair Adjustment
            posFormat: posFormat,
            coverage: coverage,
            valueFormat1: valueFormat1,
            valueFormat2: valueFormat2,
            classDef1: classDef1,
            classDef2: classDef2,
            class1Count: class1Count,
            class2Count: class2Count,
            classRecords: this.parseList(class1Count, Parser.list(class2Count, function() {
                return {
                    value1: this.parseValueRecord(valueFormat1),
                    value2: this.parseValueRecord(valueFormat2)
                };
            }))
        };
    }
};

subtableParsers$1[3] = function parseLookup3() { return { error: 'GPOS Lookup 3 not supported' }; };
subtableParsers$1[4] = function parseLookup4() { return { error: 'GPOS Lookup 4 not supported' }; };
subtableParsers$1[5] = function parseLookup5() { return { error: 'GPOS Lookup 5 not supported' }; };
subtableParsers$1[6] = function parseLookup6() { return { error: 'GPOS Lookup 6 not supported' }; };
subtableParsers$1[7] = function parseLookup7() { return { error: 'GPOS Lookup 7 not supported' }; };
subtableParsers$1[8] = function parseLookup8() { return { error: 'GPOS Lookup 8 not supported' }; };
subtableParsers$1[9] = function parseLookup9() { return { error: 'GPOS Lookup 9 not supported' }; };

// https://docs.microsoft.com/en-us/typography/opentype/spec/gpos
function parseGposTable(data, start) {
    start = start || 0;
    var p = new Parser(data, start);
    var tableVersion = p.parseVersion(1);
    check.argument(tableVersion === 1 || tableVersion === 1.1, 'Unsupported GPOS table version ' + tableVersion);

    if (tableVersion === 1) {
        return {
            version: tableVersion,
            scripts: p.parseScriptList(),
            features: p.parseFeatureList(),
            lookups: p.parseLookupList(subtableParsers$1)
        };
    } else {
        return {
            version: tableVersion,
            scripts: p.parseScriptList(),
            features: p.parseFeatureList(),
            lookups: p.parseLookupList(subtableParsers$1),
            variations: p.parseFeatureVariationsList()
        };
    }

}

// GPOS Writing //////////////////////////////////////////////
// NOT SUPPORTED
var subtableMakers$1 = new Array(10);

function makeGposTable(gpos) {
    return new table.Table('GPOS', [
        {name: 'version', type: 'ULONG', value: 0x10000},
        {name: 'scripts', type: 'TABLE', value: new table.ScriptList(gpos.scripts)},
        {name: 'features', type: 'TABLE', value: new table.FeatureList(gpos.features)},
        {name: 'lookups', type: 'TABLE', value: new table.LookupList(gpos.lookups, subtableMakers$1)}
    ]);
}

var gpos = { parse: parseGposTable, make: makeGposTable };

// The `kern` table contains kerning pairs.

function parseWindowsKernTable(p) {
    var pairs = {};
    // Skip nTables.
    p.skip('uShort');
    var subtableVersion = p.parseUShort();
    check.argument(subtableVersion === 0, 'Unsupported kern sub-table version.');
    // Skip subtableLength, subtableCoverage
    p.skip('uShort', 2);
    var nPairs = p.parseUShort();
    // Skip searchRange, entrySelector, rangeShift.
    p.skip('uShort', 3);
    for (var i = 0; i < nPairs; i += 1) {
        var leftIndex = p.parseUShort();
        var rightIndex = p.parseUShort();
        var value = p.parseShort();
        pairs[leftIndex + ',' + rightIndex] = value;
    }
    return pairs;
}

function parseMacKernTable(p) {
    var pairs = {};
    // The Mac kern table stores the version as a fixed (32 bits) but we only loaded the first 16 bits.
    // Skip the rest.
    p.skip('uShort');
    var nTables = p.parseULong();
    //check.argument(nTables === 1, 'Only 1 subtable is supported (got ' + nTables + ').');
    if (nTables > 1) {
        console.warn('Only the first kern subtable is supported.');
    }
    p.skip('uLong');
    var coverage = p.parseUShort();
    var subtableVersion = coverage & 0xFF;
    p.skip('uShort');
    if (subtableVersion === 0) {
        var nPairs = p.parseUShort();
        // Skip searchRange, entrySelector, rangeShift.
        p.skip('uShort', 3);
        for (var i = 0; i < nPairs; i += 1) {
            var leftIndex = p.parseUShort();
            var rightIndex = p.parseUShort();
            var value = p.parseShort();
            pairs[leftIndex + ',' + rightIndex] = value;
        }
    }
    return pairs;
}

// Parse the `kern` table which contains kerning pairs.
function parseKernTable(data, start) {
    var p = new parse.Parser(data, start);
    var tableVersion = p.parseUShort();
    if (tableVersion === 0) {
        return parseWindowsKernTable(p);
    } else if (tableVersion === 1) {
        return parseMacKernTable(p);
    } else {
        throw new Error('Unsupported kern table version (' + tableVersion + ').');
    }
}

var kern = { parse: parseKernTable };

// The `loca` table stores the offsets to the locations of the glyphs in the font.

// Parse the `loca` table. This table stores the offsets to the locations of the glyphs in the font,
// relative to the beginning of the glyphData table.
// The number of glyphs stored in the `loca` table is specified in the `maxp` table (under numGlyphs)
// The loca table has two versions: a short version where offsets are stored as uShorts, and a long
// version where offsets are stored as uLongs. The `head` table specifies which version to use
// (under indexToLocFormat).
function parseLocaTable(data, start, numGlyphs, shortVersion) {
    var p = new parse.Parser(data, start);
    var parseFn = shortVersion ? p.parseUShort : p.parseULong;
    // There is an extra entry after the last index element to compute the length of the last glyph.
    // That's why we use numGlyphs + 1.
    var glyphOffsets = [];
    for (var i = 0; i < numGlyphs + 1; i += 1) {
        var glyphOffset = parseFn.call(p);
        if (shortVersion) {
            // The short table version stores the actual offset divided by 2.
            glyphOffset *= 2;
        }

        glyphOffsets.push(glyphOffset);
    }

    return glyphOffsets;
}

var loca = { parse: parseLocaTable };

// opentype.js

/**
 * The opentype library.
 * @namespace opentype
 */

// File loaders /////////////////////////////////////////////////////////
/**
 * Loads a font from a file. The callback throws an error message as the first parameter if it fails
 * and the font as an ArrayBuffer in the second parameter if it succeeds.
 * @param  {string} path - The path of the file
 * @param  {Function} callback - The function to call when the font load completes
 */
function loadFromFile(path, callback) {
    var fs = __webpack_require__(/*! fs */ "?4db5");
    fs.readFile(path, function(err, buffer) {
        if (err) {
            return callback(err.message);
        }

        callback(null, nodeBufferToArrayBuffer(buffer));
    });
}
/**
 * Loads a font from a URL. The callback throws an error message as the first parameter if it fails
 * and the font as an ArrayBuffer in the second parameter if it succeeds.
 * @param  {string} url - The URL of the font file.
 * @param  {Function} callback - The function to call when the font load completes
 */
function loadFromUrl(url, callback) {
    var request = new XMLHttpRequest();
    request.open('get', url, true);
    request.responseType = 'arraybuffer';
    request.onload = function() {
        if (request.response) {
            return callback(null, request.response);
        } else {
            return callback('Font could not be loaded: ' + request.statusText);
        }
    };

    request.onerror = function () {
        callback('Font could not be loaded');
    };

    request.send();
}

// Table Directory Entries //////////////////////////////////////////////
/**
 * Parses OpenType table entries.
 * @param  {DataView}
 * @param  {Number}
 * @return {Object[]}
 */
function parseOpenTypeTableEntries(data, numTables) {
    var tableEntries = [];
    var p = 12;
    for (var i = 0; i < numTables; i += 1) {
        var tag = parse.getTag(data, p);
        var checksum = parse.getULong(data, p + 4);
        var offset = parse.getULong(data, p + 8);
        var length = parse.getULong(data, p + 12);
        tableEntries.push({tag: tag, checksum: checksum, offset: offset, length: length, compression: false});
        p += 16;
    }

    return tableEntries;
}

/**
 * Parses WOFF table entries.
 * @param  {DataView}
 * @param  {Number}
 * @return {Object[]}
 */
function parseWOFFTableEntries(data, numTables) {
    var tableEntries = [];
    var p = 44; // offset to the first table directory entry.
    for (var i = 0; i < numTables; i += 1) {
        var tag = parse.getTag(data, p);
        var offset = parse.getULong(data, p + 4);
        var compLength = parse.getULong(data, p + 8);
        var origLength = parse.getULong(data, p + 12);
        var compression = (void 0);
        if (compLength < origLength) {
            compression = 'WOFF';
        } else {
            compression = false;
        }

        tableEntries.push({tag: tag, offset: offset, compression: compression,
            compressedLength: compLength, length: origLength});
        p += 20;
    }

    return tableEntries;
}

/**
 * @typedef TableData
 * @type Object
 * @property {DataView} data - The DataView
 * @property {number} offset - The data offset.
 */

/**
 * @param  {DataView}
 * @param  {Object}
 * @return {TableData}
 */
function uncompressTable(data, tableEntry) {
    if (tableEntry.compression === 'WOFF') {
        var inBuffer = new Uint8Array(data.buffer, tableEntry.offset + 2, tableEntry.compressedLength - 2);
        var outBuffer = new Uint8Array(tableEntry.length);
        tinyInflate(inBuffer, outBuffer);
        if (outBuffer.byteLength !== tableEntry.length) {
            throw new Error('Decompression error: ' + tableEntry.tag + ' decompressed length doesn\'t match recorded length');
        }

        var view = new DataView(outBuffer.buffer, 0);
        return {data: view, offset: 0};
    } else {
        return {data: data, offset: tableEntry.offset};
    }
}

// Public API ///////////////////////////////////////////////////////////

/**
 * Parse the OpenType file data (as an ArrayBuffer) and return a Font object.
 * Throws an error if the font could not be parsed.
 * @param  {ArrayBuffer}
 * @param  {Object} opt - options for parsing
 * @return {opentype.Font}
 */
function parseBuffer(buffer, opt) {
    opt = (opt === undefined || opt === null) ?  {} : opt;

    var indexToLocFormat;
    var ltagTable;

    // Since the constructor can also be called to create new fonts from scratch, we indicate this
    // should be an empty font that we'll fill with our own data.
    var font = new Font({empty: true});

    // OpenType fonts use big endian byte ordering.
    // We can't rely on typed array view types, because they operate with the endianness of the host computer.
    // Instead we use DataViews where we can specify endianness.
    var data = new DataView(buffer, 0);
    var numTables;
    var tableEntries = [];
    var signature = parse.getTag(data, 0);
    if (signature === String.fromCharCode(0, 1, 0, 0) || signature === 'true' || signature === 'typ1') {
        font.outlinesFormat = 'truetype';
        numTables = parse.getUShort(data, 4);
        tableEntries = parseOpenTypeTableEntries(data, numTables);
    } else if (signature === 'OTTO') {
        font.outlinesFormat = 'cff';
        numTables = parse.getUShort(data, 4);
        tableEntries = parseOpenTypeTableEntries(data, numTables);
    } else if (signature === 'wOFF') {
        var flavor = parse.getTag(data, 4);
        if (flavor === String.fromCharCode(0, 1, 0, 0)) {
            font.outlinesFormat = 'truetype';
        } else if (flavor === 'OTTO') {
            font.outlinesFormat = 'cff';
        } else {
            throw new Error('Unsupported OpenType flavor ' + signature);
        }

        numTables = parse.getUShort(data, 12);
        tableEntries = parseWOFFTableEntries(data, numTables);
    } else {
        throw new Error('Unsupported OpenType signature ' + signature);
    }

    var cffTableEntry;
    var fvarTableEntry;
    var glyfTableEntry;
    var gdefTableEntry;
    var gposTableEntry;
    var gsubTableEntry;
    var hmtxTableEntry;
    var kernTableEntry;
    var locaTableEntry;
    var nameTableEntry;
    var metaTableEntry;
    var p;

    for (var i = 0; i < numTables; i += 1) {
        var tableEntry = tableEntries[i];
        var table = (void 0);
        switch (tableEntry.tag) {
            case 'cmap':
                table = uncompressTable(data, tableEntry);
                font.tables.cmap = cmap.parse(table.data, table.offset);
                font.encoding = new CmapEncoding(font.tables.cmap);
                break;
            case 'cvt ' :
                table = uncompressTable(data, tableEntry);
                p = new parse.Parser(table.data, table.offset);
                font.tables.cvt = p.parseShortList(tableEntry.length / 2);
                break;
            case 'fvar':
                fvarTableEntry = tableEntry;
                break;
            case 'fpgm' :
                table = uncompressTable(data, tableEntry);
                p = new parse.Parser(table.data, table.offset);
                font.tables.fpgm = p.parseByteList(tableEntry.length);
                break;
            case 'head':
                table = uncompressTable(data, tableEntry);
                font.tables.head = head.parse(table.data, table.offset);
                font.unitsPerEm = font.tables.head.unitsPerEm;
                indexToLocFormat = font.tables.head.indexToLocFormat;
                break;
            case 'hhea':
                table = uncompressTable(data, tableEntry);
                font.tables.hhea = hhea.parse(table.data, table.offset);
                font.ascender = font.tables.hhea.ascender;
                font.descender = font.tables.hhea.descender;
                font.numberOfHMetrics = font.tables.hhea.numberOfHMetrics;
                break;
            case 'hmtx':
                hmtxTableEntry = tableEntry;
                break;
            case 'ltag':
                table = uncompressTable(data, tableEntry);
                ltagTable = ltag.parse(table.data, table.offset);
                break;
            case 'maxp':
                table = uncompressTable(data, tableEntry);
                font.tables.maxp = maxp.parse(table.data, table.offset);
                font.numGlyphs = font.tables.maxp.numGlyphs;
                break;
            case 'name':
                nameTableEntry = tableEntry;
                break;
            case 'OS/2':
                table = uncompressTable(data, tableEntry);
                font.tables.os2 = os2.parse(table.data, table.offset);
                break;
            case 'post':
                table = uncompressTable(data, tableEntry);
                font.tables.post = post.parse(table.data, table.offset);
                font.glyphNames = new GlyphNames(font.tables.post);
                break;
            case 'prep' :
                table = uncompressTable(data, tableEntry);
                p = new parse.Parser(table.data, table.offset);
                font.tables.prep = p.parseByteList(tableEntry.length);
                break;
            case 'glyf':
                glyfTableEntry = tableEntry;
                break;
            case 'loca':
                locaTableEntry = tableEntry;
                break;
            case 'CFF ':
                cffTableEntry = tableEntry;
                break;
            case 'kern':
                kernTableEntry = tableEntry;
                break;
            case 'GDEF':
                gdefTableEntry = tableEntry;
                break;
            case 'GPOS':
                gposTableEntry = tableEntry;
                break;
            case 'GSUB':
                gsubTableEntry = tableEntry;
                break;
            case 'meta':
                metaTableEntry = tableEntry;
                break;
        }
    }

    var nameTable = uncompressTable(data, nameTableEntry);
    font.tables.name = _name.parse(nameTable.data, nameTable.offset, ltagTable);
    font.names = font.tables.name;

    if (glyfTableEntry && locaTableEntry) {
        var shortVersion = indexToLocFormat === 0;
        var locaTable = uncompressTable(data, locaTableEntry);
        var locaOffsets = loca.parse(locaTable.data, locaTable.offset, font.numGlyphs, shortVersion);
        var glyfTable = uncompressTable(data, glyfTableEntry);
        font.glyphs = glyf.parse(glyfTable.data, glyfTable.offset, locaOffsets, font, opt);
    } else if (cffTableEntry) {
        var cffTable = uncompressTable(data, cffTableEntry);
        cff.parse(cffTable.data, cffTable.offset, font, opt);
    } else {
        throw new Error('Font doesn\'t contain TrueType or CFF outlines.');
    }

    var hmtxTable = uncompressTable(data, hmtxTableEntry);
    hmtx.parse(font, hmtxTable.data, hmtxTable.offset, font.numberOfHMetrics, font.numGlyphs, font.glyphs, opt);
    addGlyphNames(font, opt);

    if (kernTableEntry) {
        var kernTable = uncompressTable(data, kernTableEntry);
        font.kerningPairs = kern.parse(kernTable.data, kernTable.offset);
    } else {
        font.kerningPairs = {};
    }

    if (gdefTableEntry) {
        var gdefTable = uncompressTable(data, gdefTableEntry);
        font.tables.gdef = gdef.parse(gdefTable.data, gdefTable.offset);
    }

    if (gposTableEntry) {
        var gposTable = uncompressTable(data, gposTableEntry);
        font.tables.gpos = gpos.parse(gposTable.data, gposTable.offset);
        font.position.init();
    }

    if (gsubTableEntry) {
        var gsubTable = uncompressTable(data, gsubTableEntry);
        font.tables.gsub = gsub.parse(gsubTable.data, gsubTable.offset);
    }

    if (fvarTableEntry) {
        var fvarTable = uncompressTable(data, fvarTableEntry);
        font.tables.fvar = fvar.parse(fvarTable.data, fvarTable.offset, font.names);
    }

    if (metaTableEntry) {
        var metaTable = uncompressTable(data, metaTableEntry);
        font.tables.meta = meta.parse(metaTable.data, metaTable.offset);
        font.metas = font.tables.meta;
    }

    return font;
}

/**
 * Asynchronously load the font from a URL or a filesystem. When done, call the callback
 * with two arguments `(err, font)`. The `err` will be null on success,
 * the `font` is a Font object.
 * We use the node.js callback convention so that
 * opentype.js can integrate with frameworks like async.js.
 * @alias opentype.load
 * @param  {string} url - The URL of the font to load.
 * @param  {Function} callback - The callback.
 */
function load(url, callback, opt) {
    opt = (opt === undefined || opt === null) ?  {} : opt;
    var isNode = typeof window === 'undefined';
    var loadFn = isNode && !opt.isUrl ? loadFromFile : loadFromUrl;

    return new Promise(function (resolve, reject) {
        loadFn(url, function(err, arrayBuffer) {
            if (err) {
                if (callback) {
                    return callback(err);
                } else {
                    reject(err);
                }
            }
            var font;
            try {
                font = parseBuffer(arrayBuffer, opt);
            } catch (e) {
                if (callback) {
                    return callback(e, null);
                } else {
                    reject(e);
                }
            }
            if (callback) {
                return callback(null, font);
            } else {
                resolve(font);
            }
        });
    });
}

/**
 * Synchronously load the font from a URL or file.
 * When done, returns the font object or throws an error.
 * @alias opentype.loadSync
 * @param  {string} url - The URL of the font to load.
 * @param  {Object} opt - opt.lowMemory
 * @return {opentype.Font}
 */
function loadSync(url, opt) {
    var fs = __webpack_require__(/*! fs */ "?4db5");
    var buffer = fs.readFileSync(url);
    return parseBuffer(nodeBufferToArrayBuffer(buffer), opt);
}

var opentype = /*#__PURE__*/Object.freeze({
	__proto__: null,
	Font: Font,
	Glyph: Glyph,
	Path: Path,
	BoundingBox: BoundingBox,
	_parse: parse,
	parse: parseBuffer,
	load: load,
	loadSync: loadSync
});

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (opentype);

//# sourceMappingURL=opentype.module.js.map


/***/ }),

/***/ "./ltbl-occt/ltbl-occt.js":
/*!********************************!*\
  !*** ./ltbl-occt/ltbl-occt.js ***!
  \********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
var __filename = "/index.js";
var __dirname = "/";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
var Module = (function () {
    var _scriptDir = typeof document !== 'undefined' && document.currentScript ? document.currentScript.src : undefined;
    if (true)
        _scriptDir = _scriptDir || __filename;
    return (function (Module) {
        Module = Module || {};
        var Module = typeof Module != "undefined" ? Module : {};
        var readyPromiseResolve, readyPromiseReject;
        Module["ready"] = new Promise(function (resolve, reject) { readyPromiseResolve = resolve; readyPromiseReject = reject; });
        var moduleOverrides = Object.assign({}, Module);
        var arguments_ = [];
        var thisProgram = "./this.program";
        var quit_ = function (status, toThrow) { throw toThrow; };
        var ENVIRONMENT_IS_WEB = typeof window == "object";
        var ENVIRONMENT_IS_WORKER = typeof importScripts == "function";
        var ENVIRONMENT_IS_NODE = typeof process == "object" && typeof process.versions == "object" && typeof process.versions.node == "string";
        var scriptDirectory = "";
        function locateFile(path) { if (Module["locateFile"]) {
            return Module["locateFile"](path, scriptDirectory);
        } return scriptDirectory + path; }
        var read_, readAsync, readBinary, setWindowTitle;
        function logExceptionOnExit(e) { if (e instanceof ExitStatus)
            return; var toLog = e; err("exiting due to exception: " + toLog); }
        var fs;
        var nodePath;
        var requireNodeFS;
        if (ENVIRONMENT_IS_NODE) {
            if (ENVIRONMENT_IS_WORKER) {
                scriptDirectory = (__webpack_require__(/*! path */ "?f461").dirname)(scriptDirectory) + "/";
            }
            else {
                scriptDirectory = __dirname + "/";
            }
            requireNodeFS = function () { if (!nodePath) {
                fs = __webpack_require__(/*! fs */ "?0fcc");
                nodePath = __webpack_require__(/*! path */ "?f461");
            } };
            read_ = function shell_read(filename, binary) { requireNodeFS(); filename = nodePath["normalize"](filename); return fs.readFileSync(filename, binary ? undefined : "utf8"); };
            readBinary = function (filename) { var ret = read_(filename, true); if (!ret.buffer) {
                ret = new Uint8Array(ret);
            } return ret; };
            readAsync = function (filename, onload, onerror) { requireNodeFS(); filename = nodePath["normalize"](filename); fs.readFile(filename, function (err, data) { if (err)
                onerror(err);
            else
                onload(data.buffer); }); };
            if (process["argv"].length > 1) {
                thisProgram = process["argv"][1].replace(/\\/g, "/");
            }
            arguments_ = process["argv"].slice(2);
            process["on"]("uncaughtException", function (ex) { if (!(ex instanceof ExitStatus)) {
                throw ex;
            } });
            process["on"]("unhandledRejection", function (reason) { throw reason; });
            quit_ = function (status, toThrow) { if (keepRuntimeAlive()) {
                process["exitCode"] = status;
                throw toThrow;
            } logExceptionOnExit(toThrow); process["exit"](status); };
            Module["inspect"] = function () { return "[Emscripten Module object]"; };
        }
        else if (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) {
            if (ENVIRONMENT_IS_WORKER) {
                scriptDirectory = self.location.href;
            }
            else if (typeof document != "undefined" && document.currentScript) {
                scriptDirectory = document.currentScript.src;
            }
            if (_scriptDir) {
                scriptDirectory = _scriptDir;
            }
            if (scriptDirectory.indexOf("blob:") !== 0) {
                scriptDirectory = scriptDirectory.substr(0, scriptDirectory.replace(/[?#].*/, "").lastIndexOf("/") + 1);
            }
            else {
                scriptDirectory = "";
            }
            {
                read_ = function (url) { var xhr = new XMLHttpRequest; xhr.open("GET", url, false); xhr.send(null); return xhr.responseText; };
                if (ENVIRONMENT_IS_WORKER) {
                    readBinary = function (url) { var xhr = new XMLHttpRequest; xhr.open("GET", url, false); xhr.responseType = "arraybuffer"; xhr.send(null); return new Uint8Array(xhr.response); };
                }
                readAsync = function (url, onload, onerror) { var xhr = new XMLHttpRequest; xhr.open("GET", url, true); xhr.responseType = "arraybuffer"; xhr.onload = function () { if (xhr.status == 200 || xhr.status == 0 && xhr.response) {
                    onload(xhr.response);
                    return;
                } onerror(); }; xhr.onerror = onerror; xhr.send(null); };
            }
            setWindowTitle = function (title) { return document.title = title; };
        }
        else { }
        var out = Module["print"] || console.log.bind(console);
        var err = Module["printErr"] || console.warn.bind(console);
        Object.assign(Module, moduleOverrides);
        moduleOverrides = null;
        if (Module["arguments"])
            arguments_ = Module["arguments"];
        if (Module["thisProgram"])
            thisProgram = Module["thisProgram"];
        if (Module["quit"])
            quit_ = Module["quit"];
        var POINTER_SIZE = 4;
        function warnOnce(text) { if (!warnOnce.shown)
            warnOnce.shown = {}; if (!warnOnce.shown[text]) {
            warnOnce.shown[text] = 1;
            err(text);
        } }
        var tempRet0 = 0;
        var setTempRet0 = function (value) { tempRet0 = value; };
        var wasmBinary;
        if (Module["wasmBinary"])
            wasmBinary = Module["wasmBinary"];
        var noExitRuntime = Module["noExitRuntime"] || true;
        if (typeof WebAssembly != "object") {
            abort("no native wasm support detected");
        }
        var wasmMemory;
        var ABORT = false;
        var EXITSTATUS;
        function assert(condition, text) { if (!condition) {
            abort(text);
        } }
        var UTF8Decoder = typeof TextDecoder != "undefined" ? new TextDecoder("utf8") : undefined;
        function UTF8ArrayToString(heapOrArray, idx, maxBytesToRead) { idx >>>= 0; var endIdx = idx + maxBytesToRead; var endPtr = idx; while (heapOrArray[endPtr] && !(endPtr >= endIdx))
            ++endPtr; if (endPtr - idx > 16 && heapOrArray.buffer && UTF8Decoder) {
            return UTF8Decoder.decode(heapOrArray.subarray(idx, endPtr));
        }
        else {
            var str = "";
            while (idx < endPtr) {
                var u0 = heapOrArray[idx++];
                if (!(u0 & 128)) {
                    str += String.fromCharCode(u0);
                    continue;
                }
                var u1 = heapOrArray[idx++] & 63;
                if ((u0 & 224) == 192) {
                    str += String.fromCharCode((u0 & 31) << 6 | u1);
                    continue;
                }
                var u2 = heapOrArray[idx++] & 63;
                if ((u0 & 240) == 224) {
                    u0 = (u0 & 15) << 12 | u1 << 6 | u2;
                }
                else {
                    u0 = (u0 & 7) << 18 | u1 << 12 | u2 << 6 | heapOrArray[idx++] & 63;
                }
                if (u0 < 65536) {
                    str += String.fromCharCode(u0);
                }
                else {
                    var ch = u0 - 65536;
                    str += String.fromCharCode(55296 | ch >> 10, 56320 | ch & 1023);
                }
            }
        } return str; }
        function UTF8ToString(ptr, maxBytesToRead) { ptr >>>= 0; return ptr ? UTF8ArrayToString(HEAPU8, ptr, maxBytesToRead) : ""; }
        function stringToUTF8Array(str, heap, outIdx, maxBytesToWrite) { outIdx >>>= 0; if (!(maxBytesToWrite > 0))
            return 0; var startIdx = outIdx; var endIdx = outIdx + maxBytesToWrite - 1; for (var i = 0; i < str.length; ++i) {
            var u = str.charCodeAt(i);
            if (u >= 55296 && u <= 57343) {
                var u1 = str.charCodeAt(++i);
                u = 65536 + ((u & 1023) << 10) | u1 & 1023;
            }
            if (u <= 127) {
                if (outIdx >= endIdx)
                    break;
                heap[outIdx++ >>> 0] = u;
            }
            else if (u <= 2047) {
                if (outIdx + 1 >= endIdx)
                    break;
                heap[outIdx++ >>> 0] = 192 | u >> 6;
                heap[outIdx++ >>> 0] = 128 | u & 63;
            }
            else if (u <= 65535) {
                if (outIdx + 2 >= endIdx)
                    break;
                heap[outIdx++ >>> 0] = 224 | u >> 12;
                heap[outIdx++ >>> 0] = 128 | u >> 6 & 63;
                heap[outIdx++ >>> 0] = 128 | u & 63;
            }
            else {
                if (outIdx + 3 >= endIdx)
                    break;
                heap[outIdx++ >>> 0] = 240 | u >> 18;
                heap[outIdx++ >>> 0] = 128 | u >> 12 & 63;
                heap[outIdx++ >>> 0] = 128 | u >> 6 & 63;
                heap[outIdx++ >>> 0] = 128 | u & 63;
            }
        } heap[outIdx >>> 0] = 0; return outIdx - startIdx; }
        function stringToUTF8(str, outPtr, maxBytesToWrite) { return stringToUTF8Array(str, HEAPU8, outPtr, maxBytesToWrite); }
        function lengthBytesUTF8(str) { var len = 0; for (var i = 0; i < str.length; ++i) {
            var u = str.charCodeAt(i);
            if (u >= 55296 && u <= 57343)
                u = 65536 + ((u & 1023) << 10) | str.charCodeAt(++i) & 1023;
            if (u <= 127)
                ++len;
            else if (u <= 2047)
                len += 2;
            else if (u <= 65535)
                len += 3;
            else
                len += 4;
        } return len; }
        var UTF16Decoder = typeof TextDecoder != "undefined" ? new TextDecoder("utf-16le") : undefined;
        function UTF16ToString(ptr, maxBytesToRead) { var endPtr = ptr; var idx = endPtr >> 1; var maxIdx = idx + maxBytesToRead / 2; while (!(idx >= maxIdx) && HEAPU16[idx >>> 0])
            ++idx; endPtr = idx << 1; if (endPtr - ptr > 32 && UTF16Decoder) {
            return UTF16Decoder.decode(HEAPU8.subarray(ptr >>> 0, endPtr >>> 0));
        }
        else {
            var str = "";
            for (var i = 0; !(i >= maxBytesToRead / 2); ++i) {
                var codeUnit = HEAP16[ptr + i * 2 >>> 1];
                if (codeUnit == 0)
                    break;
                str += String.fromCharCode(codeUnit);
            }
            return str;
        } }
        function stringToUTF16(str, outPtr, maxBytesToWrite) { if (maxBytesToWrite === undefined) {
            maxBytesToWrite = 2147483647;
        } if (maxBytesToWrite < 2)
            return 0; maxBytesToWrite -= 2; var startPtr = outPtr; var numCharsToWrite = maxBytesToWrite < str.length * 2 ? maxBytesToWrite / 2 : str.length; for (var i = 0; i < numCharsToWrite; ++i) {
            var codeUnit = str.charCodeAt(i);
            HEAP16[outPtr >>> 1] = codeUnit;
            outPtr += 2;
        } HEAP16[outPtr >>> 1] = 0; return outPtr - startPtr; }
        function lengthBytesUTF16(str) { return str.length * 2; }
        function UTF32ToString(ptr, maxBytesToRead) { var i = 0; var str = ""; while (!(i >= maxBytesToRead / 4)) {
            var utf32 = HEAP32[ptr + i * 4 >>> 2];
            if (utf32 == 0)
                break;
            ++i;
            if (utf32 >= 65536) {
                var ch = utf32 - 65536;
                str += String.fromCharCode(55296 | ch >> 10, 56320 | ch & 1023);
            }
            else {
                str += String.fromCharCode(utf32);
            }
        } return str; }
        function stringToUTF32(str, outPtr, maxBytesToWrite) { outPtr >>>= 0; if (maxBytesToWrite === undefined) {
            maxBytesToWrite = 2147483647;
        } if (maxBytesToWrite < 4)
            return 0; var startPtr = outPtr; var endPtr = startPtr + maxBytesToWrite - 4; for (var i = 0; i < str.length; ++i) {
            var codeUnit = str.charCodeAt(i);
            if (codeUnit >= 55296 && codeUnit <= 57343) {
                var trailSurrogate = str.charCodeAt(++i);
                codeUnit = 65536 + ((codeUnit & 1023) << 10) | trailSurrogate & 1023;
            }
            HEAP32[outPtr >>> 2] = codeUnit;
            outPtr += 4;
            if (outPtr + 4 > endPtr)
                break;
        } HEAP32[outPtr >>> 2] = 0; return outPtr - startPtr; }
        function lengthBytesUTF32(str) { var len = 0; for (var i = 0; i < str.length; ++i) {
            var codeUnit = str.charCodeAt(i);
            if (codeUnit >= 55296 && codeUnit <= 57343)
                ++i;
            len += 4;
        } return len; }
        function allocateUTF8(str) { var size = lengthBytesUTF8(str) + 1; var ret = _malloc(size); if (ret)
            stringToUTF8Array(str, HEAP8, ret, size); return ret; }
        function writeArrayToMemory(array, buffer) { HEAP8.set(array, buffer >>> 0); }
        function writeAsciiToMemory(str, buffer, dontAddNull) { for (var i = 0; i < str.length; ++i) {
            HEAP8[buffer++ >>> 0] = str.charCodeAt(i);
        } if (!dontAddNull)
            HEAP8[buffer >>> 0] = 0; }
        var buffer, HEAP8, HEAPU8, HEAP16, HEAPU16, HEAP32, HEAPU32, HEAPF32, HEAPF64;
        function updateGlobalBufferAndViews(buf) { buffer = buf; Module["HEAP8"] = HEAP8 = new Int8Array(buf); Module["HEAP16"] = HEAP16 = new Int16Array(buf); Module["HEAP32"] = HEAP32 = new Int32Array(buf); Module["HEAPU8"] = HEAPU8 = new Uint8Array(buf); Module["HEAPU16"] = HEAPU16 = new Uint16Array(buf); Module["HEAPU32"] = HEAPU32 = new Uint32Array(buf); Module["HEAPF32"] = HEAPF32 = new Float32Array(buf); Module["HEAPF64"] = HEAPF64 = new Float64Array(buf); }
        var INITIAL_MEMORY = Module["INITIAL_MEMORY"] || 104857600;
        var wasmTable;
        var __ATPRERUN__ = [];
        var __ATINIT__ = [];
        var __ATPOSTRUN__ = [];
        var runtimeInitialized = false;
        function keepRuntimeAlive() { return noExitRuntime; }
        function preRun() { if (Module["preRun"]) {
            if (typeof Module["preRun"] == "function")
                Module["preRun"] = [Module["preRun"]];
            while (Module["preRun"].length) {
                addOnPreRun(Module["preRun"].shift());
            }
        } callRuntimeCallbacks(__ATPRERUN__); }
        function initRuntime() { runtimeInitialized = true; if (!Module["noFSInit"] && !FS.init.initialized)
            FS.init(); FS.ignorePermissions = false; TTY.init(); callRuntimeCallbacks(__ATINIT__); }
        function postRun() { if (Module["postRun"]) {
            if (typeof Module["postRun"] == "function")
                Module["postRun"] = [Module["postRun"]];
            while (Module["postRun"].length) {
                addOnPostRun(Module["postRun"].shift());
            }
        } callRuntimeCallbacks(__ATPOSTRUN__); }
        function addOnPreRun(cb) { __ATPRERUN__.unshift(cb); }
        function addOnInit(cb) { __ATINIT__.unshift(cb); }
        function addOnPostRun(cb) { __ATPOSTRUN__.unshift(cb); }
        var runDependencies = 0;
        var runDependencyWatcher = null;
        var dependenciesFulfilled = null;
        function getUniqueRunDependency(id) { return id; }
        function addRunDependency(id) { runDependencies++; if (Module["monitorRunDependencies"]) {
            Module["monitorRunDependencies"](runDependencies);
        } }
        function removeRunDependency(id) { runDependencies--; if (Module["monitorRunDependencies"]) {
            Module["monitorRunDependencies"](runDependencies);
        } if (runDependencies == 0) {
            if (runDependencyWatcher !== null) {
                clearInterval(runDependencyWatcher);
                runDependencyWatcher = null;
            }
            if (dependenciesFulfilled) {
                var callback = dependenciesFulfilled;
                dependenciesFulfilled = null;
                callback();
            }
        } }
        function abort(what) { {
            if (Module["onAbort"]) {
                Module["onAbort"](what);
            }
        } what = "Aborted(" + what + ")"; err(what); ABORT = true; EXITSTATUS = 1; what += ". Build with -sASSERTIONS for more info."; var e = new WebAssembly.RuntimeError(what); readyPromiseReject(e); throw e; }
        var dataURIPrefix = "data:application/octet-stream;base64,";
        function isDataURI(filename) { return filename.startsWith(dataURIPrefix); }
        function isFileURI(filename) { return filename.startsWith("file://"); }
        var wasmBinaryFile;
        wasmBinaryFile = "ltbl-occt.wasm";
        if (!isDataURI(wasmBinaryFile)) {
            wasmBinaryFile = locateFile(wasmBinaryFile);
        }
        function getBinary(file) { try {
            if (file == wasmBinaryFile && wasmBinary) {
                return new Uint8Array(wasmBinary);
            }
            if (readBinary) {
                return readBinary(file);
            }
            else {
                throw "both async and sync fetching of the wasm failed";
            }
        }
        catch (err) {
            abort(err);
        } }
        function getBinaryPromise() { if (!wasmBinary && (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER)) {
            if (typeof fetch == "function" && !isFileURI(wasmBinaryFile)) {
                return fetch(wasmBinaryFile, { credentials: "same-origin" }).then(function (response) { if (!response["ok"]) {
                    throw "failed to load wasm binary file at '" + wasmBinaryFile + "'";
                } return response["arrayBuffer"](); }).catch(function () { return getBinary(wasmBinaryFile); });
            }
            else {
                if (readAsync) {
                    return new Promise(function (resolve, reject) { readAsync(wasmBinaryFile, function (response) { resolve(new Uint8Array(response)); }, reject); });
                }
            }
        } return Promise.resolve().then(function () { return getBinary(wasmBinaryFile); }); }
        function createWasm() { var info = { "a": asmLibraryArg }; function receiveInstance(instance, module) { var exports = instance.exports; Module["asm"] = exports; wasmMemory = Module["asm"]["Aa"]; updateGlobalBufferAndViews(wasmMemory.buffer); wasmTable = Module["asm"]["Ha"]; addOnInit(Module["asm"]["Ba"]); removeRunDependency("wasm-instantiate"); } addRunDependency("wasm-instantiate"); function receiveInstantiationResult(result) { receiveInstance(result["instance"]); } function instantiateArrayBuffer(receiver) { return getBinaryPromise().then(function (binary) { return WebAssembly.instantiate(binary, info); }).then(function (instance) { return instance; }).then(receiver, function (reason) { err("failed to asynchronously prepare wasm: " + reason); abort(reason); }); } function instantiateAsync() { if (!wasmBinary && typeof WebAssembly.instantiateStreaming == "function" && !isDataURI(wasmBinaryFile) && !isFileURI(wasmBinaryFile) && !ENVIRONMENT_IS_NODE && typeof fetch == "function") {
            return fetch(wasmBinaryFile, { credentials: "same-origin" }).then(function (response) { var result = WebAssembly.instantiateStreaming(response, info); return result.then(receiveInstantiationResult, function (reason) { err("wasm streaming compile failed: " + reason); err("falling back to ArrayBuffer instantiation"); return instantiateArrayBuffer(receiveInstantiationResult); }); });
        }
        else {
            return instantiateArrayBuffer(receiveInstantiationResult);
        } } if (Module["instantiateWasm"]) {
            try {
                var exports = Module["instantiateWasm"](info, receiveInstance);
                return exports;
            }
            catch (e) {
                err("Module.instantiateWasm callback failed with error: " + e);
                return false;
            }
        } instantiateAsync().catch(readyPromiseReject); return {}; }
        var tempDouble;
        var tempI64;
        function OSD_MemInfo_getModuleHeapLength() { return Module.HEAP8.length; }
        function callRuntimeCallbacks(callbacks) { while (callbacks.length > 0) {
            var callback = callbacks.shift();
            if (typeof callback == "function") {
                callback(Module);
                continue;
            }
            var func = callback.func;
            if (typeof func == "number") {
                if (callback.arg === undefined) {
                    getWasmTableEntry(func)();
                }
                else {
                    getWasmTableEntry(func)(callback.arg);
                }
            }
            else {
                func(callback.arg === undefined ? null : callback.arg);
            }
        } }
        var wasmTableMirror = [];
        function getWasmTableEntry(funcPtr) { var func = wasmTableMirror[funcPtr]; if (!func) {
            if (funcPtr >= wasmTableMirror.length)
                wasmTableMirror.length = funcPtr + 1;
            wasmTableMirror[funcPtr] = func = wasmTable.get(funcPtr);
        } return func; }
        function handleException(e) { if (e instanceof ExitStatus || e == "unwind") {
            return EXITSTATUS;
        } quit_(1, e); }
        function ___assert_fail(condition, filename, line, func) { abort("Assertion failed: " + UTF8ToString(condition) + ", at: " + [filename ? UTF8ToString(filename) : "unknown filename", line, func ? UTF8ToString(func) : "unknown function"]); }
        function ___cxa_allocate_exception(size) { return _malloc(size + 24) + 24; }
        function ExceptionInfo(excPtr) { this.excPtr = excPtr; this.ptr = excPtr - 24; this.set_type = function (type) { HEAPU32[this.ptr + 4 >>> 2] = type; }; this.get_type = function () { return HEAPU32[this.ptr + 4 >>> 2]; }; this.set_destructor = function (destructor) { HEAPU32[this.ptr + 8 >>> 2] = destructor; }; this.get_destructor = function () { return HEAPU32[this.ptr + 8 >>> 2]; }; this.set_refcount = function (refcount) { HEAP32[this.ptr >>> 2] = refcount; }; this.set_caught = function (caught) { caught = caught ? 1 : 0; HEAP8[this.ptr + 12 >>> 0] = caught; }; this.get_caught = function () { return HEAP8[this.ptr + 12 >>> 0] != 0; }; this.set_rethrown = function (rethrown) { rethrown = rethrown ? 1 : 0; HEAP8[this.ptr + 13 >>> 0] = rethrown; }; this.get_rethrown = function () { return HEAP8[this.ptr + 13 >>> 0] != 0; }; this.init = function (type, destructor) { this.set_adjusted_ptr(0); this.set_type(type); this.set_destructor(destructor); this.set_refcount(0); this.set_caught(false); this.set_rethrown(false); }; this.add_ref = function () { var value = HEAP32[this.ptr >>> 2]; HEAP32[this.ptr >>> 2] = value + 1; }; this.release_ref = function () { var prev = HEAP32[this.ptr >>> 2]; HEAP32[this.ptr >>> 2] = prev - 1; return prev === 1; }; this.set_adjusted_ptr = function (adjustedPtr) { HEAPU32[this.ptr + 16 >>> 2] = adjustedPtr; }; this.get_adjusted_ptr = function () { return HEAPU32[this.ptr + 16 >>> 2]; }; this.get_exception_ptr = function () { var isPointer = ___cxa_is_pointer_type(this.get_type()); if (isPointer) {
            return HEAPU32[this.excPtr >>> 2];
        } var adjusted = this.get_adjusted_ptr(); if (adjusted !== 0)
            return adjusted; return this.excPtr; }; }
        var exceptionLast = 0;
        var uncaughtExceptionCount = 0;
        function ___cxa_throw(ptr, type, destructor) { var info = new ExceptionInfo(ptr); info.init(type, destructor); exceptionLast = ptr; uncaughtExceptionCount++; throw ptr; }
        var PATH = { isAbs: function (path) { return path.charAt(0) === "/"; }, splitPath: function (filename) { var splitPathRe = /^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/; return splitPathRe.exec(filename).slice(1); }, normalizeArray: function (parts, allowAboveRoot) { var up = 0; for (var i = parts.length - 1; i >= 0; i--) {
                var last = parts[i];
                if (last === ".") {
                    parts.splice(i, 1);
                }
                else if (last === "..") {
                    parts.splice(i, 1);
                    up++;
                }
                else if (up) {
                    parts.splice(i, 1);
                    up--;
                }
            } if (allowAboveRoot) {
                for (; up; up--) {
                    parts.unshift("..");
                }
            } return parts; }, normalize: function (path) { var isAbsolute = PATH.isAbs(path), trailingSlash = path.substr(-1) === "/"; path = PATH.normalizeArray(path.split("/").filter(function (p) { return !!p; }), !isAbsolute).join("/"); if (!path && !isAbsolute) {
                path = ".";
            } if (path && trailingSlash) {
                path += "/";
            } return (isAbsolute ? "/" : "") + path; }, dirname: function (path) { var result = PATH.splitPath(path), root = result[0], dir = result[1]; if (!root && !dir) {
                return ".";
            } if (dir) {
                dir = dir.substr(0, dir.length - 1);
            } return root + dir; }, basename: function (path) { if (path === "/")
                return "/"; path = PATH.normalize(path); path = path.replace(/\/$/, ""); var lastSlash = path.lastIndexOf("/"); if (lastSlash === -1)
                return path; return path.substr(lastSlash + 1); }, join: function () { var paths = Array.prototype.slice.call(arguments, 0); return PATH.normalize(paths.join("/")); }, join2: function (l, r) { return PATH.normalize(l + "/" + r); } };
        function getRandomDevice() { if (typeof crypto == "object" && typeof crypto["getRandomValues"] == "function") {
            var randomBuffer = new Uint8Array(1);
            return function () { crypto.getRandomValues(randomBuffer); return randomBuffer[0]; };
        }
        else if (ENVIRONMENT_IS_NODE) {
            try {
                var crypto_module = __webpack_require__(/*! crypto */ "?6208");
                return function () { return crypto_module["randomBytes"](1)[0]; };
            }
            catch (e) { }
        } return function () { abort("randomDevice"); }; }
        var PATH_FS = { resolve: function () { var resolvedPath = "", resolvedAbsolute = false; for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {
                var path = i >= 0 ? arguments[i] : FS.cwd();
                if (typeof path != "string") {
                    throw new TypeError("Arguments to path.resolve must be strings");
                }
                else if (!path) {
                    return "";
                }
                resolvedPath = path + "/" + resolvedPath;
                resolvedAbsolute = PATH.isAbs(path);
            } resolvedPath = PATH.normalizeArray(resolvedPath.split("/").filter(function (p) { return !!p; }), !resolvedAbsolute).join("/"); return (resolvedAbsolute ? "/" : "") + resolvedPath || "."; }, relative: function (from, to) { from = PATH_FS.resolve(from).substr(1); to = PATH_FS.resolve(to).substr(1); function trim(arr) { var start = 0; for (; start < arr.length; start++) {
                if (arr[start] !== "")
                    break;
            } var end = arr.length - 1; for (; end >= 0; end--) {
                if (arr[end] !== "")
                    break;
            } if (start > end)
                return []; return arr.slice(start, end - start + 1); } var fromParts = trim(from.split("/")); var toParts = trim(to.split("/")); var length = Math.min(fromParts.length, toParts.length); var samePartsLength = length; for (var i = 0; i < length; i++) {
                if (fromParts[i] !== toParts[i]) {
                    samePartsLength = i;
                    break;
                }
            } var outputParts = []; for (var i = samePartsLength; i < fromParts.length; i++) {
                outputParts.push("..");
            } outputParts = outputParts.concat(toParts.slice(samePartsLength)); return outputParts.join("/"); } };
        var TTY = { ttys: [], init: function () { }, shutdown: function () { }, register: function (dev, ops) { TTY.ttys[dev] = { input: [], output: [], ops: ops }; FS.registerDevice(dev, TTY.stream_ops); }, stream_ops: { open: function (stream) { var tty = TTY.ttys[stream.node.rdev]; if (!tty) {
                    throw new FS.ErrnoError(43);
                } stream.tty = tty; stream.seekable = false; }, close: function (stream) { stream.tty.ops.flush(stream.tty); }, flush: function (stream) { stream.tty.ops.flush(stream.tty); }, read: function (stream, buffer, offset, length, pos) { if (!stream.tty || !stream.tty.ops.get_char) {
                    throw new FS.ErrnoError(60);
                } var bytesRead = 0; for (var i = 0; i < length; i++) {
                    var result;
                    try {
                        result = stream.tty.ops.get_char(stream.tty);
                    }
                    catch (e) {
                        throw new FS.ErrnoError(29);
                    }
                    if (result === undefined && bytesRead === 0) {
                        throw new FS.ErrnoError(6);
                    }
                    if (result === null || result === undefined)
                        break;
                    bytesRead++;
                    buffer[offset + i] = result;
                } if (bytesRead) {
                    stream.node.timestamp = Date.now();
                } return bytesRead; }, write: function (stream, buffer, offset, length, pos) { if (!stream.tty || !stream.tty.ops.put_char) {
                    throw new FS.ErrnoError(60);
                } try {
                    for (var i = 0; i < length; i++) {
                        stream.tty.ops.put_char(stream.tty, buffer[offset + i]);
                    }
                }
                catch (e) {
                    throw new FS.ErrnoError(29);
                } if (length) {
                    stream.node.timestamp = Date.now();
                } return i; } }, default_tty_ops: { get_char: function (tty) { if (!tty.input.length) {
                    var result = null;
                    if (ENVIRONMENT_IS_NODE) {
                        var BUFSIZE = 256;
                        var buf = Buffer.alloc(BUFSIZE);
                        var bytesRead = 0;
                        try {
                            bytesRead = fs.readSync(process.stdin.fd, buf, 0, BUFSIZE, -1);
                        }
                        catch (e) {
                            if (e.toString().includes("EOF"))
                                bytesRead = 0;
                            else
                                throw e;
                        }
                        if (bytesRead > 0) {
                            result = buf.slice(0, bytesRead).toString("utf-8");
                        }
                        else {
                            result = null;
                        }
                    }
                    else if (typeof window != "undefined" && typeof window.prompt == "function") {
                        result = window.prompt("Input: ");
                        if (result !== null) {
                            result += "\n";
                        }
                    }
                    else if (typeof readline == "function") {
                        result = readline();
                        if (result !== null) {
                            result += "\n";
                        }
                    }
                    if (!result) {
                        return null;
                    }
                    tty.input = intArrayFromString(result, true);
                } return tty.input.shift(); }, put_char: function (tty, val) { if (val === null || val === 10) {
                    out(UTF8ArrayToString(tty.output, 0));
                    tty.output = [];
                }
                else {
                    if (val != 0)
                        tty.output.push(val);
                } }, flush: function (tty) { if (tty.output && tty.output.length > 0) {
                    out(UTF8ArrayToString(tty.output, 0));
                    tty.output = [];
                } } }, default_tty1_ops: { put_char: function (tty, val) { if (val === null || val === 10) {
                    err(UTF8ArrayToString(tty.output, 0));
                    tty.output = [];
                }
                else {
                    if (val != 0)
                        tty.output.push(val);
                } }, flush: function (tty) { if (tty.output && tty.output.length > 0) {
                    err(UTF8ArrayToString(tty.output, 0));
                    tty.output = [];
                } } } };
        function zeroMemory(address, size) { HEAPU8.fill(0, address, address + size); }
        function alignMemory(size, alignment) { return Math.ceil(size / alignment) * alignment; }
        function mmapAlloc(size) { size = alignMemory(size, 65536); var ptr = _emscripten_builtin_memalign(65536, size); if (!ptr)
            return 0; zeroMemory(ptr, size); return ptr; }
        var MEMFS = { ops_table: null, mount: function (mount) { return MEMFS.createNode(null, "/", 16384 | 511, 0); }, createNode: function (parent, name, mode, dev) { if (FS.isBlkdev(mode) || FS.isFIFO(mode)) {
                throw new FS.ErrnoError(63);
            } if (!MEMFS.ops_table) {
                MEMFS.ops_table = { dir: { node: { getattr: MEMFS.node_ops.getattr, setattr: MEMFS.node_ops.setattr, lookup: MEMFS.node_ops.lookup, mknod: MEMFS.node_ops.mknod, rename: MEMFS.node_ops.rename, unlink: MEMFS.node_ops.unlink, rmdir: MEMFS.node_ops.rmdir, readdir: MEMFS.node_ops.readdir, symlink: MEMFS.node_ops.symlink }, stream: { llseek: MEMFS.stream_ops.llseek } }, file: { node: { getattr: MEMFS.node_ops.getattr, setattr: MEMFS.node_ops.setattr }, stream: { llseek: MEMFS.stream_ops.llseek, read: MEMFS.stream_ops.read, write: MEMFS.stream_ops.write, allocate: MEMFS.stream_ops.allocate, mmap: MEMFS.stream_ops.mmap, msync: MEMFS.stream_ops.msync } }, link: { node: { getattr: MEMFS.node_ops.getattr, setattr: MEMFS.node_ops.setattr, readlink: MEMFS.node_ops.readlink }, stream: {} }, chrdev: { node: { getattr: MEMFS.node_ops.getattr, setattr: MEMFS.node_ops.setattr }, stream: FS.chrdev_stream_ops } };
            } var node = FS.createNode(parent, name, mode, dev); if (FS.isDir(node.mode)) {
                node.node_ops = MEMFS.ops_table.dir.node;
                node.stream_ops = MEMFS.ops_table.dir.stream;
                node.contents = {};
            }
            else if (FS.isFile(node.mode)) {
                node.node_ops = MEMFS.ops_table.file.node;
                node.stream_ops = MEMFS.ops_table.file.stream;
                node.usedBytes = 0;
                node.contents = null;
            }
            else if (FS.isLink(node.mode)) {
                node.node_ops = MEMFS.ops_table.link.node;
                node.stream_ops = MEMFS.ops_table.link.stream;
            }
            else if (FS.isChrdev(node.mode)) {
                node.node_ops = MEMFS.ops_table.chrdev.node;
                node.stream_ops = MEMFS.ops_table.chrdev.stream;
            } node.timestamp = Date.now(); if (parent) {
                parent.contents[name] = node;
                parent.timestamp = node.timestamp;
            } return node; }, getFileDataAsTypedArray: function (node) { if (!node.contents)
                return new Uint8Array(0); if (node.contents.subarray)
                return node.contents.subarray(0, node.usedBytes); return new Uint8Array(node.contents); }, expandFileStorage: function (node, newCapacity) { newCapacity >>>= 0; var prevCapacity = node.contents ? node.contents.length : 0; if (prevCapacity >= newCapacity)
                return; var CAPACITY_DOUBLING_MAX = 1024 * 1024; newCapacity = Math.max(newCapacity, prevCapacity * (prevCapacity < CAPACITY_DOUBLING_MAX ? 2 : 1.125) >>> 0); if (prevCapacity != 0)
                newCapacity = Math.max(newCapacity, 256); var oldContents = node.contents; node.contents = new Uint8Array(newCapacity); if (node.usedBytes > 0)
                node.contents.set(oldContents.subarray(0, node.usedBytes), 0); }, resizeFileStorage: function (node, newSize) { newSize >>>= 0; if (node.usedBytes == newSize)
                return; if (newSize == 0) {
                node.contents = null;
                node.usedBytes = 0;
            }
            else {
                var oldContents = node.contents;
                node.contents = new Uint8Array(newSize);
                if (oldContents) {
                    node.contents.set(oldContents.subarray(0, Math.min(newSize, node.usedBytes)));
                }
                node.usedBytes = newSize;
            } }, node_ops: { getattr: function (node) { var attr = {}; attr.dev = FS.isChrdev(node.mode) ? node.id : 1; attr.ino = node.id; attr.mode = node.mode; attr.nlink = 1; attr.uid = 0; attr.gid = 0; attr.rdev = node.rdev; if (FS.isDir(node.mode)) {
                    attr.size = 4096;
                }
                else if (FS.isFile(node.mode)) {
                    attr.size = node.usedBytes;
                }
                else if (FS.isLink(node.mode)) {
                    attr.size = node.link.length;
                }
                else {
                    attr.size = 0;
                } attr.atime = new Date(node.timestamp); attr.mtime = new Date(node.timestamp); attr.ctime = new Date(node.timestamp); attr.blksize = 4096; attr.blocks = Math.ceil(attr.size / attr.blksize); return attr; }, setattr: function (node, attr) { if (attr.mode !== undefined) {
                    node.mode = attr.mode;
                } if (attr.timestamp !== undefined) {
                    node.timestamp = attr.timestamp;
                } if (attr.size !== undefined) {
                    MEMFS.resizeFileStorage(node, attr.size);
                } }, lookup: function (parent, name) { throw FS.genericErrors[44]; }, mknod: function (parent, name, mode, dev) { return MEMFS.createNode(parent, name, mode, dev); }, rename: function (old_node, new_dir, new_name) { if (FS.isDir(old_node.mode)) {
                    var new_node;
                    try {
                        new_node = FS.lookupNode(new_dir, new_name);
                    }
                    catch (e) { }
                    if (new_node) {
                        for (var i in new_node.contents) {
                            throw new FS.ErrnoError(55);
                        }
                    }
                } delete old_node.parent.contents[old_node.name]; old_node.parent.timestamp = Date.now(); old_node.name = new_name; new_dir.contents[new_name] = old_node; new_dir.timestamp = old_node.parent.timestamp; old_node.parent = new_dir; }, unlink: function (parent, name) { delete parent.contents[name]; parent.timestamp = Date.now(); }, rmdir: function (parent, name) { var node = FS.lookupNode(parent, name); for (var i in node.contents) {
                    throw new FS.ErrnoError(55);
                } delete parent.contents[name]; parent.timestamp = Date.now(); }, readdir: function (node) { var entries = [".", ".."]; for (var key in node.contents) {
                    if (!node.contents.hasOwnProperty(key)) {
                        continue;
                    }
                    entries.push(key);
                } return entries; }, symlink: function (parent, newname, oldpath) { var node = MEMFS.createNode(parent, newname, 511 | 40960, 0); node.link = oldpath; return node; }, readlink: function (node) { if (!FS.isLink(node.mode)) {
                    throw new FS.ErrnoError(28);
                } return node.link; } }, stream_ops: { read: function (stream, buffer, offset, length, position) { var contents = stream.node.contents; if (position >= stream.node.usedBytes)
                    return 0; var size = Math.min(stream.node.usedBytes - position, length); if (size > 8 && contents.subarray) {
                    buffer.set(contents.subarray(position, position + size), offset);
                }
                else {
                    for (var i = 0; i < size; i++)
                        buffer[offset + i] = contents[position + i];
                } return size; }, write: function (stream, buffer, offset, length, position, canOwn) { if (buffer.buffer === HEAP8.buffer) {
                    canOwn = false;
                } if (!length)
                    return 0; var node = stream.node; node.timestamp = Date.now(); if (buffer.subarray && (!node.contents || node.contents.subarray)) {
                    if (canOwn) {
                        node.contents = buffer.subarray(offset, offset + length);
                        node.usedBytes = length;
                        return length;
                    }
                    else if (node.usedBytes === 0 && position === 0) {
                        node.contents = buffer.slice(offset, offset + length);
                        node.usedBytes = length;
                        return length;
                    }
                    else if (position + length <= node.usedBytes) {
                        node.contents.set(buffer.subarray(offset, offset + length), position);
                        return length;
                    }
                } MEMFS.expandFileStorage(node, position + length); if (node.contents.subarray && buffer.subarray) {
                    node.contents.set(buffer.subarray(offset, offset + length), position);
                }
                else {
                    for (var i = 0; i < length; i++) {
                        node.contents[position + i] = buffer[offset + i];
                    }
                } node.usedBytes = Math.max(node.usedBytes, position + length); return length; }, llseek: function (stream, offset, whence) { var position = offset; if (whence === 1) {
                    position += stream.position;
                }
                else if (whence === 2) {
                    if (FS.isFile(stream.node.mode)) {
                        position += stream.node.usedBytes;
                    }
                } if (position < 0) {
                    throw new FS.ErrnoError(28);
                } return position; }, allocate: function (stream, offset, length) { MEMFS.expandFileStorage(stream.node, offset + length); stream.node.usedBytes = Math.max(stream.node.usedBytes, offset + length); }, mmap: function (stream, length, position, prot, flags) { if (!FS.isFile(stream.node.mode)) {
                    throw new FS.ErrnoError(43);
                } var ptr; var allocated; var contents = stream.node.contents; if (!(flags & 2) && contents.buffer === buffer) {
                    allocated = false;
                    ptr = contents.byteOffset;
                }
                else {
                    if (position > 0 || position + length < contents.length) {
                        if (contents.subarray) {
                            contents = contents.subarray(position, position + length);
                        }
                        else {
                            contents = Array.prototype.slice.call(contents, position, position + length);
                        }
                    }
                    allocated = true;
                    ptr = mmapAlloc(length);
                    if (!ptr) {
                        throw new FS.ErrnoError(48);
                    }
                    ptr >>>= 0;
                    HEAP8.set(contents, ptr >>> 0);
                } return { ptr: ptr, allocated: allocated }; }, msync: function (stream, buffer, offset, length, mmapFlags) { if (!FS.isFile(stream.node.mode)) {
                    throw new FS.ErrnoError(43);
                } if (mmapFlags & 2) {
                    return 0;
                } var bytesWritten = MEMFS.stream_ops.write(stream, buffer, 0, length, offset, false); return 0; } } };
        function asyncLoad(url, onload, onerror, noRunDep) { var dep = !noRunDep ? getUniqueRunDependency("al " + url) : ""; readAsync(url, function (arrayBuffer) { assert(arrayBuffer, 'Loading data file "' + url + '" failed (no arrayBuffer).'); onload(new Uint8Array(arrayBuffer)); if (dep)
            removeRunDependency(dep); }, function (event) { if (onerror) {
            onerror();
        }
        else {
            throw 'Loading data file "' + url + '" failed.';
        } }); if (dep)
            addRunDependency(dep); }
        var FS = { root: null, mounts: [], devices: {}, streams: [], nextInode: 1, nameTable: null, currentPath: "/", initialized: false, ignorePermissions: true, ErrnoError: null, genericErrors: {}, filesystems: null, syncFSRequests: 0, lookupPath: function (path, opts) {
                if (opts === void 0) { opts = {}; }
                path = PATH_FS.resolve(FS.cwd(), path);
                if (!path)
                    return { path: "", node: null };
                var defaults = { follow_mount: true, recurse_count: 0 };
                opts = Object.assign(defaults, opts);
                if (opts.recurse_count > 8) {
                    throw new FS.ErrnoError(32);
                }
                var parts = PATH.normalizeArray(path.split("/").filter(function (p) { return !!p; }), false);
                var current = FS.root;
                var current_path = "/";
                for (var i = 0; i < parts.length; i++) {
                    var islast = i === parts.length - 1;
                    if (islast && opts.parent) {
                        break;
                    }
                    current = FS.lookupNode(current, parts[i]);
                    current_path = PATH.join2(current_path, parts[i]);
                    if (FS.isMountpoint(current)) {
                        if (!islast || islast && opts.follow_mount) {
                            current = current.mounted.root;
                        }
                    }
                    if (!islast || opts.follow) {
                        var count = 0;
                        while (FS.isLink(current.mode)) {
                            var link = FS.readlink(current_path);
                            current_path = PATH_FS.resolve(PATH.dirname(current_path), link);
                            var lookup = FS.lookupPath(current_path, { recurse_count: opts.recurse_count + 1 });
                            current = lookup.node;
                            if (count++ > 40) {
                                throw new FS.ErrnoError(32);
                            }
                        }
                    }
                }
                return { path: current_path, node: current };
            }, getPath: function (node) { var path; while (true) {
                if (FS.isRoot(node)) {
                    var mount = node.mount.mountpoint;
                    if (!path)
                        return mount;
                    return mount[mount.length - 1] !== "/" ? mount + "/" + path : mount + path;
                }
                path = path ? node.name + "/" + path : node.name;
                node = node.parent;
            } }, hashName: function (parentid, name) { var hash = 0; for (var i = 0; i < name.length; i++) {
                hash = (hash << 5) - hash + name.charCodeAt(i) | 0;
            } return (parentid + hash >>> 0) % FS.nameTable.length; }, hashAddNode: function (node) { var hash = FS.hashName(node.parent.id, node.name); node.name_next = FS.nameTable[hash]; FS.nameTable[hash] = node; }, hashRemoveNode: function (node) { var hash = FS.hashName(node.parent.id, node.name); if (FS.nameTable[hash] === node) {
                FS.nameTable[hash] = node.name_next;
            }
            else {
                var current = FS.nameTable[hash];
                while (current) {
                    if (current.name_next === node) {
                        current.name_next = node.name_next;
                        break;
                    }
                    current = current.name_next;
                }
            } }, lookupNode: function (parent, name) { var errCode = FS.mayLookup(parent); if (errCode) {
                throw new FS.ErrnoError(errCode, parent);
            } var hash = FS.hashName(parent.id, name); for (var node = FS.nameTable[hash]; node; node = node.name_next) {
                var nodeName = node.name;
                if (node.parent.id === parent.id && nodeName === name) {
                    return node;
                }
            } return FS.lookup(parent, name); }, createNode: function (parent, name, mode, rdev) { var node = new FS.FSNode(parent, name, mode, rdev); FS.hashAddNode(node); return node; }, destroyNode: function (node) { FS.hashRemoveNode(node); }, isRoot: function (node) { return node === node.parent; }, isMountpoint: function (node) { return !!node.mounted; }, isFile: function (mode) { return (mode & 61440) === 32768; }, isDir: function (mode) { return (mode & 61440) === 16384; }, isLink: function (mode) { return (mode & 61440) === 40960; }, isChrdev: function (mode) { return (mode & 61440) === 8192; }, isBlkdev: function (mode) { return (mode & 61440) === 24576; }, isFIFO: function (mode) { return (mode & 61440) === 4096; }, isSocket: function (mode) { return (mode & 49152) === 49152; }, flagModes: { "r": 0, "r+": 2, "w": 577, "w+": 578, "a": 1089, "a+": 1090 }, modeStringToFlags: function (str) { var flags = FS.flagModes[str]; if (typeof flags == "undefined") {
                throw new Error("Unknown file open mode: " + str);
            } return flags; }, flagsToPermissionString: function (flag) { var perms = ["r", "w", "rw"][flag & 3]; if (flag & 512) {
                perms += "w";
            } return perms; }, nodePermissions: function (node, perms) { if (FS.ignorePermissions) {
                return 0;
            } if (perms.includes("r") && !(node.mode & 292)) {
                return 2;
            }
            else if (perms.includes("w") && !(node.mode & 146)) {
                return 2;
            }
            else if (perms.includes("x") && !(node.mode & 73)) {
                return 2;
            } return 0; }, mayLookup: function (dir) { var errCode = FS.nodePermissions(dir, "x"); if (errCode)
                return errCode; if (!dir.node_ops.lookup)
                return 2; return 0; }, mayCreate: function (dir, name) { try {
                var node = FS.lookupNode(dir, name);
                return 20;
            }
            catch (e) { } return FS.nodePermissions(dir, "wx"); }, mayDelete: function (dir, name, isdir) { var node; try {
                node = FS.lookupNode(dir, name);
            }
            catch (e) {
                return e.errno;
            } var errCode = FS.nodePermissions(dir, "wx"); if (errCode) {
                return errCode;
            } if (isdir) {
                if (!FS.isDir(node.mode)) {
                    return 54;
                }
                if (FS.isRoot(node) || FS.getPath(node) === FS.cwd()) {
                    return 10;
                }
            }
            else {
                if (FS.isDir(node.mode)) {
                    return 31;
                }
            } return 0; }, mayOpen: function (node, flags) { if (!node) {
                return 44;
            } if (FS.isLink(node.mode)) {
                return 32;
            }
            else if (FS.isDir(node.mode)) {
                if (FS.flagsToPermissionString(flags) !== "r" || flags & 512) {
                    return 31;
                }
            } return FS.nodePermissions(node, FS.flagsToPermissionString(flags)); }, MAX_OPEN_FDS: 4096, nextfd: function (fd_start, fd_end) {
                if (fd_start === void 0) { fd_start = 0; }
                if (fd_end === void 0) { fd_end = FS.MAX_OPEN_FDS; }
                for (var fd = fd_start; fd <= fd_end; fd++) {
                    if (!FS.streams[fd]) {
                        return fd;
                    }
                }
                throw new FS.ErrnoError(33);
            }, getStream: function (fd) { return FS.streams[fd]; }, createStream: function (stream, fd_start, fd_end) { if (!FS.FSStream) {
                FS.FSStream = function () { this.shared = {}; };
                FS.FSStream.prototype = {};
                Object.defineProperties(FS.FSStream.prototype, { object: { get: function () { return this.node; }, set: function (val) { this.node = val; } }, isRead: { get: function () { return (this.flags & 2097155) !== 1; } }, isWrite: { get: function () { return (this.flags & 2097155) !== 0; } }, isAppend: { get: function () { return this.flags & 1024; } }, flags: { get: function () { return this.shared.flags; }, set: function (val) { this.shared.flags = val; } }, position: { get: function () { return this.shared.position; }, set: function (val) { this.shared.position = val; } } });
            } stream = Object.assign(new FS.FSStream, stream); var fd = FS.nextfd(fd_start, fd_end); stream.fd = fd; FS.streams[fd] = stream; return stream; }, closeStream: function (fd) { FS.streams[fd] = null; }, chrdev_stream_ops: { open: function (stream) { var device = FS.getDevice(stream.node.rdev); stream.stream_ops = device.stream_ops; if (stream.stream_ops.open) {
                    stream.stream_ops.open(stream);
                } }, llseek: function () { throw new FS.ErrnoError(70); } }, major: function (dev) { return dev >> 8; }, minor: function (dev) { return dev & 255; }, makedev: function (ma, mi) { return ma << 8 | mi; }, registerDevice: function (dev, ops) { FS.devices[dev] = { stream_ops: ops }; }, getDevice: function (dev) { return FS.devices[dev]; }, getMounts: function (mount) { var mounts = []; var check = [mount]; while (check.length) {
                var m = check.pop();
                mounts.push(m);
                check.push.apply(check, m.mounts);
            } return mounts; }, syncfs: function (populate, callback) { if (typeof populate == "function") {
                callback = populate;
                populate = false;
            } FS.syncFSRequests++; if (FS.syncFSRequests > 1) {
                err("warning: " + FS.syncFSRequests + " FS.syncfs operations in flight at once, probably just doing extra work");
            } var mounts = FS.getMounts(FS.root.mount); var completed = 0; function doCallback(errCode) { FS.syncFSRequests--; return callback(errCode); } function done(errCode) { if (errCode) {
                if (!done.errored) {
                    done.errored = true;
                    return doCallback(errCode);
                }
                return;
            } if (++completed >= mounts.length) {
                doCallback(null);
            } } mounts.forEach(function (mount) { if (!mount.type.syncfs) {
                return done(null);
            } mount.type.syncfs(mount, populate, done); }); }, mount: function (type, opts, mountpoint) { var root = mountpoint === "/"; var pseudo = !mountpoint; var node; if (root && FS.root) {
                throw new FS.ErrnoError(10);
            }
            else if (!root && !pseudo) {
                var lookup = FS.lookupPath(mountpoint, { follow_mount: false });
                mountpoint = lookup.path;
                node = lookup.node;
                if (FS.isMountpoint(node)) {
                    throw new FS.ErrnoError(10);
                }
                if (!FS.isDir(node.mode)) {
                    throw new FS.ErrnoError(54);
                }
            } var mount = { type: type, opts: opts, mountpoint: mountpoint, mounts: [] }; var mountRoot = type.mount(mount); mountRoot.mount = mount; mount.root = mountRoot; if (root) {
                FS.root = mountRoot;
            }
            else if (node) {
                node.mounted = mount;
                if (node.mount) {
                    node.mount.mounts.push(mount);
                }
            } return mountRoot; }, unmount: function (mountpoint) { var lookup = FS.lookupPath(mountpoint, { follow_mount: false }); if (!FS.isMountpoint(lookup.node)) {
                throw new FS.ErrnoError(28);
            } var node = lookup.node; var mount = node.mounted; var mounts = FS.getMounts(mount); Object.keys(FS.nameTable).forEach(function (hash) { var current = FS.nameTable[hash]; while (current) {
                var next = current.name_next;
                if (mounts.includes(current.mount)) {
                    FS.destroyNode(current);
                }
                current = next;
            } }); node.mounted = null; var idx = node.mount.mounts.indexOf(mount); node.mount.mounts.splice(idx, 1); }, lookup: function (parent, name) { return parent.node_ops.lookup(parent, name); }, mknod: function (path, mode, dev) { var lookup = FS.lookupPath(path, { parent: true }); var parent = lookup.node; var name = PATH.basename(path); if (!name || name === "." || name === "..") {
                throw new FS.ErrnoError(28);
            } var errCode = FS.mayCreate(parent, name); if (errCode) {
                throw new FS.ErrnoError(errCode);
            } if (!parent.node_ops.mknod) {
                throw new FS.ErrnoError(63);
            } return parent.node_ops.mknod(parent, name, mode, dev); }, create: function (path, mode) { mode = mode !== undefined ? mode : 438; mode &= 4095; mode |= 32768; return FS.mknod(path, mode, 0); }, mkdir: function (path, mode) { mode = mode !== undefined ? mode : 511; mode &= 511 | 512; mode |= 16384; return FS.mknod(path, mode, 0); }, mkdirTree: function (path, mode) { var dirs = path.split("/"); var d = ""; for (var i = 0; i < dirs.length; ++i) {
                if (!dirs[i])
                    continue;
                d += "/" + dirs[i];
                try {
                    FS.mkdir(d, mode);
                }
                catch (e) {
                    if (e.errno != 20)
                        throw e;
                }
            } }, mkdev: function (path, mode, dev) { if (typeof dev == "undefined") {
                dev = mode;
                mode = 438;
            } mode |= 8192; return FS.mknod(path, mode, dev); }, symlink: function (oldpath, newpath) { if (!PATH_FS.resolve(oldpath)) {
                throw new FS.ErrnoError(44);
            } var lookup = FS.lookupPath(newpath, { parent: true }); var parent = lookup.node; if (!parent) {
                throw new FS.ErrnoError(44);
            } var newname = PATH.basename(newpath); var errCode = FS.mayCreate(parent, newname); if (errCode) {
                throw new FS.ErrnoError(errCode);
            } if (!parent.node_ops.symlink) {
                throw new FS.ErrnoError(63);
            } return parent.node_ops.symlink(parent, newname, oldpath); }, rename: function (old_path, new_path) { var old_dirname = PATH.dirname(old_path); var new_dirname = PATH.dirname(new_path); var old_name = PATH.basename(old_path); var new_name = PATH.basename(new_path); var lookup, old_dir, new_dir; lookup = FS.lookupPath(old_path, { parent: true }); old_dir = lookup.node; lookup = FS.lookupPath(new_path, { parent: true }); new_dir = lookup.node; if (!old_dir || !new_dir)
                throw new FS.ErrnoError(44); if (old_dir.mount !== new_dir.mount) {
                throw new FS.ErrnoError(75);
            } var old_node = FS.lookupNode(old_dir, old_name); var relative = PATH_FS.relative(old_path, new_dirname); if (relative.charAt(0) !== ".") {
                throw new FS.ErrnoError(28);
            } relative = PATH_FS.relative(new_path, old_dirname); if (relative.charAt(0) !== ".") {
                throw new FS.ErrnoError(55);
            } var new_node; try {
                new_node = FS.lookupNode(new_dir, new_name);
            }
            catch (e) { } if (old_node === new_node) {
                return;
            } var isdir = FS.isDir(old_node.mode); var errCode = FS.mayDelete(old_dir, old_name, isdir); if (errCode) {
                throw new FS.ErrnoError(errCode);
            } errCode = new_node ? FS.mayDelete(new_dir, new_name, isdir) : FS.mayCreate(new_dir, new_name); if (errCode) {
                throw new FS.ErrnoError(errCode);
            } if (!old_dir.node_ops.rename) {
                throw new FS.ErrnoError(63);
            } if (FS.isMountpoint(old_node) || new_node && FS.isMountpoint(new_node)) {
                throw new FS.ErrnoError(10);
            } if (new_dir !== old_dir) {
                errCode = FS.nodePermissions(old_dir, "w");
                if (errCode) {
                    throw new FS.ErrnoError(errCode);
                }
            } FS.hashRemoveNode(old_node); try {
                old_dir.node_ops.rename(old_node, new_dir, new_name);
            }
            catch (e) {
                throw e;
            }
            finally {
                FS.hashAddNode(old_node);
            } }, rmdir: function (path) { var lookup = FS.lookupPath(path, { parent: true }); var parent = lookup.node; var name = PATH.basename(path); var node = FS.lookupNode(parent, name); var errCode = FS.mayDelete(parent, name, true); if (errCode) {
                throw new FS.ErrnoError(errCode);
            } if (!parent.node_ops.rmdir) {
                throw new FS.ErrnoError(63);
            } if (FS.isMountpoint(node)) {
                throw new FS.ErrnoError(10);
            } parent.node_ops.rmdir(parent, name); FS.destroyNode(node); }, readdir: function (path) { var lookup = FS.lookupPath(path, { follow: true }); var node = lookup.node; if (!node.node_ops.readdir) {
                throw new FS.ErrnoError(54);
            } return node.node_ops.readdir(node); }, unlink: function (path) { var lookup = FS.lookupPath(path, { parent: true }); var parent = lookup.node; if (!parent) {
                throw new FS.ErrnoError(44);
            } var name = PATH.basename(path); var node = FS.lookupNode(parent, name); var errCode = FS.mayDelete(parent, name, false); if (errCode) {
                throw new FS.ErrnoError(errCode);
            } if (!parent.node_ops.unlink) {
                throw new FS.ErrnoError(63);
            } if (FS.isMountpoint(node)) {
                throw new FS.ErrnoError(10);
            } parent.node_ops.unlink(parent, name); FS.destroyNode(node); }, readlink: function (path) { var lookup = FS.lookupPath(path); var link = lookup.node; if (!link) {
                throw new FS.ErrnoError(44);
            } if (!link.node_ops.readlink) {
                throw new FS.ErrnoError(28);
            } return PATH_FS.resolve(FS.getPath(link.parent), link.node_ops.readlink(link)); }, stat: function (path, dontFollow) { var lookup = FS.lookupPath(path, { follow: !dontFollow }); var node = lookup.node; if (!node) {
                throw new FS.ErrnoError(44);
            } if (!node.node_ops.getattr) {
                throw new FS.ErrnoError(63);
            } return node.node_ops.getattr(node); }, lstat: function (path) { return FS.stat(path, true); }, chmod: function (path, mode, dontFollow) { var node; if (typeof path == "string") {
                var lookup = FS.lookupPath(path, { follow: !dontFollow });
                node = lookup.node;
            }
            else {
                node = path;
            } if (!node.node_ops.setattr) {
                throw new FS.ErrnoError(63);
            } node.node_ops.setattr(node, { mode: mode & 4095 | node.mode & ~4095, timestamp: Date.now() }); }, lchmod: function (path, mode) { FS.chmod(path, mode, true); }, fchmod: function (fd, mode) { var stream = FS.getStream(fd); if (!stream) {
                throw new FS.ErrnoError(8);
            } FS.chmod(stream.node, mode); }, chown: function (path, uid, gid, dontFollow) { var node; if (typeof path == "string") {
                var lookup = FS.lookupPath(path, { follow: !dontFollow });
                node = lookup.node;
            }
            else {
                node = path;
            } if (!node.node_ops.setattr) {
                throw new FS.ErrnoError(63);
            } node.node_ops.setattr(node, { timestamp: Date.now() }); }, lchown: function (path, uid, gid) { FS.chown(path, uid, gid, true); }, fchown: function (fd, uid, gid) { var stream = FS.getStream(fd); if (!stream) {
                throw new FS.ErrnoError(8);
            } FS.chown(stream.node, uid, gid); }, truncate: function (path, len) { if (len < 0) {
                throw new FS.ErrnoError(28);
            } var node; if (typeof path == "string") {
                var lookup = FS.lookupPath(path, { follow: true });
                node = lookup.node;
            }
            else {
                node = path;
            } if (!node.node_ops.setattr) {
                throw new FS.ErrnoError(63);
            } if (FS.isDir(node.mode)) {
                throw new FS.ErrnoError(31);
            } if (!FS.isFile(node.mode)) {
                throw new FS.ErrnoError(28);
            } var errCode = FS.nodePermissions(node, "w"); if (errCode) {
                throw new FS.ErrnoError(errCode);
            } node.node_ops.setattr(node, { size: len, timestamp: Date.now() }); }, ftruncate: function (fd, len) { var stream = FS.getStream(fd); if (!stream) {
                throw new FS.ErrnoError(8);
            } if ((stream.flags & 2097155) === 0) {
                throw new FS.ErrnoError(28);
            } FS.truncate(stream.node, len); }, utime: function (path, atime, mtime) { var lookup = FS.lookupPath(path, { follow: true }); var node = lookup.node; node.node_ops.setattr(node, { timestamp: Math.max(atime, mtime) }); }, open: function (path, flags, mode) { if (path === "") {
                throw new FS.ErrnoError(44);
            } flags = typeof flags == "string" ? FS.modeStringToFlags(flags) : flags; mode = typeof mode == "undefined" ? 438 : mode; if (flags & 64) {
                mode = mode & 4095 | 32768;
            }
            else {
                mode = 0;
            } var node; if (typeof path == "object") {
                node = path;
            }
            else {
                path = PATH.normalize(path);
                try {
                    var lookup = FS.lookupPath(path, { follow: !(flags & 131072) });
                    node = lookup.node;
                }
                catch (e) { }
            } var created = false; if (flags & 64) {
                if (node) {
                    if (flags & 128) {
                        throw new FS.ErrnoError(20);
                    }
                }
                else {
                    node = FS.mknod(path, mode, 0);
                    created = true;
                }
            } if (!node) {
                throw new FS.ErrnoError(44);
            } if (FS.isChrdev(node.mode)) {
                flags &= ~512;
            } if (flags & 65536 && !FS.isDir(node.mode)) {
                throw new FS.ErrnoError(54);
            } if (!created) {
                var errCode = FS.mayOpen(node, flags);
                if (errCode) {
                    throw new FS.ErrnoError(errCode);
                }
            } if (flags & 512 && !created) {
                FS.truncate(node, 0);
            } flags &= ~(128 | 512 | 131072); var stream = FS.createStream({ node: node, path: FS.getPath(node), flags: flags, seekable: true, position: 0, stream_ops: node.stream_ops, ungotten: [], error: false }); if (stream.stream_ops.open) {
                stream.stream_ops.open(stream);
            } if (Module["logReadFiles"] && !(flags & 1)) {
                if (!FS.readFiles)
                    FS.readFiles = {};
                if (!(path in FS.readFiles)) {
                    FS.readFiles[path] = 1;
                }
            } return stream; }, close: function (stream) { if (FS.isClosed(stream)) {
                throw new FS.ErrnoError(8);
            } if (stream.getdents)
                stream.getdents = null; try {
                if (stream.stream_ops.close) {
                    stream.stream_ops.close(stream);
                }
            }
            catch (e) {
                throw e;
            }
            finally {
                FS.closeStream(stream.fd);
            } stream.fd = null; }, isClosed: function (stream) { return stream.fd === null; }, llseek: function (stream, offset, whence) { if (FS.isClosed(stream)) {
                throw new FS.ErrnoError(8);
            } if (!stream.seekable || !stream.stream_ops.llseek) {
                throw new FS.ErrnoError(70);
            } if (whence != 0 && whence != 1 && whence != 2) {
                throw new FS.ErrnoError(28);
            } stream.position = stream.stream_ops.llseek(stream, offset, whence); stream.ungotten = []; return stream.position; }, read: function (stream, buffer, offset, length, position) { offset >>>= 0; if (length < 0 || position < 0) {
                throw new FS.ErrnoError(28);
            } if (FS.isClosed(stream)) {
                throw new FS.ErrnoError(8);
            } if ((stream.flags & 2097155) === 1) {
                throw new FS.ErrnoError(8);
            } if (FS.isDir(stream.node.mode)) {
                throw new FS.ErrnoError(31);
            } if (!stream.stream_ops.read) {
                throw new FS.ErrnoError(28);
            } var seeking = typeof position != "undefined"; if (!seeking) {
                position = stream.position;
            }
            else if (!stream.seekable) {
                throw new FS.ErrnoError(70);
            } var bytesRead = stream.stream_ops.read(stream, buffer, offset, length, position); if (!seeking)
                stream.position += bytesRead; return bytesRead; }, write: function (stream, buffer, offset, length, position, canOwn) { offset >>>= 0; if (length < 0 || position < 0) {
                throw new FS.ErrnoError(28);
            } if (FS.isClosed(stream)) {
                throw new FS.ErrnoError(8);
            } if ((stream.flags & 2097155) === 0) {
                throw new FS.ErrnoError(8);
            } if (FS.isDir(stream.node.mode)) {
                throw new FS.ErrnoError(31);
            } if (!stream.stream_ops.write) {
                throw new FS.ErrnoError(28);
            } if (stream.seekable && stream.flags & 1024) {
                FS.llseek(stream, 0, 2);
            } var seeking = typeof position != "undefined"; if (!seeking) {
                position = stream.position;
            }
            else if (!stream.seekable) {
                throw new FS.ErrnoError(70);
            } var bytesWritten = stream.stream_ops.write(stream, buffer, offset, length, position, canOwn); if (!seeking)
                stream.position += bytesWritten; return bytesWritten; }, allocate: function (stream, offset, length) { if (FS.isClosed(stream)) {
                throw new FS.ErrnoError(8);
            } if (offset < 0 || length <= 0) {
                throw new FS.ErrnoError(28);
            } if ((stream.flags & 2097155) === 0) {
                throw new FS.ErrnoError(8);
            } if (!FS.isFile(stream.node.mode) && !FS.isDir(stream.node.mode)) {
                throw new FS.ErrnoError(43);
            } if (!stream.stream_ops.allocate) {
                throw new FS.ErrnoError(138);
            } stream.stream_ops.allocate(stream, offset, length); }, mmap: function (stream, length, position, prot, flags) { if ((prot & 2) !== 0 && (flags & 2) === 0 && (stream.flags & 2097155) !== 2) {
                throw new FS.ErrnoError(2);
            } if ((stream.flags & 2097155) === 1) {
                throw new FS.ErrnoError(2);
            } if (!stream.stream_ops.mmap) {
                throw new FS.ErrnoError(43);
            } return stream.stream_ops.mmap(stream, length, position, prot, flags); }, msync: function (stream, buffer, offset, length, mmapFlags) { offset >>>= 0; if (!stream || !stream.stream_ops.msync) {
                return 0;
            } return stream.stream_ops.msync(stream, buffer, offset, length, mmapFlags); }, munmap: function (stream) { return 0; }, ioctl: function (stream, cmd, arg) { if (!stream.stream_ops.ioctl) {
                throw new FS.ErrnoError(59);
            } return stream.stream_ops.ioctl(stream, cmd, arg); }, readFile: function (path, opts) {
                if (opts === void 0) { opts = {}; }
                opts.flags = opts.flags || 0;
                opts.encoding = opts.encoding || "binary";
                if (opts.encoding !== "utf8" && opts.encoding !== "binary") {
                    throw new Error('Invalid encoding type "' + opts.encoding + '"');
                }
                var ret;
                var stream = FS.open(path, opts.flags);
                var stat = FS.stat(path);
                var length = stat.size;
                var buf = new Uint8Array(length);
                FS.read(stream, buf, 0, length, 0);
                if (opts.encoding === "utf8") {
                    ret = UTF8ArrayToString(buf, 0);
                }
                else if (opts.encoding === "binary") {
                    ret = buf;
                }
                FS.close(stream);
                return ret;
            }, writeFile: function (path, data, opts) {
                if (opts === void 0) { opts = {}; }
                opts.flags = opts.flags || 577;
                var stream = FS.open(path, opts.flags, opts.mode);
                if (typeof data == "string") {
                    var buf = new Uint8Array(lengthBytesUTF8(data) + 1);
                    var actualNumBytes = stringToUTF8Array(data, buf, 0, buf.length);
                    FS.write(stream, buf, 0, actualNumBytes, undefined, opts.canOwn);
                }
                else if (ArrayBuffer.isView(data)) {
                    FS.write(stream, data, 0, data.byteLength, undefined, opts.canOwn);
                }
                else {
                    throw new Error("Unsupported data type");
                }
                FS.close(stream);
            }, cwd: function () { return FS.currentPath; }, chdir: function (path) { var lookup = FS.lookupPath(path, { follow: true }); if (lookup.node === null) {
                throw new FS.ErrnoError(44);
            } if (!FS.isDir(lookup.node.mode)) {
                throw new FS.ErrnoError(54);
            } var errCode = FS.nodePermissions(lookup.node, "x"); if (errCode) {
                throw new FS.ErrnoError(errCode);
            } FS.currentPath = lookup.path; }, createDefaultDirectories: function () { FS.mkdir("/tmp"); FS.mkdir("/home"); FS.mkdir("/home/web_user"); }, createDefaultDevices: function () { FS.mkdir("/dev"); FS.registerDevice(FS.makedev(1, 3), { read: function () { return 0; }, write: function (stream, buffer, offset, length, pos) { return length; } }); FS.mkdev("/dev/null", FS.makedev(1, 3)); TTY.register(FS.makedev(5, 0), TTY.default_tty_ops); TTY.register(FS.makedev(6, 0), TTY.default_tty1_ops); FS.mkdev("/dev/tty", FS.makedev(5, 0)); FS.mkdev("/dev/tty1", FS.makedev(6, 0)); var random_device = getRandomDevice(); FS.createDevice("/dev", "random", random_device); FS.createDevice("/dev", "urandom", random_device); FS.mkdir("/dev/shm"); FS.mkdir("/dev/shm/tmp"); }, createSpecialDirectories: function () { FS.mkdir("/proc"); var proc_self = FS.mkdir("/proc/self"); FS.mkdir("/proc/self/fd"); FS.mount({ mount: function () { var node = FS.createNode(proc_self, "fd", 16384 | 511, 73); node.node_ops = { lookup: function (parent, name) { var fd = +name; var stream = FS.getStream(fd); if (!stream)
                        throw new FS.ErrnoError(8); var ret = { parent: null, mount: { mountpoint: "fake" }, node_ops: { readlink: function () { return stream.path; } } }; ret.parent = ret; return ret; } }; return node; } }, {}, "/proc/self/fd"); }, createStandardStreams: function () { if (Module["stdin"]) {
                FS.createDevice("/dev", "stdin", Module["stdin"]);
            }
            else {
                FS.symlink("/dev/tty", "/dev/stdin");
            } if (Module["stdout"]) {
                FS.createDevice("/dev", "stdout", null, Module["stdout"]);
            }
            else {
                FS.symlink("/dev/tty", "/dev/stdout");
            } if (Module["stderr"]) {
                FS.createDevice("/dev", "stderr", null, Module["stderr"]);
            }
            else {
                FS.symlink("/dev/tty1", "/dev/stderr");
            } var stdin = FS.open("/dev/stdin", 0); var stdout = FS.open("/dev/stdout", 1); var stderr = FS.open("/dev/stderr", 1); }, ensureErrnoError: function () { if (FS.ErrnoError)
                return; FS.ErrnoError = function ErrnoError(errno, node) { this.node = node; this.setErrno = function (errno) { this.errno = errno; }; this.setErrno(errno); this.message = "FS error"; }; FS.ErrnoError.prototype = new Error; FS.ErrnoError.prototype.constructor = FS.ErrnoError; [44].forEach(function (code) { FS.genericErrors[code] = new FS.ErrnoError(code); FS.genericErrors[code].stack = "<generic error, no stack>"; }); }, staticInit: function () { FS.ensureErrnoError(); FS.nameTable = new Array(4096); FS.mount(MEMFS, {}, "/"); FS.createDefaultDirectories(); FS.createDefaultDevices(); FS.createSpecialDirectories(); FS.filesystems = { "MEMFS": MEMFS }; }, init: function (input, output, error) { FS.init.initialized = true; FS.ensureErrnoError(); Module["stdin"] = input || Module["stdin"]; Module["stdout"] = output || Module["stdout"]; Module["stderr"] = error || Module["stderr"]; FS.createStandardStreams(); }, quit: function () { FS.init.initialized = false; for (var i = 0; i < FS.streams.length; i++) {
                var stream = FS.streams[i];
                if (!stream) {
                    continue;
                }
                FS.close(stream);
            } }, getMode: function (canRead, canWrite) { var mode = 0; if (canRead)
                mode |= 292 | 73; if (canWrite)
                mode |= 146; return mode; }, findObject: function (path, dontResolveLastLink) { var ret = FS.analyzePath(path, dontResolveLastLink); if (ret.exists) {
                return ret.object;
            }
            else {
                return null;
            } }, analyzePath: function (path, dontResolveLastLink) { try {
                var lookup = FS.lookupPath(path, { follow: !dontResolveLastLink });
                path = lookup.path;
            }
            catch (e) { } var ret = { isRoot: false, exists: false, error: 0, name: null, path: null, object: null, parentExists: false, parentPath: null, parentObject: null }; try {
                var lookup = FS.lookupPath(path, { parent: true });
                ret.parentExists = true;
                ret.parentPath = lookup.path;
                ret.parentObject = lookup.node;
                ret.name = PATH.basename(path);
                lookup = FS.lookupPath(path, { follow: !dontResolveLastLink });
                ret.exists = true;
                ret.path = lookup.path;
                ret.object = lookup.node;
                ret.name = lookup.node.name;
                ret.isRoot = lookup.path === "/";
            }
            catch (e) {
                ret.error = e.errno;
            } return ret; }, createPath: function (parent, path, canRead, canWrite) { parent = typeof parent == "string" ? parent : FS.getPath(parent); var parts = path.split("/").reverse(); while (parts.length) {
                var part = parts.pop();
                if (!part)
                    continue;
                var current = PATH.join2(parent, part);
                try {
                    FS.mkdir(current);
                }
                catch (e) { }
                parent = current;
            } return current; }, createFile: function (parent, name, properties, canRead, canWrite) { var path = PATH.join2(typeof parent == "string" ? parent : FS.getPath(parent), name); var mode = FS.getMode(canRead, canWrite); return FS.create(path, mode); }, createDataFile: function (parent, name, data, canRead, canWrite, canOwn) { var path = name; if (parent) {
                parent = typeof parent == "string" ? parent : FS.getPath(parent);
                path = name ? PATH.join2(parent, name) : parent;
            } var mode = FS.getMode(canRead, canWrite); var node = FS.create(path, mode); if (data) {
                if (typeof data == "string") {
                    var arr = new Array(data.length);
                    for (var i = 0, len = data.length; i < len; ++i)
                        arr[i] = data.charCodeAt(i);
                    data = arr;
                }
                FS.chmod(node, mode | 146);
                var stream = FS.open(node, 577);
                FS.write(stream, data, 0, data.length, 0, canOwn);
                FS.close(stream);
                FS.chmod(node, mode);
            } return node; }, createDevice: function (parent, name, input, output) { var path = PATH.join2(typeof parent == "string" ? parent : FS.getPath(parent), name); var mode = FS.getMode(!!input, !!output); if (!FS.createDevice.major)
                FS.createDevice.major = 64; var dev = FS.makedev(FS.createDevice.major++, 0); FS.registerDevice(dev, { open: function (stream) { stream.seekable = false; }, close: function (stream) { if (output && output.buffer && output.buffer.length) {
                    output(10);
                } }, read: function (stream, buffer, offset, length, pos) { var bytesRead = 0; for (var i = 0; i < length; i++) {
                    var result;
                    try {
                        result = input();
                    }
                    catch (e) {
                        throw new FS.ErrnoError(29);
                    }
                    if (result === undefined && bytesRead === 0) {
                        throw new FS.ErrnoError(6);
                    }
                    if (result === null || result === undefined)
                        break;
                    bytesRead++;
                    buffer[offset + i] = result;
                } if (bytesRead) {
                    stream.node.timestamp = Date.now();
                } return bytesRead; }, write: function (stream, buffer, offset, length, pos) { for (var i = 0; i < length; i++) {
                    try {
                        output(buffer[offset + i]);
                    }
                    catch (e) {
                        throw new FS.ErrnoError(29);
                    }
                } if (length) {
                    stream.node.timestamp = Date.now();
                } return i; } }); return FS.mkdev(path, mode, dev); }, forceLoadFile: function (obj) { if (obj.isDevice || obj.isFolder || obj.link || obj.contents)
                return true; if (typeof XMLHttpRequest != "undefined") {
                throw new Error("Lazy loading should have been performed (contents set) in createLazyFile, but it was not. Lazy loading only works in web workers. Use --embed-file or --preload-file in emcc on the main thread.");
            }
            else if (read_) {
                try {
                    obj.contents = intArrayFromString(read_(obj.url), true);
                    obj.usedBytes = obj.contents.length;
                }
                catch (e) {
                    throw new FS.ErrnoError(29);
                }
            }
            else {
                throw new Error("Cannot load without read() or XMLHttpRequest.");
            } }, createLazyFile: function (parent, name, url, canRead, canWrite) { function LazyUint8Array() { this.lengthKnown = false; this.chunks = []; } LazyUint8Array.prototype.get = function LazyUint8Array_get(idx) { if (idx > this.length - 1 || idx < 0) {
                return undefined;
            } var chunkOffset = idx % this.chunkSize; var chunkNum = idx / this.chunkSize | 0; return this.getter(chunkNum)[chunkOffset]; }; LazyUint8Array.prototype.setDataGetter = function LazyUint8Array_setDataGetter(getter) { this.getter = getter; }; LazyUint8Array.prototype.cacheLength = function LazyUint8Array_cacheLength() { var xhr = new XMLHttpRequest; xhr.open("HEAD", url, false); xhr.send(null); if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304))
                throw new Error("Couldn't load " + url + ". Status: " + xhr.status); var datalength = Number(xhr.getResponseHeader("Content-length")); var header; var hasByteServing = (header = xhr.getResponseHeader("Accept-Ranges")) && header === "bytes"; var usesGzip = (header = xhr.getResponseHeader("Content-Encoding")) && header === "gzip"; var chunkSize = 1024 * 1024; if (!hasByteServing)
                chunkSize = datalength; var doXHR = function (from, to) { if (from > to)
                throw new Error("invalid range (" + from + ", " + to + ") or no bytes requested!"); if (to > datalength - 1)
                throw new Error("only " + datalength + " bytes available! programmer error!"); var xhr = new XMLHttpRequest; xhr.open("GET", url, false); if (datalength !== chunkSize)
                xhr.setRequestHeader("Range", "bytes=" + from + "-" + to); xhr.responseType = "arraybuffer"; if (xhr.overrideMimeType) {
                xhr.overrideMimeType("text/plain; charset=x-user-defined");
            } xhr.send(null); if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304))
                throw new Error("Couldn't load " + url + ". Status: " + xhr.status); if (xhr.response !== undefined) {
                return new Uint8Array(xhr.response || []);
            }
            else {
                return intArrayFromString(xhr.responseText || "", true);
            } }; var lazyArray = this; lazyArray.setDataGetter(function (chunkNum) { var start = chunkNum * chunkSize; var end = (chunkNum + 1) * chunkSize - 1; end = Math.min(end, datalength - 1); if (typeof lazyArray.chunks[chunkNum] == "undefined") {
                lazyArray.chunks[chunkNum] = doXHR(start, end);
            } if (typeof lazyArray.chunks[chunkNum] == "undefined")
                throw new Error("doXHR failed!"); return lazyArray.chunks[chunkNum]; }); if (usesGzip || !datalength) {
                chunkSize = datalength = 1;
                datalength = this.getter(0).length;
                chunkSize = datalength;
                out("LazyFiles on gzip forces download of the whole file when length is accessed");
            } this._length = datalength; this._chunkSize = chunkSize; this.lengthKnown = true; }; if (typeof XMLHttpRequest != "undefined") {
                if (!ENVIRONMENT_IS_WORKER)
                    throw "Cannot do synchronous binary XHRs outside webworkers in modern browsers. Use --embed-file or --preload-file in emcc";
                var lazyArray = new LazyUint8Array;
                Object.defineProperties(lazyArray, { length: { get: function () { if (!this.lengthKnown) {
                            this.cacheLength();
                        } return this._length; } }, chunkSize: { get: function () { if (!this.lengthKnown) {
                            this.cacheLength();
                        } return this._chunkSize; } } });
                var properties = { isDevice: false, contents: lazyArray };
            }
            else {
                var properties = { isDevice: false, url: url };
            } var node = FS.createFile(parent, name, properties, canRead, canWrite); if (properties.contents) {
                node.contents = properties.contents;
            }
            else if (properties.url) {
                node.contents = null;
                node.url = properties.url;
            } Object.defineProperties(node, { usedBytes: { get: function () { return this.contents.length; } } }); var stream_ops = {}; var keys = Object.keys(node.stream_ops); keys.forEach(function (key) { var fn = node.stream_ops[key]; stream_ops[key] = function forceLoadLazyFile() { FS.forceLoadFile(node); return fn.apply(null, arguments); }; }); function writeChunks(stream, buffer, offset, length, position) { var contents = stream.node.contents; if (position >= contents.length)
                return 0; var size = Math.min(contents.length - position, length); if (contents.slice) {
                for (var i = 0; i < size; i++) {
                    buffer[offset + i] = contents[position + i];
                }
            }
            else {
                for (var i = 0; i < size; i++) {
                    buffer[offset + i] = contents.get(position + i);
                }
            } return size; } stream_ops.read = function (stream, buffer, offset, length, position) { FS.forceLoadFile(node); return writeChunks(stream, buffer, offset, length, position); }; stream_ops.mmap = function (stream, length, position, prot, flags) { FS.forceLoadFile(node); var ptr = mmapAlloc(length); if (!ptr) {
                throw new FS.ErrnoError(48);
            } writeChunks(stream, HEAP8, ptr, length, position); return { ptr: ptr, allocated: true }; }; node.stream_ops = stream_ops; return node; }, createPreloadedFile: function (parent, name, url, canRead, canWrite, onload, onerror, dontCreateFile, canOwn, preFinish) { var fullname = name ? PATH_FS.resolve(PATH.join2(parent, name)) : parent; var dep = getUniqueRunDependency("cp " + fullname); function processData(byteArray) { function finish(byteArray) { if (preFinish)
                preFinish(); if (!dontCreateFile) {
                FS.createDataFile(parent, name, byteArray, canRead, canWrite, canOwn);
            } if (onload)
                onload(); removeRunDependency(dep); } if (Browser.handledByPreloadPlugin(byteArray, fullname, finish, function () { if (onerror)
                onerror(); removeRunDependency(dep); })) {
                return;
            } finish(byteArray); } addRunDependency(dep); if (typeof url == "string") {
                asyncLoad(url, function (byteArray) { return processData(byteArray); }, onerror);
            }
            else {
                processData(url);
            } }, indexedDB: function () { return window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB; }, DB_NAME: function () { return "EM_FS_" + window.location.pathname; }, DB_VERSION: 20, DB_STORE_NAME: "FILE_DATA", saveFilesToDB: function (paths, onload, onerror) { onload = onload || (function () { }); onerror = onerror || (function () { }); var indexedDB = FS.indexedDB(); try {
                var openRequest = indexedDB.open(FS.DB_NAME(), FS.DB_VERSION);
            }
            catch (e) {
                return onerror(e);
            } openRequest.onupgradeneeded = function () { out("creating db"); var db = openRequest.result; db.createObjectStore(FS.DB_STORE_NAME); }; openRequest.onsuccess = function () { var db = openRequest.result; var transaction = db.transaction([FS.DB_STORE_NAME], "readwrite"); var files = transaction.objectStore(FS.DB_STORE_NAME); var ok = 0, fail = 0, total = paths.length; function finish() { if (fail == 0)
                onload();
            else
                onerror(); } paths.forEach(function (path) { var putRequest = files.put(FS.analyzePath(path).object.contents, path); putRequest.onsuccess = function () { ok++; if (ok + fail == total)
                finish(); }; putRequest.onerror = function () { fail++; if (ok + fail == total)
                finish(); }; }); transaction.onerror = onerror; }; openRequest.onerror = onerror; }, loadFilesFromDB: function (paths, onload, onerror) { onload = onload || (function () { }); onerror = onerror || (function () { }); var indexedDB = FS.indexedDB(); try {
                var openRequest = indexedDB.open(FS.DB_NAME(), FS.DB_VERSION);
            }
            catch (e) {
                return onerror(e);
            } openRequest.onupgradeneeded = onerror; openRequest.onsuccess = function () { var db = openRequest.result; try {
                var transaction = db.transaction([FS.DB_STORE_NAME], "readonly");
            }
            catch (e) {
                onerror(e);
                return;
            } var files = transaction.objectStore(FS.DB_STORE_NAME); var ok = 0, fail = 0, total = paths.length; function finish() { if (fail == 0)
                onload();
            else
                onerror(); } paths.forEach(function (path) { var getRequest = files.get(path); getRequest.onsuccess = function () { if (FS.analyzePath(path).exists) {
                FS.unlink(path);
            } FS.createDataFile(PATH.dirname(path), PATH.basename(path), getRequest.result, true, true, true); ok++; if (ok + fail == total)
                finish(); }; getRequest.onerror = function () { fail++; if (ok + fail == total)
                finish(); }; }); transaction.onerror = onerror; }; openRequest.onerror = onerror; } };
        var SYSCALLS = { DEFAULT_POLLMASK: 5, calculateAt: function (dirfd, path, allowEmpty) { if (PATH.isAbs(path)) {
                return path;
            } var dir; if (dirfd === -100) {
                dir = FS.cwd();
            }
            else {
                var dirstream = FS.getStream(dirfd);
                if (!dirstream)
                    throw new FS.ErrnoError(8);
                dir = dirstream.path;
            } if (path.length == 0) {
                if (!allowEmpty) {
                    throw new FS.ErrnoError(44);
                }
                return dir;
            } return PATH.join2(dir, path); }, doStat: function (func, path, buf) { try {
                var stat = func(path);
            }
            catch (e) {
                if (e && e.node && PATH.normalize(path) !== PATH.normalize(FS.getPath(e.node))) {
                    return -54;
                }
                throw e;
            } HEAP32[buf >>> 2] = stat.dev; HEAP32[buf + 4 >>> 2] = 0; HEAP32[buf + 8 >>> 2] = stat.ino; HEAP32[buf + 12 >>> 2] = stat.mode; HEAP32[buf + 16 >>> 2] = stat.nlink; HEAP32[buf + 20 >>> 2] = stat.uid; HEAP32[buf + 24 >>> 2] = stat.gid; HEAP32[buf + 28 >>> 2] = stat.rdev; HEAP32[buf + 32 >>> 2] = 0; tempI64 = [stat.size >>> 0, (tempDouble = stat.size, +Math.abs(tempDouble) >= 1 ? tempDouble > 0 ? (Math.min(+Math.floor(tempDouble / 4294967296), 4294967295) | 0) >>> 0 : ~~+Math.ceil((tempDouble - +(~~tempDouble >>> 0)) / 4294967296) >>> 0 : 0)], HEAP32[buf + 40 >>> 2] = tempI64[0], HEAP32[buf + 44 >>> 2] = tempI64[1]; HEAP32[buf + 48 >>> 2] = 4096; HEAP32[buf + 52 >>> 2] = stat.blocks; HEAP32[buf + 56 >>> 2] = stat.atime.getTime() / 1e3 | 0; HEAP32[buf + 60 >>> 2] = 0; HEAP32[buf + 64 >>> 2] = stat.mtime.getTime() / 1e3 | 0; HEAP32[buf + 68 >>> 2] = 0; HEAP32[buf + 72 >>> 2] = stat.ctime.getTime() / 1e3 | 0; HEAP32[buf + 76 >>> 2] = 0; tempI64 = [stat.ino >>> 0, (tempDouble = stat.ino, +Math.abs(tempDouble) >= 1 ? tempDouble > 0 ? (Math.min(+Math.floor(tempDouble / 4294967296), 4294967295) | 0) >>> 0 : ~~+Math.ceil((tempDouble - +(~~tempDouble >>> 0)) / 4294967296) >>> 0 : 0)], HEAP32[buf + 80 >>> 2] = tempI64[0], HEAP32[buf + 84 >>> 2] = tempI64[1]; return 0; }, doMsync: function (addr, stream, len, flags, offset) { var buffer = HEAPU8.slice(addr, addr + len); FS.msync(stream, buffer, offset, len, flags); }, varargs: undefined, get: function () { SYSCALLS.varargs += 4; var ret = HEAP32[SYSCALLS.varargs - 4 >>> 2]; return ret; }, getStr: function (ptr) { var ret = UTF8ToString(ptr); return ret; }, getStreamFromFD: function (fd) { var stream = FS.getStream(fd); if (!stream)
                throw new FS.ErrnoError(8); return stream; } };
        function ___syscall_chmod(path, mode) { try {
            path = SYSCALLS.getStr(path);
            FS.chmod(path, mode);
            return 0;
        }
        catch (e) {
            if (typeof FS == "undefined" || !(e instanceof FS.ErrnoError))
                throw e;
            return -e.errno;
        } }
        function ___syscall_faccessat(dirfd, path, amode, flags) { try {
            path = SYSCALLS.getStr(path);
            path = SYSCALLS.calculateAt(dirfd, path);
            if (amode & ~7) {
                return -28;
            }
            var lookup = FS.lookupPath(path, { follow: true });
            var node = lookup.node;
            if (!node) {
                return -44;
            }
            var perms = "";
            if (amode & 4)
                perms += "r";
            if (amode & 2)
                perms += "w";
            if (amode & 1)
                perms += "x";
            if (perms && FS.nodePermissions(node, perms)) {
                return -2;
            }
            return 0;
        }
        catch (e) {
            if (typeof FS == "undefined" || !(e instanceof FS.ErrnoError))
                throw e;
            return -e.errno;
        } }
        function setErrNo(value) { HEAP32[___errno_location() >>> 2] = value; return value; }
        function ___syscall_fcntl64(fd, cmd, varargs) { SYSCALLS.varargs = varargs; try {
            var stream = SYSCALLS.getStreamFromFD(fd);
            switch (cmd) {
                case 0: {
                    var arg = SYSCALLS.get();
                    if (arg < 0) {
                        return -28;
                    }
                    var newStream;
                    newStream = FS.createStream(stream, arg);
                    return newStream.fd;
                }
                case 1:
                case 2: return 0;
                case 3: return stream.flags;
                case 4: {
                    var arg = SYSCALLS.get();
                    stream.flags |= arg;
                    return 0;
                }
                case 5: {
                    var arg = SYSCALLS.get();
                    var offset = 0;
                    HEAP16[arg + offset >>> 1] = 2;
                    return 0;
                }
                case 6:
                case 7: return 0;
                case 16:
                case 8: return -28;
                case 9:
                    setErrNo(28);
                    return -1;
                default: {
                    return -28;
                }
            }
        }
        catch (e) {
            if (typeof FS == "undefined" || !(e instanceof FS.ErrnoError))
                throw e;
            return -e.errno;
        } }
        function ___syscall_fstat64(fd, buf) { try {
            var stream = SYSCALLS.getStreamFromFD(fd);
            return SYSCALLS.doStat(FS.stat, stream.path, buf);
        }
        catch (e) {
            if (typeof FS == "undefined" || !(e instanceof FS.ErrnoError))
                throw e;
            return -e.errno;
        } }
        function ___syscall_getdents64(fd, dirp, count) { try {
            var stream = SYSCALLS.getStreamFromFD(fd);
            if (!stream.getdents) {
                stream.getdents = FS.readdir(stream.path);
            }
            var struct_size = 280;
            var pos = 0;
            var off = FS.llseek(stream, 0, 1);
            var idx = Math.floor(off / struct_size);
            while (idx < stream.getdents.length && pos + struct_size <= count) {
                var id;
                var type;
                var name = stream.getdents[idx];
                if (name === ".") {
                    id = stream.node.id;
                    type = 4;
                }
                else if (name === "..") {
                    var lookup = FS.lookupPath(stream.path, { parent: true });
                    id = lookup.node.id;
                    type = 4;
                }
                else {
                    var child = FS.lookupNode(stream.node, name);
                    id = child.id;
                    type = FS.isChrdev(child.mode) ? 2 : FS.isDir(child.mode) ? 4 : FS.isLink(child.mode) ? 10 : 8;
                }
                tempI64 = [id >>> 0, (tempDouble = id, +Math.abs(tempDouble) >= 1 ? tempDouble > 0 ? (Math.min(+Math.floor(tempDouble / 4294967296), 4294967295) | 0) >>> 0 : ~~+Math.ceil((tempDouble - +(~~tempDouble >>> 0)) / 4294967296) >>> 0 : 0)], HEAP32[dirp + pos >>> 2] = tempI64[0], HEAP32[dirp + pos + 4 >>> 2] = tempI64[1];
                tempI64 = [(idx + 1) * struct_size >>> 0, (tempDouble = (idx + 1) * struct_size, +Math.abs(tempDouble) >= 1 ? tempDouble > 0 ? (Math.min(+Math.floor(tempDouble / 4294967296), 4294967295) | 0) >>> 0 : ~~+Math.ceil((tempDouble - +(~~tempDouble >>> 0)) / 4294967296) >>> 0 : 0)], HEAP32[dirp + pos + 8 >>> 2] = tempI64[0], HEAP32[dirp + pos + 12 >>> 2] = tempI64[1];
                HEAP16[dirp + pos + 16 >>> 1] = 280;
                HEAP8[dirp + pos + 18 >>> 0] = type;
                stringToUTF8(name, dirp + pos + 19, 256);
                pos += struct_size;
                idx += 1;
            }
            FS.llseek(stream, idx * struct_size, 0);
            return pos;
        }
        catch (e) {
            if (typeof FS == "undefined" || !(e instanceof FS.ErrnoError))
                throw e;
            return -e.errno;
        } }
        function ___syscall_ioctl(fd, op, varargs) { SYSCALLS.varargs = varargs; try {
            var stream = SYSCALLS.getStreamFromFD(fd);
            switch (op) {
                case 21509:
                case 21505: {
                    if (!stream.tty)
                        return -59;
                    return 0;
                }
                case 21510:
                case 21511:
                case 21512:
                case 21506:
                case 21507:
                case 21508: {
                    if (!stream.tty)
                        return -59;
                    return 0;
                }
                case 21519: {
                    if (!stream.tty)
                        return -59;
                    var argp = SYSCALLS.get();
                    HEAP32[argp >>> 2] = 0;
                    return 0;
                }
                case 21520: {
                    if (!stream.tty)
                        return -59;
                    return -28;
                }
                case 21531: {
                    var argp = SYSCALLS.get();
                    return FS.ioctl(stream, op, argp);
                }
                case 21523: {
                    if (!stream.tty)
                        return -59;
                    return 0;
                }
                case 21524: {
                    if (!stream.tty)
                        return -59;
                    return 0;
                }
                default: abort("bad ioctl syscall " + op);
            }
        }
        catch (e) {
            if (typeof FS == "undefined" || !(e instanceof FS.ErrnoError))
                throw e;
            return -e.errno;
        } }
        function ___syscall_lstat64(path, buf) { try {
            path = SYSCALLS.getStr(path);
            return SYSCALLS.doStat(FS.lstat, path, buf);
        }
        catch (e) {
            if (typeof FS == "undefined" || !(e instanceof FS.ErrnoError))
                throw e;
            return -e.errno;
        } }
        function ___syscall_mkdirat(dirfd, path, mode) { try {
            path = SYSCALLS.getStr(path);
            path = SYSCALLS.calculateAt(dirfd, path);
            path = PATH.normalize(path);
            if (path[path.length - 1] === "/")
                path = path.substr(0, path.length - 1);
            FS.mkdir(path, mode, 0);
            return 0;
        }
        catch (e) {
            if (typeof FS == "undefined" || !(e instanceof FS.ErrnoError))
                throw e;
            return -e.errno;
        } }
        function ___syscall_newfstatat(dirfd, path, buf, flags) { try {
            path = SYSCALLS.getStr(path);
            var nofollow = flags & 256;
            var allowEmpty = flags & 4096;
            flags = flags & ~4352;
            path = SYSCALLS.calculateAt(dirfd, path, allowEmpty);
            return SYSCALLS.doStat(nofollow ? FS.lstat : FS.stat, path, buf);
        }
        catch (e) {
            if (typeof FS == "undefined" || !(e instanceof FS.ErrnoError))
                throw e;
            return -e.errno;
        } }
        function ___syscall_openat(dirfd, path, flags, varargs) { SYSCALLS.varargs = varargs; try {
            path = SYSCALLS.getStr(path);
            path = SYSCALLS.calculateAt(dirfd, path);
            var mode = varargs ? SYSCALLS.get() : 0;
            return FS.open(path, flags, mode).fd;
        }
        catch (e) {
            if (typeof FS == "undefined" || !(e instanceof FS.ErrnoError))
                throw e;
            return -e.errno;
        } }
        function ___syscall_rmdir(path) { try {
            path = SYSCALLS.getStr(path);
            FS.rmdir(path);
            return 0;
        }
        catch (e) {
            if (typeof FS == "undefined" || !(e instanceof FS.ErrnoError))
                throw e;
            return -e.errno;
        } }
        function ___syscall_stat64(path, buf) { try {
            path = SYSCALLS.getStr(path);
            return SYSCALLS.doStat(FS.stat, path, buf);
        }
        catch (e) {
            if (typeof FS == "undefined" || !(e instanceof FS.ErrnoError))
                throw e;
            return -e.errno;
        } }
        function ___syscall_unlinkat(dirfd, path, flags) { try {
            path = SYSCALLS.getStr(path);
            path = SYSCALLS.calculateAt(dirfd, path);
            if (flags === 0) {
                FS.unlink(path);
            }
            else if (flags === 512) {
                FS.rmdir(path);
            }
            else {
                abort("Invalid flags passed to unlinkat");
            }
            return 0;
        }
        catch (e) {
            if (typeof FS == "undefined" || !(e instanceof FS.ErrnoError))
                throw e;
            return -e.errno;
        } }
        function __dlinit(main_dso_handle) { }
        var dlopenMissingError = "To use dlopen, you need enable dynamic linking, see https://github.com/emscripten-core/emscripten/wiki/Linking";
        function __dlopen_js(filename, flag) { abort(dlopenMissingError); }
        function __dlsym_js(handle, symbol) { abort(dlopenMissingError); }
        var char_0 = 48;
        var char_9 = 57;
        function makeLegalFunctionName(name) { if (undefined === name) {
            return "_unknown";
        } name = name.replace(/[^a-zA-Z0-9_]/g, "$"); var f = name.charCodeAt(0); if (f >= char_0 && f <= char_9) {
            return "_" + name;
        } return name; }
        function createNamedFunction(name, body) { name = makeLegalFunctionName(name); return new Function("body", "return function " + name + "() {\n" + '    "use strict";' + "    return body.apply(this, arguments);\n" + "};\n")(body); }
        var emval_handle_array = [{}, { value: undefined }, { value: null }, { value: true }, { value: false }];
        var emval_free_list = [];
        function extendError(baseErrorType, errorName) { var errorClass = createNamedFunction(errorName, function (message) { this.name = errorName; this.message = message; var stack = new Error(message).stack; if (stack !== undefined) {
            this.stack = this.toString() + "\n" + stack.replace(/^Error(:[^\n]*)?\n/, "");
        } }); errorClass.prototype = Object.create(baseErrorType.prototype); errorClass.prototype.constructor = errorClass; errorClass.prototype.toString = function () { if (this.message === undefined) {
            return this.name;
        }
        else {
            return this.name + ": " + this.message;
        } }; return errorClass; }
        var BindingError = undefined;
        function throwBindingError(message) { throw new BindingError(message); }
        function count_emval_handles() { var count = 0; for (var i = 5; i < emval_handle_array.length; ++i) {
            if (emval_handle_array[i] !== undefined) {
                ++count;
            }
        } return count; }
        function get_first_emval() { for (var i = 5; i < emval_handle_array.length; ++i) {
            if (emval_handle_array[i] !== undefined) {
                return emval_handle_array[i];
            }
        } return null; }
        function init_emval() { Module["count_emval_handles"] = count_emval_handles; Module["get_first_emval"] = get_first_emval; }
        var Emval = { toValue: function (handle) { if (!handle) {
                throwBindingError("Cannot use deleted val. handle = " + handle);
            } return emval_handle_array[handle].value; }, toHandle: function (value) { switch (value) {
                case undefined: return 1;
                case null: return 2;
                case true: return 3;
                case false: return 4;
                default: {
                    var handle = emval_free_list.length ? emval_free_list.pop() : emval_handle_array.length;
                    emval_handle_array[handle] = { refcount: 1, value: value };
                    return handle;
                }
            } } };
        var PureVirtualError = undefined;
        function embind_init_charCodes() { var codes = new Array(256); for (var i = 0; i < 256; ++i) {
            codes[i] = String.fromCharCode(i);
        } embind_charCodes = codes; }
        var embind_charCodes = undefined;
        function readLatin1String(ptr) { var ret = ""; var c = ptr; while (HEAPU8[c >>> 0]) {
            ret += embind_charCodes[HEAPU8[c++ >>> 0]];
        } return ret; }
        function getInheritedInstanceCount() { return Object.keys(registeredInstances).length; }
        function getLiveInheritedInstances() { var rv = []; for (var k in registeredInstances) {
            if (registeredInstances.hasOwnProperty(k)) {
                rv.push(registeredInstances[k]);
            }
        } return rv; }
        var deletionQueue = [];
        function flushPendingDeletes() { while (deletionQueue.length) {
            var obj = deletionQueue.pop();
            obj.$$.deleteScheduled = false;
            obj["delete"]();
        } }
        var delayFunction = undefined;
        function setDelayFunction(fn) { delayFunction = fn; if (deletionQueue.length && delayFunction) {
            delayFunction(flushPendingDeletes);
        } }
        function init_embind() { Module["getInheritedInstanceCount"] = getInheritedInstanceCount; Module["getLiveInheritedInstances"] = getLiveInheritedInstances; Module["flushPendingDeletes"] = flushPendingDeletes; Module["setDelayFunction"] = setDelayFunction; }
        var registeredInstances = {};
        function getBasestPointer(class_, ptr) { if (ptr === undefined) {
            throwBindingError("ptr should not be undefined");
        } while (class_.baseClass) {
            ptr = class_.upcast(ptr);
            class_ = class_.baseClass;
        } return ptr; }
        function registerInheritedInstance(class_, ptr, instance) { ptr = getBasestPointer(class_, ptr); if (registeredInstances.hasOwnProperty(ptr)) {
            throwBindingError("Tried to register registered instance: " + ptr);
        }
        else {
            registeredInstances[ptr] = instance;
        } }
        var registeredTypes = {};
        function getTypeName(type) { var ptr = ___getTypeName(type); var rv = readLatin1String(ptr); _free(ptr); return rv; }
        function requireRegisteredType(rawType, humanName) { var impl = registeredTypes[rawType]; if (undefined === impl) {
            throwBindingError(humanName + " has unknown type " + getTypeName(rawType));
        } return impl; }
        function unregisterInheritedInstance(class_, ptr) { ptr = getBasestPointer(class_, ptr); if (registeredInstances.hasOwnProperty(ptr)) {
            delete registeredInstances[ptr];
        }
        else {
            throwBindingError("Tried to unregister unregistered instance: " + ptr);
        } }
        function detachFinalizer(handle) { }
        var finalizationRegistry = false;
        function runDestructor($$) { if ($$.smartPtr) {
            $$.smartPtrType.rawDestructor($$.smartPtr);
        }
        else {
            $$.ptrType.registeredClass.rawDestructor($$.ptr);
        } }
        function releaseClassHandle($$) { $$.count.value -= 1; var toDelete = 0 === $$.count.value; if (toDelete) {
            runDestructor($$);
        } }
        function downcastPointer(ptr, ptrClass, desiredClass) { if (ptrClass === desiredClass) {
            return ptr;
        } if (undefined === desiredClass.baseClass) {
            return null;
        } var rv = downcastPointer(ptr, ptrClass, desiredClass.baseClass); if (rv === null) {
            return null;
        } return desiredClass.downcast(rv); }
        var registeredPointers = {};
        function getInheritedInstance(class_, ptr) { ptr = getBasestPointer(class_, ptr); return registeredInstances[ptr]; }
        var InternalError = undefined;
        function throwInternalError(message) { throw new InternalError(message); }
        function makeClassHandle(prototype, record) { if (!record.ptrType || !record.ptr) {
            throwInternalError("makeClassHandle requires ptr and ptrType");
        } var hasSmartPtrType = !!record.smartPtrType; var hasSmartPtr = !!record.smartPtr; if (hasSmartPtrType !== hasSmartPtr) {
            throwInternalError("Both smartPtrType and smartPtr must be specified");
        } record.count = { value: 1 }; return attachFinalizer(Object.create(prototype, { $$: { value: record } })); }
        function RegisteredPointer_fromWireType(ptr) { var rawPointer = this.getPointee(ptr); if (!rawPointer) {
            this.destructor(ptr);
            return null;
        } var registeredInstance = getInheritedInstance(this.registeredClass, rawPointer); if (undefined !== registeredInstance) {
            if (0 === registeredInstance.$$.count.value) {
                registeredInstance.$$.ptr = rawPointer;
                registeredInstance.$$.smartPtr = ptr;
                return registeredInstance["clone"]();
            }
            else {
                var rv = registeredInstance["clone"]();
                this.destructor(ptr);
                return rv;
            }
        } function makeDefaultHandle() { if (this.isSmartPointer) {
            return makeClassHandle(this.registeredClass.instancePrototype, { ptrType: this.pointeeType, ptr: rawPointer, smartPtrType: this, smartPtr: ptr });
        }
        else {
            return makeClassHandle(this.registeredClass.instancePrototype, { ptrType: this, ptr: ptr });
        } } var actualType = this.registeredClass.getActualType(rawPointer); var registeredPointerRecord = registeredPointers[actualType]; if (!registeredPointerRecord) {
            return makeDefaultHandle.call(this);
        } var toType; if (this.isConst) {
            toType = registeredPointerRecord.constPointerType;
        }
        else {
            toType = registeredPointerRecord.pointerType;
        } var dp = downcastPointer(rawPointer, this.registeredClass, toType.registeredClass); if (dp === null) {
            return makeDefaultHandle.call(this);
        } if (this.isSmartPointer) {
            return makeClassHandle(toType.registeredClass.instancePrototype, { ptrType: toType, ptr: dp, smartPtrType: this, smartPtr: ptr });
        }
        else {
            return makeClassHandle(toType.registeredClass.instancePrototype, { ptrType: toType, ptr: dp });
        } }
        function attachFinalizer(handle) { if ("undefined" === typeof FinalizationRegistry) {
            attachFinalizer = function (handle) { return handle; };
            return handle;
        } finalizationRegistry = new FinalizationRegistry(function (info) { releaseClassHandle(info.$$); }); attachFinalizer = function (handle) { var $$ = handle.$$; var hasSmartPtr = !!$$.smartPtr; if (hasSmartPtr) {
            var info = { $$: $$ };
            finalizationRegistry.register(handle, info, handle);
        } return handle; }; detachFinalizer = function (handle) { return finalizationRegistry.unregister(handle); }; return attachFinalizer(handle); }
        function __embind_create_inheriting_constructor(constructorName, wrapperType, properties) { constructorName = readLatin1String(constructorName); wrapperType = requireRegisteredType(wrapperType, "wrapper"); properties = Emval.toValue(properties); var arraySlice = [].slice; var registeredClass = wrapperType.registeredClass; var wrapperPrototype = registeredClass.instancePrototype; var baseClass = registeredClass.baseClass; var baseClassPrototype = baseClass.instancePrototype; var baseConstructor = registeredClass.baseClass.constructor; var ctor = createNamedFunction(constructorName, function () { registeredClass.baseClass.pureVirtualFunctions.forEach(function (name) { if (this[name] === baseClassPrototype[name]) {
            throw new PureVirtualError("Pure virtual function " + name + " must be implemented in JavaScript");
        } }.bind(this)); Object.defineProperty(this, "__parent", { value: wrapperPrototype }); this["__construct"].apply(this, arraySlice.call(arguments)); }); wrapperPrototype["__construct"] = function __construct() { if (this === wrapperPrototype) {
            throwBindingError("Pass correct 'this' to __construct");
        } var inner = baseConstructor["implement"].apply(undefined, [this].concat(arraySlice.call(arguments))); detachFinalizer(inner); var $$ = inner.$$; inner["notifyOnDestruction"](); $$.preservePointerOnDelete = true; Object.defineProperties(this, { $$: { value: $$ } }); attachFinalizer(this); registerInheritedInstance(registeredClass, $$.ptr, this); }; wrapperPrototype["__destruct"] = function __destruct() { if (this === wrapperPrototype) {
            throwBindingError("Pass correct 'this' to __destruct");
        } detachFinalizer(this); unregisterInheritedInstance(registeredClass, this.$$.ptr); }; ctor.prototype = Object.create(wrapperPrototype); for (var p in properties) {
            ctor.prototype[p] = properties[p];
        } return Emval.toHandle(ctor); }
        function __embind_register_bigint(primitiveType, name, size, minRange, maxRange) { }
        function getShiftFromSize(size) { switch (size) {
            case 1: return 0;
            case 2: return 1;
            case 4: return 2;
            case 8: return 3;
            default: throw new TypeError("Unknown type size: " + size);
        } }
        var awaitingDependencies = {};
        var typeDependencies = {};
        function whenDependentTypesAreResolved(myTypes, dependentTypes, getTypeConverters) { myTypes.forEach(function (type) { typeDependencies[type] = dependentTypes; }); function onComplete(typeConverters) { var myTypeConverters = getTypeConverters(typeConverters); if (myTypeConverters.length !== myTypes.length) {
            throwInternalError("Mismatched type converter count");
        } for (var i = 0; i < myTypes.length; ++i) {
            registerType(myTypes[i], myTypeConverters[i]);
        } } var typeConverters = new Array(dependentTypes.length); var unregisteredTypes = []; var registered = 0; dependentTypes.forEach(function (dt, i) { if (registeredTypes.hasOwnProperty(dt)) {
            typeConverters[i] = registeredTypes[dt];
        }
        else {
            unregisteredTypes.push(dt);
            if (!awaitingDependencies.hasOwnProperty(dt)) {
                awaitingDependencies[dt] = [];
            }
            awaitingDependencies[dt].push(function () { typeConverters[i] = registeredTypes[dt]; ++registered; if (registered === unregisteredTypes.length) {
                onComplete(typeConverters);
            } });
        } }); if (0 === unregisteredTypes.length) {
            onComplete(typeConverters);
        } }
        function registerType(rawType, registeredInstance, options) {
            if (options === void 0) { options = {}; }
            if (!("argPackAdvance" in registeredInstance)) {
                throw new TypeError("registerType registeredInstance requires argPackAdvance");
            }
            var name = registeredInstance.name;
            if (!rawType) {
                throwBindingError('type "' + name + '" must have a positive integer typeid pointer');
            }
            if (registeredTypes.hasOwnProperty(rawType)) {
                if (options.ignoreDuplicateRegistrations) {
                    return;
                }
                else {
                    throwBindingError("Cannot register type '" + name + "' twice");
                }
            }
            registeredTypes[rawType] = registeredInstance;
            delete typeDependencies[rawType];
            if (awaitingDependencies.hasOwnProperty(rawType)) {
                var callbacks = awaitingDependencies[rawType];
                delete awaitingDependencies[rawType];
                callbacks.forEach(function (cb) { return cb(); });
            }
        }
        function __embind_register_bool(rawType, name, size, trueValue, falseValue) { var shift = getShiftFromSize(size); name = readLatin1String(name); registerType(rawType, { name: name, "fromWireType": function (wt) { return !!wt; }, "toWireType": function (destructors, o) { return o ? trueValue : falseValue; }, "argPackAdvance": 8, "readValueFromPointer": function (pointer) { var heap; if (size === 1) {
                heap = HEAP8;
            }
            else if (size === 2) {
                heap = HEAP16;
            }
            else if (size === 4) {
                heap = HEAP32;
            }
            else {
                throw new TypeError("Unknown boolean type size: " + name);
            } return this["fromWireType"](heap[pointer >>> shift]); }, destructorFunction: null }); }
        function ClassHandle_isAliasOf(other) { if (!(this instanceof ClassHandle)) {
            return false;
        } if (!(other instanceof ClassHandle)) {
            return false;
        } var leftClass = this.$$.ptrType.registeredClass; var left = this.$$.ptr; var rightClass = other.$$.ptrType.registeredClass; var right = other.$$.ptr; while (leftClass.baseClass) {
            left = leftClass.upcast(left);
            leftClass = leftClass.baseClass;
        } while (rightClass.baseClass) {
            right = rightClass.upcast(right);
            rightClass = rightClass.baseClass;
        } return leftClass === rightClass && left === right; }
        function shallowCopyInternalPointer(o) { return { count: o.count, deleteScheduled: o.deleteScheduled, preservePointerOnDelete: o.preservePointerOnDelete, ptr: o.ptr, ptrType: o.ptrType, smartPtr: o.smartPtr, smartPtrType: o.smartPtrType }; }
        function throwInstanceAlreadyDeleted(obj) { function getInstanceTypeName(handle) { return handle.$$.ptrType.registeredClass.name; } throwBindingError(getInstanceTypeName(obj) + " instance already deleted"); }
        function ClassHandle_clone() { if (!this.$$.ptr) {
            throwInstanceAlreadyDeleted(this);
        } if (this.$$.preservePointerOnDelete) {
            this.$$.count.value += 1;
            return this;
        }
        else {
            var clone = attachFinalizer(Object.create(Object.getPrototypeOf(this), { $$: { value: shallowCopyInternalPointer(this.$$) } }));
            clone.$$.count.value += 1;
            clone.$$.deleteScheduled = false;
            return clone;
        } }
        function ClassHandle_delete() { if (!this.$$.ptr) {
            throwInstanceAlreadyDeleted(this);
        } if (this.$$.deleteScheduled && !this.$$.preservePointerOnDelete) {
            throwBindingError("Object already scheduled for deletion");
        } detachFinalizer(this); releaseClassHandle(this.$$); if (!this.$$.preservePointerOnDelete) {
            this.$$.smartPtr = undefined;
            this.$$.ptr = undefined;
        } }
        function ClassHandle_isDeleted() { return !this.$$.ptr; }
        function ClassHandle_deleteLater() { if (!this.$$.ptr) {
            throwInstanceAlreadyDeleted(this);
        } if (this.$$.deleteScheduled && !this.$$.preservePointerOnDelete) {
            throwBindingError("Object already scheduled for deletion");
        } deletionQueue.push(this); if (deletionQueue.length === 1 && delayFunction) {
            delayFunction(flushPendingDeletes);
        } this.$$.deleteScheduled = true; return this; }
        function init_ClassHandle() { ClassHandle.prototype["isAliasOf"] = ClassHandle_isAliasOf; ClassHandle.prototype["clone"] = ClassHandle_clone; ClassHandle.prototype["delete"] = ClassHandle_delete; ClassHandle.prototype["isDeleted"] = ClassHandle_isDeleted; ClassHandle.prototype["deleteLater"] = ClassHandle_deleteLater; }
        function ClassHandle() { }
        function ensureOverloadTable(proto, methodName, humanName) { if (undefined === proto[methodName].overloadTable) {
            var prevFunc = proto[methodName];
            proto[methodName] = function () { if (!proto[methodName].overloadTable.hasOwnProperty(arguments.length)) {
                throwBindingError("Function '" + humanName + "' called with an invalid number of arguments (" + arguments.length + ") - expects one of (" + proto[methodName].overloadTable + ")!");
            } return proto[methodName].overloadTable[arguments.length].apply(this, arguments); };
            proto[methodName].overloadTable = [];
            proto[methodName].overloadTable[prevFunc.argCount] = prevFunc;
        } }
        function exposePublicSymbol(name, value, numArguments) { if (Module.hasOwnProperty(name)) {
            if (undefined === numArguments || undefined !== Module[name].overloadTable && undefined !== Module[name].overloadTable[numArguments]) {
                throwBindingError("Cannot register public name '" + name + "' twice");
            }
            ensureOverloadTable(Module, name, name);
            if (Module.hasOwnProperty(numArguments)) {
                throwBindingError("Cannot register multiple overloads of a function with the same number of arguments (" + numArguments + ")!");
            }
            Module[name].overloadTable[numArguments] = value;
        }
        else {
            Module[name] = value;
            if (undefined !== numArguments) {
                Module[name].numArguments = numArguments;
            }
        } }
        function RegisteredClass(name, constructor, instancePrototype, rawDestructor, baseClass, getActualType, upcast, downcast) { this.name = name; this.constructor = constructor; this.instancePrototype = instancePrototype; this.rawDestructor = rawDestructor; this.baseClass = baseClass; this.getActualType = getActualType; this.upcast = upcast; this.downcast = downcast; this.pureVirtualFunctions = []; }
        function upcastPointer(ptr, ptrClass, desiredClass) { while (ptrClass !== desiredClass) {
            if (!ptrClass.upcast) {
                throwBindingError("Expected null or instance of " + desiredClass.name + ", got an instance of " + ptrClass.name);
            }
            ptr = ptrClass.upcast(ptr);
            ptrClass = ptrClass.baseClass;
        } return ptr; }
        function constNoSmartPtrRawPointerToWireType(destructors, handle) { if (handle === null) {
            if (this.isReference) {
                throwBindingError("null is not a valid " + this.name);
            }
            return 0;
        } if (!handle.$$) {
            throwBindingError('Cannot pass "' + _embind_repr(handle) + '" as a ' + this.name);
        } if (!handle.$$.ptr) {
            throwBindingError("Cannot pass deleted object as a pointer of type " + this.name);
        } var handleClass = handle.$$.ptrType.registeredClass; var ptr = upcastPointer(handle.$$.ptr, handleClass, this.registeredClass); return ptr; }
        function genericPointerToWireType(destructors, handle) { var ptr; if (handle === null) {
            if (this.isReference) {
                throwBindingError("null is not a valid " + this.name);
            }
            if (this.isSmartPointer) {
                ptr = this.rawConstructor();
                if (destructors !== null) {
                    destructors.push(this.rawDestructor, ptr);
                }
                return ptr;
            }
            else {
                return 0;
            }
        } if (!handle.$$) {
            throwBindingError('Cannot pass "' + _embind_repr(handle) + '" as a ' + this.name);
        } if (!handle.$$.ptr) {
            throwBindingError("Cannot pass deleted object as a pointer of type " + this.name);
        } if (!this.isConst && handle.$$.ptrType.isConst) {
            throwBindingError("Cannot convert argument of type " + (handle.$$.smartPtrType ? handle.$$.smartPtrType.name : handle.$$.ptrType.name) + " to parameter type " + this.name);
        } var handleClass = handle.$$.ptrType.registeredClass; ptr = upcastPointer(handle.$$.ptr, handleClass, this.registeredClass); if (this.isSmartPointer) {
            if (undefined === handle.$$.smartPtr) {
                throwBindingError("Passing raw pointer to smart pointer is illegal");
            }
            switch (this.sharingPolicy) {
                case 0:
                    if (handle.$$.smartPtrType === this) {
                        ptr = handle.$$.smartPtr;
                    }
                    else {
                        throwBindingError("Cannot convert argument of type " + (handle.$$.smartPtrType ? handle.$$.smartPtrType.name : handle.$$.ptrType.name) + " to parameter type " + this.name);
                    }
                    break;
                case 1:
                    ptr = handle.$$.smartPtr;
                    break;
                case 2:
                    if (handle.$$.smartPtrType === this) {
                        ptr = handle.$$.smartPtr;
                    }
                    else {
                        var clonedHandle = handle["clone"]();
                        ptr = this.rawShare(ptr, Emval.toHandle(function () { clonedHandle["delete"](); }));
                        if (destructors !== null) {
                            destructors.push(this.rawDestructor, ptr);
                        }
                    }
                    break;
                default: throwBindingError("Unsupporting sharing policy");
            }
        } return ptr; }
        function nonConstNoSmartPtrRawPointerToWireType(destructors, handle) { if (handle === null) {
            if (this.isReference) {
                throwBindingError("null is not a valid " + this.name);
            }
            return 0;
        } if (!handle.$$) {
            throwBindingError('Cannot pass "' + _embind_repr(handle) + '" as a ' + this.name);
        } if (!handle.$$.ptr) {
            throwBindingError("Cannot pass deleted object as a pointer of type " + this.name);
        } if (handle.$$.ptrType.isConst) {
            throwBindingError("Cannot convert argument of type " + handle.$$.ptrType.name + " to parameter type " + this.name);
        } var handleClass = handle.$$.ptrType.registeredClass; var ptr = upcastPointer(handle.$$.ptr, handleClass, this.registeredClass); return ptr; }
        function simpleReadValueFromPointer(pointer) { return this["fromWireType"](HEAPU32[pointer >>> 2]); }
        function RegisteredPointer_getPointee(ptr) { if (this.rawGetPointee) {
            ptr = this.rawGetPointee(ptr);
        } return ptr; }
        function RegisteredPointer_destructor(ptr) { if (this.rawDestructor) {
            this.rawDestructor(ptr);
        } }
        function RegisteredPointer_deleteObject(handle) { if (handle !== null) {
            handle["delete"]();
        } }
        function init_RegisteredPointer() { RegisteredPointer.prototype.getPointee = RegisteredPointer_getPointee; RegisteredPointer.prototype.destructor = RegisteredPointer_destructor; RegisteredPointer.prototype["argPackAdvance"] = 8; RegisteredPointer.prototype["readValueFromPointer"] = simpleReadValueFromPointer; RegisteredPointer.prototype["deleteObject"] = RegisteredPointer_deleteObject; RegisteredPointer.prototype["fromWireType"] = RegisteredPointer_fromWireType; }
        function RegisteredPointer(name, registeredClass, isReference, isConst, isSmartPointer, pointeeType, sharingPolicy, rawGetPointee, rawConstructor, rawShare, rawDestructor) { this.name = name; this.registeredClass = registeredClass; this.isReference = isReference; this.isConst = isConst; this.isSmartPointer = isSmartPointer; this.pointeeType = pointeeType; this.sharingPolicy = sharingPolicy; this.rawGetPointee = rawGetPointee; this.rawConstructor = rawConstructor; this.rawShare = rawShare; this.rawDestructor = rawDestructor; if (!isSmartPointer && registeredClass.baseClass === undefined) {
            if (isConst) {
                this["toWireType"] = constNoSmartPtrRawPointerToWireType;
                this.destructorFunction = null;
            }
            else {
                this["toWireType"] = nonConstNoSmartPtrRawPointerToWireType;
                this.destructorFunction = null;
            }
        }
        else {
            this["toWireType"] = genericPointerToWireType;
        } }
        function replacePublicSymbol(name, value, numArguments) { if (!Module.hasOwnProperty(name)) {
            throwInternalError("Replacing nonexistant public symbol");
        } if (undefined !== Module[name].overloadTable && undefined !== numArguments) {
            Module[name].overloadTable[numArguments] = value;
        }
        else {
            Module[name] = value;
            Module[name].argCount = numArguments;
        } }
        function dynCallLegacy(sig, ptr, args) { var f = Module["dynCall_" + sig]; return args && args.length ? f.apply(null, [ptr].concat(args)) : f.call(null, ptr); }
        function dynCall(sig, ptr, args) { if (sig.includes("j")) {
            return dynCallLegacy(sig, ptr, args);
        } return getWasmTableEntry(ptr).apply(null, args); }
        function getDynCaller(sig, ptr) { var argCache = []; return function () { argCache.length = 0; Object.assign(argCache, arguments); return dynCall(sig, ptr, argCache); }; }
        function embind__requireFunction(signature, rawFunction) { signature = readLatin1String(signature); function makeDynCaller() { if (signature.includes("j")) {
            return getDynCaller(signature, rawFunction);
        } return getWasmTableEntry(rawFunction); } var fp = makeDynCaller(); if (typeof fp != "function") {
            throwBindingError("unknown function pointer with signature " + signature + ": " + rawFunction);
        } return fp; }
        var UnboundTypeError = undefined;
        function throwUnboundTypeError(message, types) { var unboundTypes = []; var seen = {}; function visit(type) { if (seen[type]) {
            return;
        } if (registeredTypes[type]) {
            return;
        } if (typeDependencies[type]) {
            typeDependencies[type].forEach(visit);
            return;
        } unboundTypes.push(type); seen[type] = true; } types.forEach(visit); throw new UnboundTypeError(message + ": " + unboundTypes.map(getTypeName).join([", "])); }
        function __embind_register_class(rawType, rawPointerType, rawConstPointerType, baseClassRawType, getActualTypeSignature, getActualType, upcastSignature, upcast, downcastSignature, downcast, name, destructorSignature, rawDestructor) { name = readLatin1String(name); getActualType = embind__requireFunction(getActualTypeSignature, getActualType); if (upcast) {
            upcast = embind__requireFunction(upcastSignature, upcast);
        } if (downcast) {
            downcast = embind__requireFunction(downcastSignature, downcast);
        } rawDestructor = embind__requireFunction(destructorSignature, rawDestructor); var legalFunctionName = makeLegalFunctionName(name); exposePublicSymbol(legalFunctionName, function () { throwUnboundTypeError("Cannot construct " + name + " due to unbound types", [baseClassRawType]); }); whenDependentTypesAreResolved([rawType, rawPointerType, rawConstPointerType], baseClassRawType ? [baseClassRawType] : [], function (base) { base = base[0]; var baseClass; var basePrototype; if (baseClassRawType) {
            baseClass = base.registeredClass;
            basePrototype = baseClass.instancePrototype;
        }
        else {
            basePrototype = ClassHandle.prototype;
        } var constructor = createNamedFunction(legalFunctionName, function () { if (Object.getPrototypeOf(this) !== instancePrototype) {
            throw new BindingError("Use 'new' to construct " + name);
        } if (undefined === registeredClass.constructor_body) {
            throw new BindingError(name + " has no accessible constructor");
        } var body = registeredClass.constructor_body[arguments.length]; if (undefined === body) {
            throw new BindingError("Tried to invoke ctor of " + name + " with invalid number of parameters (" + arguments.length + ") - expected (" + Object.keys(registeredClass.constructor_body).toString() + ") parameters instead!");
        } return body.apply(this, arguments); }); var instancePrototype = Object.create(basePrototype, { constructor: { value: constructor } }); constructor.prototype = instancePrototype; var registeredClass = new RegisteredClass(name, constructor, instancePrototype, rawDestructor, baseClass, getActualType, upcast, downcast); var referenceConverter = new RegisteredPointer(name, registeredClass, true, false, false); var pointerConverter = new RegisteredPointer(name + "*", registeredClass, false, false, false); var constPointerConverter = new RegisteredPointer(name + " const*", registeredClass, false, true, false); registeredPointers[rawType] = { pointerType: pointerConverter, constPointerType: constPointerConverter }; replacePublicSymbol(legalFunctionName, constructor); return [referenceConverter, pointerConverter, constPointerConverter]; }); }
        function new_(constructor, argumentList) { if (!(constructor instanceof Function)) {
            throw new TypeError("new_ called with constructor type " + typeof constructor + " which is not a function");
        } var dummy = createNamedFunction(constructor.name || "unknownFunctionName", function () { }); dummy.prototype = constructor.prototype; var obj = new dummy; var r = constructor.apply(obj, argumentList); return r instanceof Object ? r : obj; }
        function runDestructors(destructors) { while (destructors.length) {
            var ptr = destructors.pop();
            var del = destructors.pop();
            del(ptr);
        } }
        function craftInvokerFunction(humanName, argTypes, classType, cppInvokerFunc, cppTargetFunc) { var argCount = argTypes.length; if (argCount < 2) {
            throwBindingError("argTypes array size mismatch! Must at least get return value and 'this' types!");
        } var isClassMethodFunc = argTypes[1] !== null && classType !== null; var needsDestructorStack = false; for (var i = 1; i < argTypes.length; ++i) {
            if (argTypes[i] !== null && argTypes[i].destructorFunction === undefined) {
                needsDestructorStack = true;
                break;
            }
        } var returns = argTypes[0].name !== "void"; var argsList = ""; var argsListWired = ""; for (var i = 0; i < argCount - 2; ++i) {
            argsList += (i !== 0 ? ", " : "") + "arg" + i;
            argsListWired += (i !== 0 ? ", " : "") + "arg" + i + "Wired";
        } var invokerFnBody = "return function " + makeLegalFunctionName(humanName) + "(" + argsList + ") {\n" + "if (arguments.length !== " + (argCount - 2) + ") {\n" + "throwBindingError('function " + humanName + " called with ' + arguments.length + ' arguments, expected " + (argCount - 2) + " args!');\n" + "}\n"; if (needsDestructorStack) {
            invokerFnBody += "var destructors = [];\n";
        } var dtorStack = needsDestructorStack ? "destructors" : "null"; var args1 = ["throwBindingError", "invoker", "fn", "runDestructors", "retType", "classParam"]; var args2 = [throwBindingError, cppInvokerFunc, cppTargetFunc, runDestructors, argTypes[0], argTypes[1]]; if (isClassMethodFunc) {
            invokerFnBody += "var thisWired = classParam.toWireType(" + dtorStack + ", this);\n";
        } for (var i = 0; i < argCount - 2; ++i) {
            invokerFnBody += "var arg" + i + "Wired = argType" + i + ".toWireType(" + dtorStack + ", arg" + i + "); // " + argTypes[i + 2].name + "\n";
            args1.push("argType" + i);
            args2.push(argTypes[i + 2]);
        } if (isClassMethodFunc) {
            argsListWired = "thisWired" + (argsListWired.length > 0 ? ", " : "") + argsListWired;
        } invokerFnBody += (returns ? "var rv = " : "") + "invoker(fn" + (argsListWired.length > 0 ? ", " : "") + argsListWired + ");\n"; if (needsDestructorStack) {
            invokerFnBody += "runDestructors(destructors);\n";
        }
        else {
            for (var i = isClassMethodFunc ? 1 : 2; i < argTypes.length; ++i) {
                var paramName = i === 1 ? "thisWired" : "arg" + (i - 2) + "Wired";
                if (argTypes[i].destructorFunction !== null) {
                    invokerFnBody += paramName + "_dtor(" + paramName + "); // " + argTypes[i].name + "\n";
                    args1.push(paramName + "_dtor");
                    args2.push(argTypes[i].destructorFunction);
                }
            }
        } if (returns) {
            invokerFnBody += "var ret = retType.fromWireType(rv);\n" + "return ret;\n";
        }
        else { } invokerFnBody += "}\n"; args1.push(invokerFnBody); var invokerFunction = new_(Function, args1).apply(null, args2); return invokerFunction; }
        function heap32VectorToArray(count, firstElement) { var array = []; for (var i = 0; i < count; i++) {
            array.push(HEAP32[(firstElement >> 2) + i >>> 0]);
        } return array; }
        function __embind_register_class_class_function(rawClassType, methodName, argCount, rawArgTypesAddr, invokerSignature, rawInvoker, fn) { var rawArgTypes = heap32VectorToArray(argCount, rawArgTypesAddr); methodName = readLatin1String(methodName); rawInvoker = embind__requireFunction(invokerSignature, rawInvoker); whenDependentTypesAreResolved([], [rawClassType], function (classType) { classType = classType[0]; var humanName = classType.name + "." + methodName; function unboundTypesHandler() { throwUnboundTypeError("Cannot call " + humanName + " due to unbound types", rawArgTypes); } if (methodName.startsWith("@@")) {
            methodName = Symbol[methodName.substring(2)];
        } var proto = classType.registeredClass.constructor; if (undefined === proto[methodName]) {
            unboundTypesHandler.argCount = argCount - 1;
            proto[methodName] = unboundTypesHandler;
        }
        else {
            ensureOverloadTable(proto, methodName, humanName);
            proto[methodName].overloadTable[argCount - 1] = unboundTypesHandler;
        } whenDependentTypesAreResolved([], rawArgTypes, function (argTypes) { var invokerArgsArray = [argTypes[0], null].concat(argTypes.slice(1)); var func = craftInvokerFunction(humanName, invokerArgsArray, null, rawInvoker, fn); if (undefined === proto[methodName].overloadTable) {
            func.argCount = argCount - 1;
            proto[methodName] = func;
        }
        else {
            proto[methodName].overloadTable[argCount - 1] = func;
        } return []; }); return []; }); }
        function __embind_register_class_constructor(rawClassType, argCount, rawArgTypesAddr, invokerSignature, invoker, rawConstructor) { assert(argCount > 0); var rawArgTypes = heap32VectorToArray(argCount, rawArgTypesAddr); invoker = embind__requireFunction(invokerSignature, invoker); whenDependentTypesAreResolved([], [rawClassType], function (classType) { classType = classType[0]; var humanName = "constructor " + classType.name; if (undefined === classType.registeredClass.constructor_body) {
            classType.registeredClass.constructor_body = [];
        } if (undefined !== classType.registeredClass.constructor_body[argCount - 1]) {
            throw new BindingError("Cannot register multiple constructors with identical number of parameters (" + (argCount - 1) + ") for class '" + classType.name + "'! Overload resolution is currently only performed using the parameter count, not actual type info!");
        } classType.registeredClass.constructor_body[argCount - 1] = function () { throwUnboundTypeError("Cannot construct " + classType.name + " due to unbound types", rawArgTypes); }; whenDependentTypesAreResolved([], rawArgTypes, function (argTypes) { argTypes.splice(1, 0, null); classType.registeredClass.constructor_body[argCount - 1] = craftInvokerFunction(humanName, argTypes, null, invoker, rawConstructor); return []; }); return []; }); }
        function __embind_register_class_function(rawClassType, methodName, argCount, rawArgTypesAddr, invokerSignature, rawInvoker, context, isPureVirtual) { var rawArgTypes = heap32VectorToArray(argCount, rawArgTypesAddr); methodName = readLatin1String(methodName); rawInvoker = embind__requireFunction(invokerSignature, rawInvoker); whenDependentTypesAreResolved([], [rawClassType], function (classType) { classType = classType[0]; var humanName = classType.name + "." + methodName; if (methodName.startsWith("@@")) {
            methodName = Symbol[methodName.substring(2)];
        } if (isPureVirtual) {
            classType.registeredClass.pureVirtualFunctions.push(methodName);
        } function unboundTypesHandler() { throwUnboundTypeError("Cannot call " + humanName + " due to unbound types", rawArgTypes); } var proto = classType.registeredClass.instancePrototype; var method = proto[methodName]; if (undefined === method || undefined === method.overloadTable && method.className !== classType.name && method.argCount === argCount - 2) {
            unboundTypesHandler.argCount = argCount - 2;
            unboundTypesHandler.className = classType.name;
            proto[methodName] = unboundTypesHandler;
        }
        else {
            ensureOverloadTable(proto, methodName, humanName);
            proto[methodName].overloadTable[argCount - 2] = unboundTypesHandler;
        } whenDependentTypesAreResolved([], rawArgTypes, function (argTypes) { var memberFunction = craftInvokerFunction(humanName, argTypes, classType, rawInvoker, context); if (undefined === proto[methodName].overloadTable) {
            memberFunction.argCount = argCount - 2;
            proto[methodName] = memberFunction;
        }
        else {
            proto[methodName].overloadTable[argCount - 2] = memberFunction;
        } return []; }); return []; }); }
        function validateThis(this_, classType, humanName) { if (!(this_ instanceof Object)) {
            throwBindingError(humanName + ' with invalid "this": ' + this_);
        } if (!(this_ instanceof classType.registeredClass.constructor)) {
            throwBindingError(humanName + ' incompatible with "this" of type ' + this_.constructor.name);
        } if (!this_.$$.ptr) {
            throwBindingError("cannot call emscripten binding method " + humanName + " on deleted object");
        } return upcastPointer(this_.$$.ptr, this_.$$.ptrType.registeredClass, classType.registeredClass); }
        function __embind_register_class_property(classType, fieldName, getterReturnType, getterSignature, getter, getterContext, setterArgumentType, setterSignature, setter, setterContext) { fieldName = readLatin1String(fieldName); getter = embind__requireFunction(getterSignature, getter); whenDependentTypesAreResolved([], [classType], function (classType) { classType = classType[0]; var humanName = classType.name + "." + fieldName; var desc = { get: function () { throwUnboundTypeError("Cannot access " + humanName + " due to unbound types", [getterReturnType, setterArgumentType]); }, enumerable: true, configurable: true }; if (setter) {
            desc.set = function () { throwUnboundTypeError("Cannot access " + humanName + " due to unbound types", [getterReturnType, setterArgumentType]); };
        }
        else {
            desc.set = function (v) { throwBindingError(humanName + " is a read-only property"); };
        } Object.defineProperty(classType.registeredClass.instancePrototype, fieldName, desc); whenDependentTypesAreResolved([], setter ? [getterReturnType, setterArgumentType] : [getterReturnType], function (types) { var getterReturnType = types[0]; var desc = { get: function () { var ptr = validateThis(this, classType, humanName + " getter"); return getterReturnType["fromWireType"](getter(getterContext, ptr)); }, enumerable: true }; if (setter) {
            setter = embind__requireFunction(setterSignature, setter);
            var setterArgumentType = types[1];
            desc.set = function (v) { var ptr = validateThis(this, classType, humanName + " setter"); var destructors = []; setter(setterContext, ptr, setterArgumentType["toWireType"](destructors, v)); runDestructors(destructors); };
        } Object.defineProperty(classType.registeredClass.instancePrototype, fieldName, desc); return []; }); return []; }); }
        function __emval_decref(handle) { if (handle > 4 && 0 === --emval_handle_array[handle].refcount) {
            emval_handle_array[handle] = undefined;
            emval_free_list.push(handle);
        } }
        function __embind_register_emval(rawType, name) { name = readLatin1String(name); registerType(rawType, { name: name, "fromWireType": function (handle) { var rv = Emval.toValue(handle); __emval_decref(handle); return rv; }, "toWireType": function (destructors, value) { return Emval.toHandle(value); }, "argPackAdvance": 8, "readValueFromPointer": simpleReadValueFromPointer, destructorFunction: null }); }
        function enumReadValueFromPointer(name, shift, signed) { switch (shift) {
            case 0: return function (pointer) { var heap = signed ? HEAP8 : HEAPU8; return this["fromWireType"](heap[pointer >>> 0]); };
            case 1: return function (pointer) { var heap = signed ? HEAP16 : HEAPU16; return this["fromWireType"](heap[pointer >>> 1]); };
            case 2: return function (pointer) { var heap = signed ? HEAP32 : HEAPU32; return this["fromWireType"](heap[pointer >>> 2]); };
            default: throw new TypeError("Unknown integer type: " + name);
        } }
        function __embind_register_enum(rawType, name, size, isSigned) { var shift = getShiftFromSize(size); name = readLatin1String(name); function ctor() { } ctor.values = {}; registerType(rawType, { name: name, constructor: ctor, "fromWireType": function (c) { return this.constructor.values[c]; }, "toWireType": function (destructors, c) { return c.value; }, "argPackAdvance": 8, "readValueFromPointer": enumReadValueFromPointer(name, shift, isSigned), destructorFunction: null }); exposePublicSymbol(name, ctor); }
        function __embind_register_enum_value(rawEnumType, name, enumValue) { var enumType = requireRegisteredType(rawEnumType, "enum"); name = readLatin1String(name); var Enum = enumType.constructor; var Value = Object.create(enumType.constructor.prototype, { value: { value: enumValue }, constructor: { value: createNamedFunction(enumType.name + "_" + name, function () { }) } }); Enum.values[enumValue] = Value; Enum[name] = Value; }
        function _embind_repr(v) { if (v === null) {
            return "null";
        } var t = typeof v; if (t === "object" || t === "array" || t === "function") {
            return v.toString();
        }
        else {
            return "" + v;
        } }
        function floatReadValueFromPointer(name, shift) { switch (shift) {
            case 2: return function (pointer) { return this["fromWireType"](HEAPF32[pointer >>> 2]); };
            case 3: return function (pointer) { return this["fromWireType"](HEAPF64[pointer >>> 3]); };
            default: throw new TypeError("Unknown float type: " + name);
        } }
        function __embind_register_float(rawType, name, size) { var shift = getShiftFromSize(size); name = readLatin1String(name); registerType(rawType, { name: name, "fromWireType": function (value) { return value; }, "toWireType": function (destructors, value) { return value; }, "argPackAdvance": 8, "readValueFromPointer": floatReadValueFromPointer(name, shift), destructorFunction: null }); }
        function integerReadValueFromPointer(name, shift, signed) { switch (shift) {
            case 0: return signed ? function readS8FromPointer(pointer) { return HEAP8[pointer >>> 0]; } : function readU8FromPointer(pointer) { return HEAPU8[pointer >>> 0]; };
            case 1: return signed ? function readS16FromPointer(pointer) { return HEAP16[pointer >>> 1]; } : function readU16FromPointer(pointer) { return HEAPU16[pointer >>> 1]; };
            case 2: return signed ? function readS32FromPointer(pointer) { return HEAP32[pointer >>> 2]; } : function readU32FromPointer(pointer) { return HEAPU32[pointer >>> 2]; };
            default: throw new TypeError("Unknown integer type: " + name);
        } }
        function __embind_register_integer(primitiveType, name, size, minRange, maxRange) { name = readLatin1String(name); if (maxRange === -1) {
            maxRange = 4294967295;
        } var shift = getShiftFromSize(size); var fromWireType = function (value) { return value; }; if (minRange === 0) {
            var bitshift = 32 - 8 * size;
            fromWireType = function (value) { return value << bitshift >>> bitshift; };
        } var isUnsignedType = name.includes("unsigned"); var checkAssertions = function (value, toTypeName) { }; var toWireType; if (isUnsignedType) {
            toWireType = function (destructors, value) { checkAssertions(value, this.name); return value >>> 0; };
        }
        else {
            toWireType = function (destructors, value) { checkAssertions(value, this.name); return value; };
        } registerType(primitiveType, { name: name, "fromWireType": fromWireType, "toWireType": toWireType, "argPackAdvance": 8, "readValueFromPointer": integerReadValueFromPointer(name, shift, minRange !== 0), destructorFunction: null }); }
        function __embind_register_memory_view(rawType, dataTypeIndex, name) { var typeMapping = [Int8Array, Uint8Array, Int16Array, Uint16Array, Int32Array, Uint32Array, Float32Array, Float64Array]; var TA = typeMapping[dataTypeIndex]; function decodeMemoryView(handle) { handle = handle >> 2; var heap = HEAPU32; var size = heap[handle >>> 0]; var data = heap[handle + 1 >>> 0]; return new TA(buffer, data, size); } name = readLatin1String(name); registerType(rawType, { name: name, "fromWireType": decodeMemoryView, "argPackAdvance": 8, "readValueFromPointer": decodeMemoryView }, { ignoreDuplicateRegistrations: true }); }
        function __embind_register_std_string(rawType, name) { name = readLatin1String(name); var stdStringIsUTF8 = name === "std::string"; registerType(rawType, { name: name, "fromWireType": function (value) { var length = HEAPU32[value >>> 2]; var str; if (stdStringIsUTF8) {
                var decodeStartPtr = value + 4;
                for (var i = 0; i <= length; ++i) {
                    var currentBytePtr = value + 4 + i;
                    if (i == length || HEAPU8[currentBytePtr >>> 0] == 0) {
                        var maxRead = currentBytePtr - decodeStartPtr;
                        var stringSegment = UTF8ToString(decodeStartPtr, maxRead);
                        if (str === undefined) {
                            str = stringSegment;
                        }
                        else {
                            str += String.fromCharCode(0);
                            str += stringSegment;
                        }
                        decodeStartPtr = currentBytePtr + 1;
                    }
                }
            }
            else {
                var a = new Array(length);
                for (var i = 0; i < length; ++i) {
                    a[i] = String.fromCharCode(HEAPU8[value + 4 + i >>> 0]);
                }
                str = a.join("");
            } _free(value); return str; }, "toWireType": function (destructors, value) { if (value instanceof ArrayBuffer) {
                value = new Uint8Array(value);
            } var getLength; var valueIsOfTypeString = typeof value == "string"; if (!(valueIsOfTypeString || value instanceof Uint8Array || value instanceof Uint8ClampedArray || value instanceof Int8Array)) {
                throwBindingError("Cannot pass non-string to std::string");
            } if (stdStringIsUTF8 && valueIsOfTypeString) {
                getLength = function () { return lengthBytesUTF8(value); };
            }
            else {
                getLength = function () { return value.length; };
            } var length = getLength(); var ptr = _malloc(4 + length + 1); ptr >>>= 0; HEAPU32[ptr >>> 2] = length; if (stdStringIsUTF8 && valueIsOfTypeString) {
                stringToUTF8(value, ptr + 4, length + 1);
            }
            else {
                if (valueIsOfTypeString) {
                    for (var i = 0; i < length; ++i) {
                        var charCode = value.charCodeAt(i);
                        if (charCode > 255) {
                            _free(ptr);
                            throwBindingError("String has UTF-16 code units that do not fit in 8 bits");
                        }
                        HEAPU8[ptr + 4 + i >>> 0] = charCode;
                    }
                }
                else {
                    for (var i = 0; i < length; ++i) {
                        HEAPU8[ptr + 4 + i >>> 0] = value[i];
                    }
                }
            } if (destructors !== null) {
                destructors.push(_free, ptr);
            } return ptr; }, "argPackAdvance": 8, "readValueFromPointer": simpleReadValueFromPointer, destructorFunction: function (ptr) { _free(ptr); } }); }
        function __embind_register_std_wstring(rawType, charSize, name) { name = readLatin1String(name); var decodeString, encodeString, getHeap, lengthBytesUTF, shift; if (charSize === 2) {
            decodeString = UTF16ToString;
            encodeString = stringToUTF16;
            lengthBytesUTF = lengthBytesUTF16;
            getHeap = function () { return HEAPU16; };
            shift = 1;
        }
        else if (charSize === 4) {
            decodeString = UTF32ToString;
            encodeString = stringToUTF32;
            lengthBytesUTF = lengthBytesUTF32;
            getHeap = function () { return HEAPU32; };
            shift = 2;
        } registerType(rawType, { name: name, "fromWireType": function (value) { var length = HEAPU32[value >>> 2]; var HEAP = getHeap(); var str; var decodeStartPtr = value + 4; for (var i = 0; i <= length; ++i) {
                var currentBytePtr = value + 4 + i * charSize;
                if (i == length || HEAP[currentBytePtr >>> shift] == 0) {
                    var maxReadBytes = currentBytePtr - decodeStartPtr;
                    var stringSegment = decodeString(decodeStartPtr, maxReadBytes);
                    if (str === undefined) {
                        str = stringSegment;
                    }
                    else {
                        str += String.fromCharCode(0);
                        str += stringSegment;
                    }
                    decodeStartPtr = currentBytePtr + charSize;
                }
            } _free(value); return str; }, "toWireType": function (destructors, value) { if (!(typeof value == "string")) {
                throwBindingError("Cannot pass non-string to C++ string type " + name);
            } var length = lengthBytesUTF(value); var ptr = _malloc(4 + length + charSize); ptr >>>= 0; HEAPU32[ptr >>> 2] = length >> shift; encodeString(value, ptr + 4, length + charSize); if (destructors !== null) {
                destructors.push(_free, ptr);
            } return ptr; }, "argPackAdvance": 8, "readValueFromPointer": simpleReadValueFromPointer, destructorFunction: function (ptr) { _free(ptr); } }); }
        function __embind_register_void(rawType, name) { name = readLatin1String(name); registerType(rawType, { isVoid: true, name: name, "argPackAdvance": 0, "fromWireType": function () { return undefined; }, "toWireType": function (destructors, o) { return undefined; } }); }
        function __emscripten_date_now() { return Date.now(); }
        var nowIsMonotonic = true;
        function __emscripten_get_now_is_monotonic() { return nowIsMonotonic; }
        function __emval_as(handle, returnType, destructorsRef) { handle = Emval.toValue(handle); returnType = requireRegisteredType(returnType, "emval::as"); var destructors = []; var rd = Emval.toHandle(destructors); HEAP32[destructorsRef >>> 2] = rd; return returnType["toWireType"](destructors, handle); }
        function emval_allocateDestructors(destructorsRef) { var destructors = []; HEAP32[destructorsRef >>> 2] = Emval.toHandle(destructors); return destructors; }
        var emval_symbols = {};
        function getStringOrSymbol(address) { var symbol = emval_symbols[address]; if (symbol === undefined) {
            return readLatin1String(address);
        } return symbol; }
        var emval_methodCallers = [];
        function __emval_call_method(caller, handle, methodName, destructorsRef, args) { caller = emval_methodCallers[caller]; handle = Emval.toValue(handle); methodName = getStringOrSymbol(methodName); return caller(handle, methodName, emval_allocateDestructors(destructorsRef), args); }
        function __emval_call_void_method(caller, handle, methodName, args) { caller = emval_methodCallers[caller]; handle = Emval.toValue(handle); methodName = getStringOrSymbol(methodName); caller(handle, methodName, null, args); }
        function emval_get_global() { if (typeof globalThis == "object") {
            return globalThis;
        } return function () { return Function; }()("return this")(); }
        function __emval_get_global(name) { if (name === 0) {
            return Emval.toHandle(emval_get_global());
        }
        else {
            name = getStringOrSymbol(name);
            return Emval.toHandle(emval_get_global()[name]);
        } }
        function emval_addMethodCaller(caller) { var id = emval_methodCallers.length; emval_methodCallers.push(caller); return id; }
        function emval_lookupTypes(argCount, argTypes) { var a = new Array(argCount); for (var i = 0; i < argCount; ++i) {
            a[i] = requireRegisteredType(HEAPU32[argTypes + i * POINTER_SIZE >>> 2], "parameter " + i);
        } return a; }
        var emval_registeredMethods = [];
        function __emval_get_method_caller(argCount, argTypes) { var types = emval_lookupTypes(argCount, argTypes); var retType = types[0]; var signatureName = retType.name + "_$" + types.slice(1).map(function (t) { return t.name; }).join("_") + "$"; var returnId = emval_registeredMethods[signatureName]; if (returnId !== undefined) {
            return returnId;
        } var params = ["retType"]; var args = [retType]; var argsList = ""; for (var i = 0; i < argCount - 1; ++i) {
            argsList += (i !== 0 ? ", " : "") + "arg" + i;
            params.push("argType" + i);
            args.push(types[1 + i]);
        } var functionName = makeLegalFunctionName("methodCaller_" + signatureName); var functionBody = "return function " + functionName + "(handle, name, destructors, args) {\n"; var offset = 0; for (var i = 0; i < argCount - 1; ++i) {
            functionBody += "    var arg" + i + " = argType" + i + ".readValueFromPointer(args" + (offset ? "+" + offset : "") + ");\n";
            offset += types[i + 1]["argPackAdvance"];
        } functionBody += "    var rv = handle[name](" + argsList + ");\n"; for (var i = 0; i < argCount - 1; ++i) {
            if (types[i + 1]["deleteObject"]) {
                functionBody += "    argType" + i + ".deleteObject(arg" + i + ");\n";
            }
        } if (!retType.isVoid) {
            functionBody += "    return retType.toWireType(destructors, rv);\n";
        } functionBody += "};\n"; params.push(functionBody); var invokerFunction = new_(Function, params).apply(null, args); returnId = emval_addMethodCaller(invokerFunction); emval_registeredMethods[signatureName] = returnId; return returnId; }
        function __emval_get_property(handle, key) { handle = Emval.toValue(handle); key = Emval.toValue(key); return Emval.toHandle(handle[key]); }
        function __emval_incref(handle) { if (handle > 4) {
            emval_handle_array[handle].refcount += 1;
        } }
        function __emval_new_cstring(v) { return Emval.toHandle(getStringOrSymbol(v)); }
        function __emval_new_object() { return Emval.toHandle({}); }
        function __emval_run_destructors(handle) { var destructors = Emval.toValue(handle); runDestructors(destructors); __emval_decref(handle); }
        function __emval_set_property(handle, key, value) { handle = Emval.toValue(handle); key = Emval.toValue(key); value = Emval.toValue(value); handle[key] = value; }
        function __emval_take_value(type, argv) { type = requireRegisteredType(type, "_emval_take_value"); var v = type["readValueFromPointer"](argv); return Emval.toHandle(v); }
        function __emval_typeof(handle) { handle = Emval.toValue(handle); return Emval.toHandle(typeof handle); }
        function __localtime_js(time, tmPtr) { var date = new Date(HEAP32[time >>> 2] * 1e3); HEAP32[tmPtr >>> 2] = date.getSeconds(); HEAP32[tmPtr + 4 >>> 2] = date.getMinutes(); HEAP32[tmPtr + 8 >>> 2] = date.getHours(); HEAP32[tmPtr + 12 >>> 2] = date.getDate(); HEAP32[tmPtr + 16 >>> 2] = date.getMonth(); HEAP32[tmPtr + 20 >>> 2] = date.getFullYear() - 1900; HEAP32[tmPtr + 24 >>> 2] = date.getDay(); var start = new Date(date.getFullYear(), 0, 1); var yday = (date.getTime() - start.getTime()) / (1e3 * 60 * 60 * 24) | 0; HEAP32[tmPtr + 28 >>> 2] = yday; HEAP32[tmPtr + 36 >>> 2] = -(date.getTimezoneOffset() * 60); var summerOffset = new Date(date.getFullYear(), 6, 1).getTimezoneOffset(); var winterOffset = start.getTimezoneOffset(); var dst = (summerOffset != winterOffset && date.getTimezoneOffset() == Math.min(winterOffset, summerOffset)) | 0; HEAP32[tmPtr + 32 >>> 2] = dst; }
        function __munmap_js(addr, len, prot, flags, fd, offset) { try {
            addr >>>= 0;
            var stream = FS.getStream(fd);
            if (stream) {
                if (prot & 2) {
                    SYSCALLS.doMsync(addr, stream, len, flags, offset);
                }
                FS.munmap(stream);
            }
        }
        catch (e) {
            if (typeof FS == "undefined" || !(e instanceof FS.ErrnoError))
                throw e;
            return -e.errno;
        } }
        function _tzset_impl(timezone, daylight, tzname) { var currentYear = (new Date).getFullYear(); var winter = new Date(currentYear, 0, 1); var summer = new Date(currentYear, 6, 1); var winterOffset = winter.getTimezoneOffset(); var summerOffset = summer.getTimezoneOffset(); var stdTimezoneOffset = Math.max(winterOffset, summerOffset); HEAP32[timezone >>> 2] = stdTimezoneOffset * 60; HEAP32[daylight >>> 2] = Number(winterOffset != summerOffset); function extractZone(date) { var match = date.toTimeString().match(/\(([A-Za-z ]+)\)$/); return match ? match[1] : "GMT"; } var winterName = extractZone(winter); var summerName = extractZone(summer); var winterNamePtr = allocateUTF8(winterName); var summerNamePtr = allocateUTF8(summerName); if (summerOffset < winterOffset) {
            HEAPU32[tzname >>> 2] = winterNamePtr;
            HEAPU32[tzname + 4 >>> 2] = summerNamePtr;
        }
        else {
            HEAPU32[tzname >>> 2] = summerNamePtr;
            HEAPU32[tzname + 4 >>> 2] = winterNamePtr;
        } }
        function __tzset_js(timezone, daylight, tzname) { if (__tzset_js.called)
            return; __tzset_js.called = true; _tzset_impl(timezone, daylight, tzname); }
        function _abort() { abort(""); }
        function getHeapMax() { return 4294901760; }
        function _emscripten_get_heap_max() { return getHeapMax(); }
        var _emscripten_get_now;
        if (ENVIRONMENT_IS_NODE) {
            _emscripten_get_now = function () { var t = process["hrtime"](); return t[0] * 1e3 + t[1] / 1e6; };
        }
        else
            _emscripten_get_now = function () { return performance.now(); };
        function _emscripten_set_main_loop_timing(mode, value) { Browser.mainLoop.timingMode = mode; Browser.mainLoop.timingValue = value; if (!Browser.mainLoop.func) {
            return 1;
        } if (!Browser.mainLoop.running) {
            Browser.mainLoop.running = true;
        } if (mode == 0) {
            Browser.mainLoop.scheduler = function Browser_mainLoop_scheduler_setTimeout() { var timeUntilNextTick = Math.max(0, Browser.mainLoop.tickStartTime + value - _emscripten_get_now()) | 0; setTimeout(Browser.mainLoop.runner, timeUntilNextTick); };
            Browser.mainLoop.method = "timeout";
        }
        else if (mode == 1) {
            Browser.mainLoop.scheduler = function Browser_mainLoop_scheduler_rAF() { Browser.requestAnimationFrame(Browser.mainLoop.runner); };
            Browser.mainLoop.method = "rAF";
        }
        else if (mode == 2) {
            if (typeof setImmediate == "undefined") {
                var setImmediates = [];
                var emscriptenMainLoopMessageId = "setimmediate";
                var Browser_setImmediate_messageHandler = function (event) { if (event.data === emscriptenMainLoopMessageId || event.data.target === emscriptenMainLoopMessageId) {
                    event.stopPropagation();
                    setImmediates.shift()();
                } };
                addEventListener("message", Browser_setImmediate_messageHandler, true);
                setImmediate = function Browser_emulated_setImmediate(func) { setImmediates.push(func); if (ENVIRONMENT_IS_WORKER) {
                    if (Module["setImmediates"] === undefined)
                        Module["setImmediates"] = [];
                    Module["setImmediates"].push(func);
                    postMessage({ target: emscriptenMainLoopMessageId });
                }
                else
                    postMessage(emscriptenMainLoopMessageId, "*"); };
            }
            Browser.mainLoop.scheduler = function Browser_mainLoop_scheduler_setImmediate() { setImmediate(Browser.mainLoop.runner); };
            Browser.mainLoop.method = "immediate";
        } return 0; }
        function _exit(status) { exit(status); }
        function maybeExit() { }
        function setMainLoop(browserIterationFunc, fps, simulateInfiniteLoop, arg, noSetTiming) { assert(!Browser.mainLoop.func, "emscripten_set_main_loop: there can only be one main loop function at once: call emscripten_cancel_main_loop to cancel the previous one before setting a new one with different parameters."); Browser.mainLoop.func = browserIterationFunc; Browser.mainLoop.arg = arg; var thisMainLoopId = Browser.mainLoop.currentlyRunningMainloop; function checkIsRunning() { if (thisMainLoopId < Browser.mainLoop.currentlyRunningMainloop) {
            maybeExit();
            return false;
        } return true; } Browser.mainLoop.running = false; Browser.mainLoop.runner = function Browser_mainLoop_runner() { if (ABORT)
            return; if (Browser.mainLoop.queue.length > 0) {
            var start = Date.now();
            var blocker = Browser.mainLoop.queue.shift();
            blocker.func(blocker.arg);
            if (Browser.mainLoop.remainingBlockers) {
                var remaining = Browser.mainLoop.remainingBlockers;
                var next = remaining % 1 == 0 ? remaining - 1 : Math.floor(remaining);
                if (blocker.counted) {
                    Browser.mainLoop.remainingBlockers = next;
                }
                else {
                    next = next + .5;
                    Browser.mainLoop.remainingBlockers = (8 * remaining + next) / 9;
                }
            }
            out('main loop blocker "' + blocker.name + '" took ' + (Date.now() - start) + " ms");
            Browser.mainLoop.updateStatus();
            if (!checkIsRunning())
                return;
            setTimeout(Browser.mainLoop.runner, 0);
            return;
        } if (!checkIsRunning())
            return; Browser.mainLoop.currentFrameNumber = Browser.mainLoop.currentFrameNumber + 1 | 0; if (Browser.mainLoop.timingMode == 1 && Browser.mainLoop.timingValue > 1 && Browser.mainLoop.currentFrameNumber % Browser.mainLoop.timingValue != 0) {
            Browser.mainLoop.scheduler();
            return;
        }
        else if (Browser.mainLoop.timingMode == 0) {
            Browser.mainLoop.tickStartTime = _emscripten_get_now();
        } Browser.mainLoop.runIter(browserIterationFunc); if (!checkIsRunning())
            return; if (typeof SDL == "object" && SDL.audio && SDL.audio.queueNewAudioData)
            SDL.audio.queueNewAudioData(); Browser.mainLoop.scheduler(); }; if (!noSetTiming) {
            if (fps && fps > 0)
                _emscripten_set_main_loop_timing(0, 1e3 / fps);
            else
                _emscripten_set_main_loop_timing(1, 1);
            Browser.mainLoop.scheduler();
        } if (simulateInfiniteLoop) {
            throw "unwind";
        } }
        function callUserCallback(func, synchronous) { if (ABORT) {
            return;
        } if (synchronous) {
            func();
            return;
        } try {
            func();
        }
        catch (e) {
            handleException(e);
        } }
        function safeSetTimeout(func, timeout) { return setTimeout(function () { callUserCallback(func); }, timeout); }
        var Browser = { mainLoop: { running: false, scheduler: null, method: "", currentlyRunningMainloop: 0, func: null, arg: 0, timingMode: 0, timingValue: 0, currentFrameNumber: 0, queue: [], pause: function () { Browser.mainLoop.scheduler = null; Browser.mainLoop.currentlyRunningMainloop++; }, resume: function () { Browser.mainLoop.currentlyRunningMainloop++; var timingMode = Browser.mainLoop.timingMode; var timingValue = Browser.mainLoop.timingValue; var func = Browser.mainLoop.func; Browser.mainLoop.func = null; setMainLoop(func, 0, false, Browser.mainLoop.arg, true); _emscripten_set_main_loop_timing(timingMode, timingValue); Browser.mainLoop.scheduler(); }, updateStatus: function () { if (Module["setStatus"]) {
                    var message = Module["statusMessage"] || "Please wait...";
                    var remaining = Browser.mainLoop.remainingBlockers;
                    var expected = Browser.mainLoop.expectedBlockers;
                    if (remaining) {
                        if (remaining < expected) {
                            Module["setStatus"](message + " (" + (expected - remaining) + "/" + expected + ")");
                        }
                        else {
                            Module["setStatus"](message);
                        }
                    }
                    else {
                        Module["setStatus"]("");
                    }
                } }, runIter: function (func) { if (ABORT)
                    return; if (Module["preMainLoop"]) {
                    var preRet = Module["preMainLoop"]();
                    if (preRet === false) {
                        return;
                    }
                } callUserCallback(func); if (Module["postMainLoop"])
                    Module["postMainLoop"](); } }, isFullscreen: false, pointerLock: false, moduleContextCreatedCallbacks: [], workers: [], init: function () { if (!Module["preloadPlugins"])
                Module["preloadPlugins"] = []; if (Browser.initted)
                return; Browser.initted = true; try {
                new Blob;
                Browser.hasBlobConstructor = true;
            }
            catch (e) {
                Browser.hasBlobConstructor = false;
                out("warning: no blob constructor, cannot create blobs with mimetypes");
            } Browser.BlobBuilder = typeof MozBlobBuilder != "undefined" ? MozBlobBuilder : typeof WebKitBlobBuilder != "undefined" ? WebKitBlobBuilder : !Browser.hasBlobConstructor ? out("warning: no BlobBuilder") : null; Browser.URLObject = typeof window != "undefined" ? window.URL ? window.URL : window.webkitURL : undefined; if (!Module.noImageDecoding && typeof Browser.URLObject == "undefined") {
                out("warning: Browser does not support creating object URLs. Built-in browser image decoding will not be available.");
                Module.noImageDecoding = true;
            } var imagePlugin = {}; imagePlugin["canHandle"] = function imagePlugin_canHandle(name) { return !Module.noImageDecoding && /\.(jpg|jpeg|png|bmp)$/i.test(name); }; imagePlugin["handle"] = function imagePlugin_handle(byteArray, name, onload, onerror) { var b = null; if (Browser.hasBlobConstructor) {
                try {
                    b = new Blob([byteArray], { type: Browser.getMimetype(name) });
                    if (b.size !== byteArray.length) {
                        b = new Blob([new Uint8Array(byteArray).buffer], { type: Browser.getMimetype(name) });
                    }
                }
                catch (e) {
                    warnOnce("Blob constructor present but fails: " + e + "; falling back to blob builder");
                }
            } if (!b) {
                var bb = new Browser.BlobBuilder;
                bb.append(new Uint8Array(byteArray).buffer);
                b = bb.getBlob();
            } var url = Browser.URLObject.createObjectURL(b); var img = new Image; img.onload = function () { assert(img.complete, "Image " + name + " could not be decoded"); var canvas = document.createElement("canvas"); canvas.width = img.width; canvas.height = img.height; var ctx = canvas.getContext("2d"); ctx.drawImage(img, 0, 0); preloadedImages[name] = canvas; Browser.URLObject.revokeObjectURL(url); if (onload)
                onload(byteArray); }; img.onerror = function (event) { out("Image " + url + " could not be decoded"); if (onerror)
                onerror(); }; img.src = url; }; Module["preloadPlugins"].push(imagePlugin); var audioPlugin = {}; audioPlugin["canHandle"] = function audioPlugin_canHandle(name) { return !Module.noAudioDecoding && name.substr(-4) in { ".ogg": 1, ".wav": 1, ".mp3": 1 }; }; audioPlugin["handle"] = function audioPlugin_handle(byteArray, name, onload, onerror) { var done = false; function finish(audio) { if (done)
                return; done = true; preloadedAudios[name] = audio; if (onload)
                onload(byteArray); } function fail() { if (done)
                return; done = true; preloadedAudios[name] = new Audio; if (onerror)
                onerror(); } if (Browser.hasBlobConstructor) {
                try {
                    var b = new Blob([byteArray], { type: Browser.getMimetype(name) });
                }
                catch (e) {
                    return fail();
                }
                var url = Browser.URLObject.createObjectURL(b);
                var audio = new Audio;
                audio.addEventListener("canplaythrough", function () { finish(audio); }, false);
                audio.onerror = function audio_onerror(event) { if (done)
                    return; out("warning: browser could not fully decode audio " + name + ", trying slower base64 approach"); function encode64(data) { var BASE = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/"; var PAD = "="; var ret = ""; var leftchar = 0; var leftbits = 0; for (var i = 0; i < data.length; i++) {
                    leftchar = leftchar << 8 | data[i];
                    leftbits += 8;
                    while (leftbits >= 6) {
                        var curr = leftchar >> leftbits - 6 & 63;
                        leftbits -= 6;
                        ret += BASE[curr];
                    }
                } if (leftbits == 2) {
                    ret += BASE[(leftchar & 3) << 4];
                    ret += PAD + PAD;
                }
                else if (leftbits == 4) {
                    ret += BASE[(leftchar & 15) << 2];
                    ret += PAD;
                } return ret; } audio.src = "data:audio/x-" + name.substr(-3) + ";base64," + encode64(byteArray); finish(audio); };
                audio.src = url;
                safeSetTimeout(function () { finish(audio); }, 1e4);
            }
            else {
                return fail();
            } }; Module["preloadPlugins"].push(audioPlugin); function pointerLockChange() { Browser.pointerLock = document["pointerLockElement"] === Module["canvas"] || document["mozPointerLockElement"] === Module["canvas"] || document["webkitPointerLockElement"] === Module["canvas"] || document["msPointerLockElement"] === Module["canvas"]; } var canvas = Module["canvas"]; if (canvas) {
                canvas.requestPointerLock = canvas["requestPointerLock"] || canvas["mozRequestPointerLock"] || canvas["webkitRequestPointerLock"] || canvas["msRequestPointerLock"] || function () { };
                canvas.exitPointerLock = document["exitPointerLock"] || document["mozExitPointerLock"] || document["webkitExitPointerLock"] || document["msExitPointerLock"] || function () { };
                canvas.exitPointerLock = canvas.exitPointerLock.bind(document);
                document.addEventListener("pointerlockchange", pointerLockChange, false);
                document.addEventListener("mozpointerlockchange", pointerLockChange, false);
                document.addEventListener("webkitpointerlockchange", pointerLockChange, false);
                document.addEventListener("mspointerlockchange", pointerLockChange, false);
                if (Module["elementPointerLock"]) {
                    canvas.addEventListener("click", function (ev) { if (!Browser.pointerLock && Module["canvas"].requestPointerLock) {
                        Module["canvas"].requestPointerLock();
                        ev.preventDefault();
                    } }, false);
                }
            } }, handledByPreloadPlugin: function (byteArray, fullname, finish, onerror) { Browser.init(); var handled = false; Module["preloadPlugins"].forEach(function (plugin) { if (handled)
                return; if (plugin["canHandle"](fullname)) {
                plugin["handle"](byteArray, fullname, finish, onerror);
                handled = true;
            } }); return handled; }, createContext: function (canvas, useWebGL, setInModule, webGLContextAttributes) { if (useWebGL && Module.ctx && canvas == Module.canvas)
                return Module.ctx; var ctx; var contextHandle; if (useWebGL) {
                var contextAttributes = { antialias: false, alpha: false, majorVersion: 1 };
                if (webGLContextAttributes) {
                    for (var attribute in webGLContextAttributes) {
                        contextAttributes[attribute] = webGLContextAttributes[attribute];
                    }
                }
                if (typeof GL != "undefined") {
                    contextHandle = GL.createContext(canvas, contextAttributes);
                    if (contextHandle) {
                        ctx = GL.getContext(contextHandle).GLctx;
                    }
                }
            }
            else {
                ctx = canvas.getContext("2d");
            } if (!ctx)
                return null; if (setInModule) {
                if (!useWebGL)
                    assert(typeof GLctx == "undefined", "cannot set in module if GLctx is used, but we are a non-GL context that would replace it");
                Module.ctx = ctx;
                if (useWebGL)
                    GL.makeContextCurrent(contextHandle);
                Module.useWebGL = useWebGL;
                Browser.moduleContextCreatedCallbacks.forEach(function (callback) { callback(); });
                Browser.init();
            } return ctx; }, destroyContext: function (canvas, useWebGL, setInModule) { }, fullscreenHandlersInstalled: false, lockPointer: undefined, resizeCanvas: undefined, requestFullscreen: function (lockPointer, resizeCanvas) { Browser.lockPointer = lockPointer; Browser.resizeCanvas = resizeCanvas; if (typeof Browser.lockPointer == "undefined")
                Browser.lockPointer = true; if (typeof Browser.resizeCanvas == "undefined")
                Browser.resizeCanvas = false; var canvas = Module["canvas"]; function fullscreenChange() { Browser.isFullscreen = false; var canvasContainer = canvas.parentNode; if ((document["fullscreenElement"] || document["mozFullScreenElement"] || document["msFullscreenElement"] || document["webkitFullscreenElement"] || document["webkitCurrentFullScreenElement"]) === canvasContainer) {
                canvas.exitFullscreen = Browser.exitFullscreen;
                if (Browser.lockPointer)
                    canvas.requestPointerLock();
                Browser.isFullscreen = true;
                if (Browser.resizeCanvas) {
                    Browser.setFullscreenCanvasSize();
                }
                else {
                    Browser.updateCanvasDimensions(canvas);
                }
            }
            else {
                canvasContainer.parentNode.insertBefore(canvas, canvasContainer);
                canvasContainer.parentNode.removeChild(canvasContainer);
                if (Browser.resizeCanvas) {
                    Browser.setWindowedCanvasSize();
                }
                else {
                    Browser.updateCanvasDimensions(canvas);
                }
            } if (Module["onFullScreen"])
                Module["onFullScreen"](Browser.isFullscreen); if (Module["onFullscreen"])
                Module["onFullscreen"](Browser.isFullscreen); } if (!Browser.fullscreenHandlersInstalled) {
                Browser.fullscreenHandlersInstalled = true;
                document.addEventListener("fullscreenchange", fullscreenChange, false);
                document.addEventListener("mozfullscreenchange", fullscreenChange, false);
                document.addEventListener("webkitfullscreenchange", fullscreenChange, false);
                document.addEventListener("MSFullscreenChange", fullscreenChange, false);
            } var canvasContainer = document.createElement("div"); canvas.parentNode.insertBefore(canvasContainer, canvas); canvasContainer.appendChild(canvas); canvasContainer.requestFullscreen = canvasContainer["requestFullscreen"] || canvasContainer["mozRequestFullScreen"] || canvasContainer["msRequestFullscreen"] || (canvasContainer["webkitRequestFullscreen"] ? function () { canvasContainer["webkitRequestFullscreen"](Element["ALLOW_KEYBOARD_INPUT"]); } : null) || (canvasContainer["webkitRequestFullScreen"] ? function () { canvasContainer["webkitRequestFullScreen"](Element["ALLOW_KEYBOARD_INPUT"]); } : null); canvasContainer.requestFullscreen(); }, exitFullscreen: function () { if (!Browser.isFullscreen) {
                return false;
            } var CFS = document["exitFullscreen"] || document["cancelFullScreen"] || document["mozCancelFullScreen"] || document["msExitFullscreen"] || document["webkitCancelFullScreen"] || function () { }; CFS.apply(document, []); return true; }, nextRAF: 0, fakeRequestAnimationFrame: function (func) { var now = Date.now(); if (Browser.nextRAF === 0) {
                Browser.nextRAF = now + 1e3 / 60;
            }
            else {
                while (now + 2 >= Browser.nextRAF) {
                    Browser.nextRAF += 1e3 / 60;
                }
            } var delay = Math.max(Browser.nextRAF - now, 0); setTimeout(func, delay); }, requestAnimationFrame: function (func) { if (typeof requestAnimationFrame == "function") {
                requestAnimationFrame(func);
                return;
            } var RAF = Browser.fakeRequestAnimationFrame; RAF(func); }, safeSetTimeout: function (func) { return safeSetTimeout(func); }, safeRequestAnimationFrame: function (func) { return Browser.requestAnimationFrame(function () { callUserCallback(func); }); }, getMimetype: function (name) { return { "jpg": "image/jpeg", "jpeg": "image/jpeg", "png": "image/png", "bmp": "image/bmp", "ogg": "audio/ogg", "wav": "audio/wav", "mp3": "audio/mpeg" }[name.substr(name.lastIndexOf(".") + 1)]; }, getUserMedia: function (func) { if (!window.getUserMedia) {
                window.getUserMedia = navigator["getUserMedia"] || navigator["mozGetUserMedia"];
            } window.getUserMedia(func); }, getMovementX: function (event) { return event["movementX"] || event["mozMovementX"] || event["webkitMovementX"] || 0; }, getMovementY: function (event) { return event["movementY"] || event["mozMovementY"] || event["webkitMovementY"] || 0; }, getMouseWheelDelta: function (event) { var delta = 0; switch (event.type) {
                case "DOMMouseScroll":
                    delta = event.detail / 3;
                    break;
                case "mousewheel":
                    delta = event.wheelDelta / 120;
                    break;
                case "wheel":
                    delta = event.deltaY;
                    switch (event.deltaMode) {
                        case 0:
                            delta /= 100;
                            break;
                        case 1:
                            delta /= 3;
                            break;
                        case 2:
                            delta *= 80;
                            break;
                        default: throw "unrecognized mouse wheel delta mode: " + event.deltaMode;
                    }
                    break;
                default: throw "unrecognized mouse wheel event: " + event.type;
            } return delta; }, mouseX: 0, mouseY: 0, mouseMovementX: 0, mouseMovementY: 0, touches: {}, lastTouches: {}, calculateMouseEvent: function (event) { if (Browser.pointerLock) {
                if (event.type != "mousemove" && "mozMovementX" in event) {
                    Browser.mouseMovementX = Browser.mouseMovementY = 0;
                }
                else {
                    Browser.mouseMovementX = Browser.getMovementX(event);
                    Browser.mouseMovementY = Browser.getMovementY(event);
                }
                if (typeof SDL != "undefined") {
                    Browser.mouseX = SDL.mouseX + Browser.mouseMovementX;
                    Browser.mouseY = SDL.mouseY + Browser.mouseMovementY;
                }
                else {
                    Browser.mouseX += Browser.mouseMovementX;
                    Browser.mouseY += Browser.mouseMovementY;
                }
            }
            else {
                var rect = Module["canvas"].getBoundingClientRect();
                var cw = Module["canvas"].width;
                var ch = Module["canvas"].height;
                var scrollX = typeof window.scrollX != "undefined" ? window.scrollX : window.pageXOffset;
                var scrollY = typeof window.scrollY != "undefined" ? window.scrollY : window.pageYOffset;
                if (event.type === "touchstart" || event.type === "touchend" || event.type === "touchmove") {
                    var touch = event.touch;
                    if (touch === undefined) {
                        return;
                    }
                    var adjustedX = touch.pageX - (scrollX + rect.left);
                    var adjustedY = touch.pageY - (scrollY + rect.top);
                    adjustedX = adjustedX * (cw / rect.width);
                    adjustedY = adjustedY * (ch / rect.height);
                    var coords = { x: adjustedX, y: adjustedY };
                    if (event.type === "touchstart") {
                        Browser.lastTouches[touch.identifier] = coords;
                        Browser.touches[touch.identifier] = coords;
                    }
                    else if (event.type === "touchend" || event.type === "touchmove") {
                        var last = Browser.touches[touch.identifier];
                        if (!last)
                            last = coords;
                        Browser.lastTouches[touch.identifier] = last;
                        Browser.touches[touch.identifier] = coords;
                    }
                    return;
                }
                var x = event.pageX - (scrollX + rect.left);
                var y = event.pageY - (scrollY + rect.top);
                x = x * (cw / rect.width);
                y = y * (ch / rect.height);
                Browser.mouseMovementX = x - Browser.mouseX;
                Browser.mouseMovementY = y - Browser.mouseY;
                Browser.mouseX = x;
                Browser.mouseY = y;
            } }, resizeListeners: [], updateResizeListeners: function () { var canvas = Module["canvas"]; Browser.resizeListeners.forEach(function (listener) { listener(canvas.width, canvas.height); }); }, setCanvasSize: function (width, height, noUpdates) { var canvas = Module["canvas"]; Browser.updateCanvasDimensions(canvas, width, height); if (!noUpdates)
                Browser.updateResizeListeners(); }, windowedWidth: 0, windowedHeight: 0, setFullscreenCanvasSize: function () { if (typeof SDL != "undefined") {
                var flags = HEAPU32[SDL.screen >>> 2];
                flags = flags | 8388608;
                HEAP32[SDL.screen >>> 2] = flags;
            } Browser.updateCanvasDimensions(Module["canvas"]); Browser.updateResizeListeners(); }, setWindowedCanvasSize: function () { if (typeof SDL != "undefined") {
                var flags = HEAPU32[SDL.screen >>> 2];
                flags = flags & ~8388608;
                HEAP32[SDL.screen >>> 2] = flags;
            } Browser.updateCanvasDimensions(Module["canvas"]); Browser.updateResizeListeners(); }, updateCanvasDimensions: function (canvas, wNative, hNative) { if (wNative && hNative) {
                canvas.widthNative = wNative;
                canvas.heightNative = hNative;
            }
            else {
                wNative = canvas.widthNative;
                hNative = canvas.heightNative;
            } var w = wNative; var h = hNative; if (Module["forcedAspectRatio"] && Module["forcedAspectRatio"] > 0) {
                if (w / h < Module["forcedAspectRatio"]) {
                    w = Math.round(h * Module["forcedAspectRatio"]);
                }
                else {
                    h = Math.round(w / Module["forcedAspectRatio"]);
                }
            } if ((document["fullscreenElement"] || document["mozFullScreenElement"] || document["msFullscreenElement"] || document["webkitFullscreenElement"] || document["webkitCurrentFullScreenElement"]) === canvas.parentNode && typeof screen != "undefined") {
                var factor = Math.min(screen.width / w, screen.height / h);
                w = Math.round(w * factor);
                h = Math.round(h * factor);
            } if (Browser.resizeCanvas) {
                if (canvas.width != w)
                    canvas.width = w;
                if (canvas.height != h)
                    canvas.height = h;
                if (typeof canvas.style != "undefined") {
                    canvas.style.removeProperty("width");
                    canvas.style.removeProperty("height");
                }
            }
            else {
                if (canvas.width != wNative)
                    canvas.width = wNative;
                if (canvas.height != hNative)
                    canvas.height = hNative;
                if (typeof canvas.style != "undefined") {
                    if (w != wNative || h != hNative) {
                        canvas.style.setProperty("width", w + "px", "important");
                        canvas.style.setProperty("height", h + "px", "important");
                    }
                    else {
                        canvas.style.removeProperty("width");
                        canvas.style.removeProperty("height");
                    }
                }
            } } };
        function _emscripten_get_preloaded_image_data(path, w, h) { if ((path | 0) === path)
            path = UTF8ToString(path); path = PATH_FS.resolve(path); var canvas = preloadedImages[path]; if (canvas) {
            var ctx = canvas.getContext("2d");
            var image = ctx.getImageData(0, 0, canvas.width, canvas.height);
            var buf = _malloc(canvas.width * canvas.height * 4);
            HEAPU8.set(image.data, buf >>> 0);
            HEAP32[w >>> 2] = canvas.width;
            HEAP32[h >>> 2] = canvas.height;
            return buf;
        } return 0; }
        function _emscripten_memcpy_big(dest, src, num) { HEAPU8.copyWithin(dest >>> 0, src >>> 0, src + num >>> 0); }
        function emscripten_realloc_buffer(size) { try {
            wasmMemory.grow(size - buffer.byteLength + 65535 >>> 16);
            updateGlobalBufferAndViews(wasmMemory.buffer);
            return 1;
        }
        catch (e) { } }
        function _emscripten_resize_heap(requestedSize) { var oldSize = HEAPU8.length; requestedSize = requestedSize >>> 0; var maxHeapSize = getHeapMax(); if (requestedSize > maxHeapSize) {
            return false;
        } var alignUp = function (x, multiple) { return x + (multiple - x % multiple) % multiple; }; for (var cutDown = 1; cutDown <= 4; cutDown *= 2) {
            var overGrownHeapSize = oldSize * (1 + .2 / cutDown);
            overGrownHeapSize = Math.min(overGrownHeapSize, requestedSize + 100663296);
            var newSize = Math.min(maxHeapSize, alignUp(Math.max(requestedSize, overGrownHeapSize), 65536));
            var replacement = emscripten_realloc_buffer(newSize);
            if (replacement) {
                return true;
            }
        } return false; }
        var ENV = {};
        function getExecutableName() { return thisProgram || "./this.program"; }
        function getEnvStrings() { if (!getEnvStrings.strings) {
            var lang = (typeof navigator == "object" && navigator.languages && navigator.languages[0] || "C").replace("-", "_") + ".UTF-8";
            var env = { "USER": "web_user", "LOGNAME": "web_user", "PATH": "/", "PWD": "/", "HOME": "/home/web_user", "LANG": lang, "_": getExecutableName() };
            for (var x in ENV) {
                if (ENV[x] === undefined)
                    delete env[x];
                else
                    env[x] = ENV[x];
            }
            var strings = [];
            for (var x in env) {
                strings.push(x + "=" + env[x]);
            }
            getEnvStrings.strings = strings;
        } return getEnvStrings.strings; }
        function _environ_get(__environ, environ_buf) { var bufSize = 0; getEnvStrings().forEach(function (string, i) { var ptr = environ_buf + bufSize; HEAPU32[__environ + i * 4 >>> 2] = ptr; writeAsciiToMemory(string, ptr); bufSize += string.length + 1; }); return 0; }
        function _environ_sizes_get(penviron_count, penviron_buf_size) { var strings = getEnvStrings(); HEAPU32[penviron_count >>> 2] = strings.length; var bufSize = 0; strings.forEach(function (string) { bufSize += string.length + 1; }); HEAPU32[penviron_buf_size >>> 2] = bufSize; return 0; }
        function _fd_close(fd) { try {
            var stream = SYSCALLS.getStreamFromFD(fd);
            FS.close(stream);
            return 0;
        }
        catch (e) {
            if (typeof FS == "undefined" || !(e instanceof FS.ErrnoError))
                throw e;
            return e.errno;
        } }
        function doReadv(stream, iov, iovcnt, offset) { var ret = 0; for (var i = 0; i < iovcnt; i++) {
            var ptr = HEAPU32[iov >>> 2];
            var len = HEAPU32[iov + 4 >>> 2];
            iov += 8;
            var curr = FS.read(stream, HEAP8, ptr, len, offset);
            if (curr < 0)
                return -1;
            ret += curr;
            if (curr < len)
                break;
        } return ret; }
        function _fd_read(fd, iov, iovcnt, pnum) { try {
            var stream = SYSCALLS.getStreamFromFD(fd);
            var num = doReadv(stream, iov, iovcnt);
            HEAP32[pnum >>> 2] = num;
            return 0;
        }
        catch (e) {
            if (typeof FS == "undefined" || !(e instanceof FS.ErrnoError))
                throw e;
            return e.errno;
        } }
        function convertI32PairToI53Checked(lo, hi) { return hi + 2097152 >>> 0 < 4194305 - !!lo ? (lo >>> 0) + hi * 4294967296 : NaN; }
        function _fd_seek(fd, offset_low, offset_high, whence, newOffset) { try {
            var offset = convertI32PairToI53Checked(offset_low, offset_high);
            if (isNaN(offset))
                return 61;
            var stream = SYSCALLS.getStreamFromFD(fd);
            FS.llseek(stream, offset, whence);
            tempI64 = [stream.position >>> 0, (tempDouble = stream.position, +Math.abs(tempDouble) >= 1 ? tempDouble > 0 ? (Math.min(+Math.floor(tempDouble / 4294967296), 4294967295) | 0) >>> 0 : ~~+Math.ceil((tempDouble - +(~~tempDouble >>> 0)) / 4294967296) >>> 0 : 0)], HEAP32[newOffset >>> 2] = tempI64[0], HEAP32[newOffset + 4 >>> 2] = tempI64[1];
            if (stream.getdents && offset === 0 && whence === 0)
                stream.getdents = null;
            return 0;
        }
        catch (e) {
            if (typeof FS == "undefined" || !(e instanceof FS.ErrnoError))
                throw e;
            return e.errno;
        } }
        function doWritev(stream, iov, iovcnt, offset) { var ret = 0; for (var i = 0; i < iovcnt; i++) {
            var ptr = HEAPU32[iov >>> 2];
            var len = HEAPU32[iov + 4 >>> 2];
            iov += 8;
            var curr = FS.write(stream, HEAP8, ptr, len, offset);
            if (curr < 0)
                return -1;
            ret += curr;
        } return ret; }
        function _fd_write(fd, iov, iovcnt, pnum) { try {
            var stream = SYSCALLS.getStreamFromFD(fd);
            var num = doWritev(stream, iov, iovcnt);
            HEAPU32[pnum >>> 2] = num;
            return 0;
        }
        catch (e) {
            if (typeof FS == "undefined" || !(e instanceof FS.ErrnoError))
                throw e;
            return e.errno;
        } }
        function inetPton4(str) { var b = str.split("."); for (var i = 0; i < 4; i++) {
            var tmp = Number(b[i]);
            if (isNaN(tmp))
                return null;
            b[i] = tmp;
        } return (b[0] | b[1] << 8 | b[2] << 16 | b[3] << 24) >>> 0; }
        function jstoi_q(str) { return parseInt(str); }
        function inetPton6(str) { var words; var w, offset, z; var valid6regx = /^((?=.*::)(?!.*::.+::)(::)?([\dA-F]{1,4}:(:|\b)|){5}|([\dA-F]{1,4}:){6})((([\dA-F]{1,4}((?!\3)::|:\b|$))|(?!\2\3)){2}|(((2[0-4]|1\d|[1-9])?\d|25[0-5])\.?\b){4})$/i; var parts = []; if (!valid6regx.test(str)) {
            return null;
        } if (str === "::") {
            return [0, 0, 0, 0, 0, 0, 0, 0];
        } if (str.startsWith("::")) {
            str = str.replace("::", "Z:");
        }
        else {
            str = str.replace("::", ":Z:");
        } if (str.indexOf(".") > 0) {
            str = str.replace(new RegExp("[.]", "g"), ":");
            words = str.split(":");
            words[words.length - 4] = jstoi_q(words[words.length - 4]) + jstoi_q(words[words.length - 3]) * 256;
            words[words.length - 3] = jstoi_q(words[words.length - 2]) + jstoi_q(words[words.length - 1]) * 256;
            words = words.slice(0, words.length - 2);
        }
        else {
            words = str.split(":");
        } offset = 0; z = 0; for (w = 0; w < words.length; w++) {
            if (typeof words[w] == "string") {
                if (words[w] === "Z") {
                    for (z = 0; z < 8 - words.length + 1; z++) {
                        parts[w + z] = 0;
                    }
                    offset = z - 1;
                }
                else {
                    parts[w + offset] = _htons(parseInt(words[w], 16));
                }
            }
            else {
                parts[w + offset] = words[w];
            }
        } return [parts[1] << 16 | parts[0], parts[3] << 16 | parts[2], parts[5] << 16 | parts[4], parts[7] << 16 | parts[6]]; }
        var DNS = { address_map: { id: 1, addrs: {}, names: {} }, lookup_name: function (name) { var res = inetPton4(name); if (res !== null) {
                return name;
            } res = inetPton6(name); if (res !== null) {
                return name;
            } var addr; if (DNS.address_map.addrs[name]) {
                addr = DNS.address_map.addrs[name];
            }
            else {
                var id = DNS.address_map.id++;
                assert(id < 65535, "exceeded max address mappings of 65535");
                addr = "172.29." + (id & 255) + "." + (id & 65280);
                DNS.address_map.names[addr] = name;
                DNS.address_map.addrs[name] = addr;
            } return addr; }, lookup_addr: function (addr) { if (DNS.address_map.names[addr]) {
                return DNS.address_map.names[addr];
            } return null; } };
        function getHostByName(name) { var ret = _malloc(20); var nameBuf = _malloc(name.length + 1); stringToUTF8(name, nameBuf, name.length + 1); HEAPU32[ret >>> 2] = nameBuf; var aliasesBuf = _malloc(4); HEAPU32[aliasesBuf >>> 2] = 0; HEAPU32[ret + 4 >>> 2] = aliasesBuf; var afinet = 2; HEAP32[ret + 8 >>> 2] = afinet; HEAP32[ret + 12 >>> 2] = 4; var addrListBuf = _malloc(12); HEAPU32[addrListBuf >>> 2] = addrListBuf + 8; HEAPU32[addrListBuf + 4 >>> 2] = 0; HEAP32[addrListBuf + 8 >>> 2] = inetPton4(DNS.lookup_name(name)); HEAPU32[ret + 16 >>> 2] = addrListBuf; return ret; }
        function _gethostbyname(name) { return getHostByName(UTF8ToString(name)); }
        function __webgl_enable_ANGLE_instanced_arrays(ctx) { var ext = ctx.getExtension("ANGLE_instanced_arrays"); if (ext) {
            ctx["vertexAttribDivisor"] = function (index, divisor) { ext["vertexAttribDivisorANGLE"](index, divisor); };
            ctx["drawArraysInstanced"] = function (mode, first, count, primcount) { ext["drawArraysInstancedANGLE"](mode, first, count, primcount); };
            ctx["drawElementsInstanced"] = function (mode, count, type, indices, primcount) { ext["drawElementsInstancedANGLE"](mode, count, type, indices, primcount); };
            return 1;
        } }
        function __webgl_enable_OES_vertex_array_object(ctx) { var ext = ctx.getExtension("OES_vertex_array_object"); if (ext) {
            ctx["createVertexArray"] = function () { return ext["createVertexArrayOES"](); };
            ctx["deleteVertexArray"] = function (vao) { ext["deleteVertexArrayOES"](vao); };
            ctx["bindVertexArray"] = function (vao) { ext["bindVertexArrayOES"](vao); };
            ctx["isVertexArray"] = function (vao) { return ext["isVertexArrayOES"](vao); };
            return 1;
        } }
        function __webgl_enable_WEBGL_draw_buffers(ctx) { var ext = ctx.getExtension("WEBGL_draw_buffers"); if (ext) {
            ctx["drawBuffers"] = function (n, bufs) { ext["drawBuffersWEBGL"](n, bufs); };
            return 1;
        } }
        function __webgl_enable_WEBGL_multi_draw(ctx) { return !!(ctx.multiDrawWebgl = ctx.getExtension("WEBGL_multi_draw")); }
        var GL = { counter: 1, buffers: [], programs: [], framebuffers: [], renderbuffers: [], textures: [], shaders: [], vaos: [], contexts: [], offscreenCanvases: {}, queries: [], stringCache: {}, unpackAlignment: 4, recordError: function recordError(errorCode) { if (!GL.lastError) {
                GL.lastError = errorCode;
            } }, getNewId: function (table) { var ret = GL.counter++; for (var i = table.length; i < ret; i++) {
                table[i] = null;
            } return ret; }, getSource: function (shader, count, string, length) { var source = ""; for (var i = 0; i < count; ++i) {
                var len = length ? HEAP32[length + i * 4 >>> 2] : -1;
                source += UTF8ToString(HEAP32[string + i * 4 >>> 2], len < 0 ? undefined : len);
            } return source; }, createContext: function (canvas, webGLContextAttributes) { if (!canvas.getContextSafariWebGL2Fixed) {
                canvas.getContextSafariWebGL2Fixed = canvas.getContext;
                function fixedGetContext(ver, attrs) { var gl = canvas.getContextSafariWebGL2Fixed(ver, attrs); return ver == "webgl" == gl instanceof WebGLRenderingContext ? gl : null; }
                canvas.getContext = fixedGetContext;
            } var ctx = canvas.getContext("webgl", webGLContextAttributes); if (!ctx)
                return 0; var handle = GL.registerContext(ctx, webGLContextAttributes); return handle; }, registerContext: function (ctx, webGLContextAttributes) { var handle = GL.getNewId(GL.contexts); var context = { handle: handle, attributes: webGLContextAttributes, version: webGLContextAttributes.majorVersion, GLctx: ctx }; if (ctx.canvas)
                ctx.canvas.GLctxObject = context; GL.contexts[handle] = context; if (typeof webGLContextAttributes.enableExtensionsByDefault == "undefined" || webGLContextAttributes.enableExtensionsByDefault) {
                GL.initExtensions(context);
            } return handle; }, makeContextCurrent: function (contextHandle) { GL.currentContext = GL.contexts[contextHandle]; Module.ctx = GLctx = GL.currentContext && GL.currentContext.GLctx; return !(contextHandle && !GLctx); }, getContext: function (contextHandle) { return GL.contexts[contextHandle]; }, deleteContext: function (contextHandle) { if (GL.currentContext === GL.contexts[contextHandle])
                GL.currentContext = null; if (typeof JSEvents == "object")
                JSEvents.removeAllHandlersOnTarget(GL.contexts[contextHandle].GLctx.canvas); if (GL.contexts[contextHandle] && GL.contexts[contextHandle].GLctx.canvas)
                GL.contexts[contextHandle].GLctx.canvas.GLctxObject = undefined; GL.contexts[contextHandle] = null; }, initExtensions: function (context) { if (!context)
                context = GL.currentContext; if (context.initExtensionsDone)
                return; context.initExtensionsDone = true; var GLctx = context.GLctx; __webgl_enable_ANGLE_instanced_arrays(GLctx); __webgl_enable_OES_vertex_array_object(GLctx); __webgl_enable_WEBGL_draw_buffers(GLctx); {
                GLctx.disjointTimerQueryExt = GLctx.getExtension("EXT_disjoint_timer_query");
            } __webgl_enable_WEBGL_multi_draw(GLctx); var exts = GLctx.getSupportedExtensions() || []; exts.forEach(function (ext) { if (!ext.includes("lose_context") && !ext.includes("debug")) {
                GLctx.getExtension(ext);
            } }); } };
        function webglGetLeftBracePos(name) { return name.slice(-1) == "]" && name.lastIndexOf("["); }
        function webglPrepareUniformLocationsBeforeFirstUse(program) { var uniformLocsById = program.uniformLocsById, uniformSizeAndIdsByName = program.uniformSizeAndIdsByName, i, j; if (!uniformLocsById) {
            program.uniformLocsById = uniformLocsById = {};
            program.uniformArrayNamesById = {};
            for (i = 0; i < GLctx.getProgramParameter(program, 35718); ++i) {
                var u = GLctx.getActiveUniform(program, i);
                var nm = u.name;
                var sz = u.size;
                var lb = webglGetLeftBracePos(nm);
                var arrayName = lb > 0 ? nm.slice(0, lb) : nm;
                var id = program.uniformIdCounter;
                program.uniformIdCounter += sz;
                uniformSizeAndIdsByName[arrayName] = [sz, id];
                for (j = 0; j < sz; ++j) {
                    uniformLocsById[id] = j;
                    program.uniformArrayNamesById[id++] = arrayName;
                }
            }
        } }
        function _glGetUniformLocation(program, name) { name = UTF8ToString(name); if (program = GL.programs[program]) {
            webglPrepareUniformLocationsBeforeFirstUse(program);
            var uniformLocsById = program.uniformLocsById;
            var arrayIndex = 0;
            var uniformBaseName = name;
            var leftBrace = webglGetLeftBracePos(name);
            if (leftBrace > 0) {
                arrayIndex = jstoi_q(name.slice(leftBrace + 1)) >>> 0;
                uniformBaseName = name.slice(0, leftBrace);
            }
            var sizeAndId = program.uniformSizeAndIdsByName[uniformBaseName];
            if (sizeAndId && arrayIndex < sizeAndId[0]) {
                arrayIndex += sizeAndId[1];
                if (uniformLocsById[arrayIndex] = uniformLocsById[arrayIndex] || GLctx.getUniformLocation(program, name)) {
                    return arrayIndex;
                }
            }
        }
        else {
            GL.recordError(1281);
        } return -1; }
        function webglGetUniformLocation(location) { var p = GLctx.currentProgram; if (p) {
            var webglLoc = p.uniformLocsById[location];
            if (typeof webglLoc == "number") {
                p.uniformLocsById[location] = webglLoc = GLctx.getUniformLocation(p, p.uniformArrayNamesById[location] + (webglLoc > 0 ? "[" + webglLoc + "]" : ""));
            }
            return webglLoc;
        }
        else {
            GL.recordError(1282);
        } }
        function _glUniform1f(location, v0) { GLctx.uniform1f(webglGetUniformLocation(location), v0); }
        function _glUniform1i(location, v0) { GLctx.uniform1i(webglGetUniformLocation(location), v0); }
        var miniTempWebGLFloatBuffers = [];
        function _glUniform2fv(location, count, value) { if (count <= 144) {
            var view = miniTempWebGLFloatBuffers[2 * count - 1];
            for (var i = 0; i < 2 * count; i += 2) {
                view[i] = HEAPF32[value + 4 * i >>> 2];
                view[i + 1] = HEAPF32[value + (4 * i + 4) >>> 2];
            }
        }
        else {
            var view = HEAPF32.subarray(value >>> 2, value + count * 8 >>> 2);
        } GLctx.uniform2fv(webglGetUniformLocation(location), view); }
        var __miniTempWebGLIntBuffers = [];
        function _glUniform2iv(location, count, value) { if (count <= 144) {
            var view = __miniTempWebGLIntBuffers[2 * count - 1];
            for (var i = 0; i < 2 * count; i += 2) {
                view[i] = HEAP32[value + 4 * i >>> 2];
                view[i + 1] = HEAP32[value + (4 * i + 4) >>> 2];
            }
        }
        else {
            var view = HEAP32.subarray(value >>> 2, value + count * 8 >>> 2);
        } GLctx.uniform2iv(webglGetUniformLocation(location), view); }
        function _glUniform3fv(location, count, value) { if (count <= 96) {
            var view = miniTempWebGLFloatBuffers[3 * count - 1];
            for (var i = 0; i < 3 * count; i += 3) {
                view[i] = HEAPF32[value + 4 * i >>> 2];
                view[i + 1] = HEAPF32[value + (4 * i + 4) >>> 2];
                view[i + 2] = HEAPF32[value + (4 * i + 8) >>> 2];
            }
        }
        else {
            var view = HEAPF32.subarray(value >>> 2, value + count * 12 >>> 2);
        } GLctx.uniform3fv(webglGetUniformLocation(location), view); }
        function _glUniform3iv(location, count, value) { if (count <= 96) {
            var view = __miniTempWebGLIntBuffers[3 * count - 1];
            for (var i = 0; i < 3 * count; i += 3) {
                view[i] = HEAP32[value + 4 * i >>> 2];
                view[i + 1] = HEAP32[value + (4 * i + 4) >>> 2];
                view[i + 2] = HEAP32[value + (4 * i + 8) >>> 2];
            }
        }
        else {
            var view = HEAP32.subarray(value >>> 2, value + count * 12 >>> 2);
        } GLctx.uniform3iv(webglGetUniformLocation(location), view); }
        function _glUniform4fv(location, count, value) { if (count <= 72) {
            var view = miniTempWebGLFloatBuffers[4 * count - 1];
            var heap = HEAPF32;
            value >>= 2;
            for (var i = 0; i < 4 * count; i += 4) {
                var dst = value + i;
                view[i] = heap[dst >>> 0];
                view[i + 1] = heap[dst + 1 >>> 0];
                view[i + 2] = heap[dst + 2 >>> 0];
                view[i + 3] = heap[dst + 3 >>> 0];
            }
        }
        else {
            var view = HEAPF32.subarray(value >>> 2, value + count * 16 >>> 2);
        } GLctx.uniform4fv(webglGetUniformLocation(location), view); }
        function _glUniform4iv(location, count, value) { if (count <= 72) {
            var view = __miniTempWebGLIntBuffers[4 * count - 1];
            for (var i = 0; i < 4 * count; i += 4) {
                view[i] = HEAP32[value + 4 * i >>> 2];
                view[i + 1] = HEAP32[value + (4 * i + 4) >>> 2];
                view[i + 2] = HEAP32[value + (4 * i + 8) >>> 2];
                view[i + 3] = HEAP32[value + (4 * i + 12) >>> 2];
            }
        }
        else {
            var view = HEAP32.subarray(value >>> 2, value + count * 16 >>> 2);
        } GLctx.uniform4iv(webglGetUniformLocation(location), view); }
        function _setTempRet0(val) { setTempRet0(val); }
        function __isLeapYear(year) { return year % 4 === 0 && (year % 100 !== 0 || year % 400 === 0); }
        function __arraySum(array, index) { var sum = 0; for (var i = 0; i <= index; sum += array[i++]) { } return sum; }
        var __MONTH_DAYS_LEAP = [31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];
        var __MONTH_DAYS_REGULAR = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];
        function __addDays(date, days) { var newDate = new Date(date.getTime()); while (days > 0) {
            var leap = __isLeapYear(newDate.getFullYear());
            var currentMonth = newDate.getMonth();
            var daysInCurrentMonth = (leap ? __MONTH_DAYS_LEAP : __MONTH_DAYS_REGULAR)[currentMonth];
            if (days > daysInCurrentMonth - newDate.getDate()) {
                days -= daysInCurrentMonth - newDate.getDate() + 1;
                newDate.setDate(1);
                if (currentMonth < 11) {
                    newDate.setMonth(currentMonth + 1);
                }
                else {
                    newDate.setMonth(0);
                    newDate.setFullYear(newDate.getFullYear() + 1);
                }
            }
            else {
                newDate.setDate(newDate.getDate() + days);
                return newDate;
            }
        } return newDate; }
        function _strftime(s, maxsize, format, tm) { var tm_zone = HEAP32[tm + 40 >>> 2]; var date = { tm_sec: HEAP32[tm >>> 2], tm_min: HEAP32[tm + 4 >>> 2], tm_hour: HEAP32[tm + 8 >>> 2], tm_mday: HEAP32[tm + 12 >>> 2], tm_mon: HEAP32[tm + 16 >>> 2], tm_year: HEAP32[tm + 20 >>> 2], tm_wday: HEAP32[tm + 24 >>> 2], tm_yday: HEAP32[tm + 28 >>> 2], tm_isdst: HEAP32[tm + 32 >>> 2], tm_gmtoff: HEAP32[tm + 36 >>> 2], tm_zone: tm_zone ? UTF8ToString(tm_zone) : "" }; var pattern = UTF8ToString(format); var EXPANSION_RULES_1 = { "%c": "%a %b %d %H:%M:%S %Y", "%D": "%m/%d/%y", "%F": "%Y-%m-%d", "%h": "%b", "%r": "%I:%M:%S %p", "%R": "%H:%M", "%T": "%H:%M:%S", "%x": "%m/%d/%y", "%X": "%H:%M:%S", "%Ec": "%c", "%EC": "%C", "%Ex": "%m/%d/%y", "%EX": "%H:%M:%S", "%Ey": "%y", "%EY": "%Y", "%Od": "%d", "%Oe": "%e", "%OH": "%H", "%OI": "%I", "%Om": "%m", "%OM": "%M", "%OS": "%S", "%Ou": "%u", "%OU": "%U", "%OV": "%V", "%Ow": "%w", "%OW": "%W", "%Oy": "%y" }; for (var rule in EXPANSION_RULES_1) {
            pattern = pattern.replace(new RegExp(rule, "g"), EXPANSION_RULES_1[rule]);
        } var WEEKDAYS = ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"]; var MONTHS = ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"]; function leadingSomething(value, digits, character) { var str = typeof value == "number" ? value.toString() : value || ""; while (str.length < digits) {
            str = character[0] + str;
        } return str; } function leadingNulls(value, digits) { return leadingSomething(value, digits, "0"); } function compareByDay(date1, date2) { function sgn(value) { return value < 0 ? -1 : value > 0 ? 1 : 0; } var compare; if ((compare = sgn(date1.getFullYear() - date2.getFullYear())) === 0) {
            if ((compare = sgn(date1.getMonth() - date2.getMonth())) === 0) {
                compare = sgn(date1.getDate() - date2.getDate());
            }
        } return compare; } function getFirstWeekStartDate(janFourth) { switch (janFourth.getDay()) {
            case 0: return new Date(janFourth.getFullYear() - 1, 11, 29);
            case 1: return janFourth;
            case 2: return new Date(janFourth.getFullYear(), 0, 3);
            case 3: return new Date(janFourth.getFullYear(), 0, 2);
            case 4: return new Date(janFourth.getFullYear(), 0, 1);
            case 5: return new Date(janFourth.getFullYear() - 1, 11, 31);
            case 6: return new Date(janFourth.getFullYear() - 1, 11, 30);
        } } function getWeekBasedYear(date) { var thisDate = __addDays(new Date(date.tm_year + 1900, 0, 1), date.tm_yday); var janFourthThisYear = new Date(thisDate.getFullYear(), 0, 4); var janFourthNextYear = new Date(thisDate.getFullYear() + 1, 0, 4); var firstWeekStartThisYear = getFirstWeekStartDate(janFourthThisYear); var firstWeekStartNextYear = getFirstWeekStartDate(janFourthNextYear); if (compareByDay(firstWeekStartThisYear, thisDate) <= 0) {
            if (compareByDay(firstWeekStartNextYear, thisDate) <= 0) {
                return thisDate.getFullYear() + 1;
            }
            else {
                return thisDate.getFullYear();
            }
        }
        else {
            return thisDate.getFullYear() - 1;
        } } var EXPANSION_RULES_2 = { "%a": function (date) { return WEEKDAYS[date.tm_wday].substring(0, 3); }, "%A": function (date) { return WEEKDAYS[date.tm_wday]; }, "%b": function (date) { return MONTHS[date.tm_mon].substring(0, 3); }, "%B": function (date) { return MONTHS[date.tm_mon]; }, "%C": function (date) { var year = date.tm_year + 1900; return leadingNulls(year / 100 | 0, 2); }, "%d": function (date) { return leadingNulls(date.tm_mday, 2); }, "%e": function (date) { return leadingSomething(date.tm_mday, 2, " "); }, "%g": function (date) { return getWeekBasedYear(date).toString().substring(2); }, "%G": function (date) { return getWeekBasedYear(date); }, "%H": function (date) { return leadingNulls(date.tm_hour, 2); }, "%I": function (date) { var twelveHour = date.tm_hour; if (twelveHour == 0)
                twelveHour = 12;
            else if (twelveHour > 12)
                twelveHour -= 12; return leadingNulls(twelveHour, 2); }, "%j": function (date) { return leadingNulls(date.tm_mday + __arraySum(__isLeapYear(date.tm_year + 1900) ? __MONTH_DAYS_LEAP : __MONTH_DAYS_REGULAR, date.tm_mon - 1), 3); }, "%m": function (date) { return leadingNulls(date.tm_mon + 1, 2); }, "%M": function (date) { return leadingNulls(date.tm_min, 2); }, "%n": function () { return "\n"; }, "%p": function (date) { if (date.tm_hour >= 0 && date.tm_hour < 12) {
                return "AM";
            }
            else {
                return "PM";
            } }, "%S": function (date) { return leadingNulls(date.tm_sec, 2); }, "%t": function () { return "\t"; }, "%u": function (date) { return date.tm_wday || 7; }, "%U": function (date) { var days = date.tm_yday + 7 - date.tm_wday; return leadingNulls(Math.floor(days / 7), 2); }, "%V": function (date) { var val = Math.floor((date.tm_yday + 7 - (date.tm_wday + 6) % 7) / 7); if ((date.tm_wday + 371 - date.tm_yday - 2) % 7 <= 2) {
                val++;
            } if (!val) {
                val = 52;
                var dec31 = (date.tm_wday + 7 - date.tm_yday - 1) % 7;
                if (dec31 == 4 || dec31 == 5 && __isLeapYear(date.tm_year % 400 - 1)) {
                    val++;
                }
            }
            else if (val == 53) {
                var jan1 = (date.tm_wday + 371 - date.tm_yday) % 7;
                if (jan1 != 4 && (jan1 != 3 || !__isLeapYear(date.tm_year)))
                    val = 1;
            } return leadingNulls(val, 2); }, "%w": function (date) { return date.tm_wday; }, "%W": function (date) { var days = date.tm_yday + 7 - (date.tm_wday + 6) % 7; return leadingNulls(Math.floor(days / 7), 2); }, "%y": function (date) { return (date.tm_year + 1900).toString().substring(2); }, "%Y": function (date) { return date.tm_year + 1900; }, "%z": function (date) { var off = date.tm_gmtoff; var ahead = off >= 0; off = Math.abs(off) / 60; off = off / 60 * 100 + off % 60; return (ahead ? "+" : "-") + String("0000" + off).slice(-4); }, "%Z": function (date) { return date.tm_zone; }, "%%": function () { return "%"; } }; pattern = pattern.replace(/%%/g, "\0\0"); for (var rule in EXPANSION_RULES_2) {
            if (pattern.includes(rule)) {
                pattern = pattern.replace(new RegExp(rule, "g"), EXPANSION_RULES_2[rule](date));
            }
        } pattern = pattern.replace(/\0\0/g, "%"); var bytes = intArrayFromString(pattern, false); if (bytes.length > maxsize) {
            return 0;
        } writeArrayToMemory(bytes, s); return bytes.length - 1; }
        function _strftime_l(s, maxsize, format, tm) { return _strftime(s, maxsize, format, tm); }
        var FSNode = function (parent, name, mode, rdev) { if (!parent) {
            parent = this;
        } this.parent = parent; this.mount = parent.mount; this.mounted = null; this.id = FS.nextInode++; this.name = name; this.mode = mode; this.node_ops = {}; this.stream_ops = {}; this.rdev = rdev; };
        var readMode = 292 | 73;
        var writeMode = 146;
        Object.defineProperties(FSNode.prototype, { read: { get: function () { return (this.mode & readMode) === readMode; }, set: function (val) { val ? this.mode |= readMode : this.mode &= ~readMode; } }, write: { get: function () { return (this.mode & writeMode) === writeMode; }, set: function (val) { val ? this.mode |= writeMode : this.mode &= ~writeMode; } }, isFolder: { get: function () { return FS.isDir(this.mode); } }, isDevice: { get: function () { return FS.isChrdev(this.mode); } } });
        FS.FSNode = FSNode;
        FS.staticInit();
        BindingError = Module["BindingError"] = extendError(Error, "BindingError");
        init_emval();
        PureVirtualError = Module["PureVirtualError"] = extendError(Error, "PureVirtualError");
        embind_init_charCodes();
        init_embind();
        InternalError = Module["InternalError"] = extendError(Error, "InternalError");
        init_ClassHandle();
        init_RegisteredPointer();
        UnboundTypeError = Module["UnboundTypeError"] = extendError(Error, "UnboundTypeError");
        Module["requestFullscreen"] = function Module_requestFullscreen(lockPointer, resizeCanvas) { Browser.requestFullscreen(lockPointer, resizeCanvas); };
        Module["requestAnimationFrame"] = function Module_requestAnimationFrame(func) { Browser.requestAnimationFrame(func); };
        Module["setCanvasSize"] = function Module_setCanvasSize(width, height, noUpdates) { Browser.setCanvasSize(width, height, noUpdates); };
        Module["pauseMainLoop"] = function Module_pauseMainLoop() { Browser.mainLoop.pause(); };
        Module["resumeMainLoop"] = function Module_resumeMainLoop() { Browser.mainLoop.resume(); };
        Module["getUserMedia"] = function Module_getUserMedia() { Browser.getUserMedia(); };
        Module["createContext"] = function Module_createContext(canvas, useWebGL, setInModule, webGLContextAttributes) { return Browser.createContext(canvas, useWebGL, setInModule, webGLContextAttributes); };
        var preloadedImages = {};
        var preloadedAudios = {};
        var GLctx;
        var miniTempWebGLFloatBuffersStorage = new Float32Array(288);
        for (var i = 0; i < 288; ++i) {
            miniTempWebGLFloatBuffers[i] = miniTempWebGLFloatBuffersStorage.subarray(0, i + 1);
        }
        var __miniTempWebGLIntBuffersStorage = new Int32Array(288);
        for (var i = 0; i < 288; ++i) {
            __miniTempWebGLIntBuffers[i] = __miniTempWebGLIntBuffersStorage.subarray(0, i + 1);
        }
        function intArrayFromString(stringy, dontAddNull, length) { var len = length > 0 ? length : lengthBytesUTF8(stringy) + 1; var u8array = new Array(len); var numBytesWritten = stringToUTF8Array(stringy, u8array, 0, u8array.length); if (dontAddNull)
            u8array.length = numBytesWritten; return u8array; }
        var asmLibraryArg = { "ia": OSD_MemInfo_getModuleHeapLength, "g": ___assert_fail, "a": ___cxa_allocate_exception, "b": ___cxa_throw, "ba": ___syscall_chmod, "ca": ___syscall_faccessat, "s": ___syscall_fcntl64, "U": ___syscall_fstat64, "L": ___syscall_getdents64, "da": ___syscall_ioctl, "R": ___syscall_lstat64, "O": ___syscall_mkdirat, "S": ___syscall_newfstatat, "w": ___syscall_openat, "K": ___syscall_rmdir, "T": ___syscall_stat64, "I": ___syscall_unlinkat, "_": __dlinit, "aa": __dlopen_js, "$": __dlsym_js, "xa": __embind_create_inheriting_constructor, "E": __embind_register_bigint, "fa": __embind_register_bool, "d": __embind_register_class, "f": __embind_register_class_class_function, "e": __embind_register_class_constructor, "c": __embind_register_class_function, "k": __embind_register_class_property, "ea": __embind_register_emval, "j": __embind_register_enum, "i": __embind_register_enum_value, "A": __embind_register_float, "l": __embind_register_integer, "h": __embind_register_memory_view, "z": __embind_register_std_string, "t": __embind_register_std_wstring, "ga": __embind_register_void, "X": __emscripten_date_now, "W": __emscripten_get_now_is_monotonic, "o": __emval_as, "x": __emval_call_method, "B": __emval_call_void_method, "oa": __emval_decref, "va": __emval_get_global, "p": __emval_get_method_caller, "u": __emval_get_property, "ya": __emval_incref, "za": __emval_new_cstring, "C": __emval_new_object, "M": __emval_run_destructors, "n": __emval_set_property, "m": __emval_take_value, "wa": __emval_typeof, "Y": __localtime_js, "N": __munmap_js, "Z": __tzset_js, "v": _abort, "J": _emscripten_get_heap_max, "ka": _emscripten_get_preloaded_image_data, "V": _emscripten_memcpy_big, "H": _emscripten_resize_heap, "P": _environ_get, "Q": _environ_sizes_get, "ja": _exit, "q": _fd_close, "y": _fd_read, "D": _fd_seek, "r": _fd_write, "ha": _gethostbyname, "ua": _glGetUniformLocation, "sa": _glUniform1f, "ta": _glUniform1i, "na": _glUniform2fv, "ra": _glUniform2iv, "ma": _glUniform3fv, "qa": _glUniform3iv, "la": _glUniform4fv, "pa": _glUniform4iv, "F": _setTempRet0, "G": _strftime_l };
        var asm = createWasm();
        var ___wasm_call_ctors = Module["___wasm_call_ctors"] = function () { return (___wasm_call_ctors = Module["___wasm_call_ctors"] = Module["asm"]["Ba"]).apply(null, arguments); };
        var _malloc = Module["_malloc"] = function () { return (_malloc = Module["_malloc"] = Module["asm"]["Ca"]).apply(null, arguments); };
        var _free = Module["_free"] = function () { return (_free = Module["_free"] = Module["asm"]["Da"]).apply(null, arguments); };
        var ___errno_location = Module["___errno_location"] = function () { return (___errno_location = Module["___errno_location"] = Module["asm"]["Ea"]).apply(null, arguments); };
        var ___getTypeName = Module["___getTypeName"] = function () { return (___getTypeName = Module["___getTypeName"] = Module["asm"]["Fa"]).apply(null, arguments); };
        var ___embind_register_native_and_builtin_types = Module["___embind_register_native_and_builtin_types"] = function () { return (___embind_register_native_and_builtin_types = Module["___embind_register_native_and_builtin_types"] = Module["asm"]["Ga"]).apply(null, arguments); };
        var _htons = Module["_htons"] = function () { return (_htons = Module["_htons"] = Module["asm"]["Ia"]).apply(null, arguments); };
        var _emscripten_builtin_memalign = Module["_emscripten_builtin_memalign"] = function () { return (_emscripten_builtin_memalign = Module["_emscripten_builtin_memalign"] = Module["asm"]["Ja"]).apply(null, arguments); };
        var ___cxa_is_pointer_type = Module["___cxa_is_pointer_type"] = function () { return (___cxa_is_pointer_type = Module["___cxa_is_pointer_type"] = Module["asm"]["Ka"]).apply(null, arguments); };
        var dynCall_jiji = Module["dynCall_jiji"] = function () { return (dynCall_jiji = Module["dynCall_jiji"] = Module["asm"]["La"]).apply(null, arguments); };
        var dynCall_viijii = Module["dynCall_viijii"] = function () { return (dynCall_viijii = Module["dynCall_viijii"] = Module["asm"]["Ma"]).apply(null, arguments); };
        var dynCall_iiiiij = Module["dynCall_iiiiij"] = function () { return (dynCall_iiiiij = Module["dynCall_iiiiij"] = Module["asm"]["Na"]).apply(null, arguments); };
        var dynCall_iiiiijj = Module["dynCall_iiiiijj"] = function () { return (dynCall_iiiiijj = Module["dynCall_iiiiijj"] = Module["asm"]["Oa"]).apply(null, arguments); };
        var dynCall_iiiiiijj = Module["dynCall_iiiiiijj"] = function () { return (dynCall_iiiiiijj = Module["dynCall_iiiiiijj"] = Module["asm"]["Pa"]).apply(null, arguments); };
        var dynCall_viiiiji = Module["dynCall_viiiiji"] = function () { return (dynCall_viiiiji = Module["dynCall_viiiiji"] = Module["asm"]["Qa"]).apply(null, arguments); };
        var dynCall_viiijj = Module["dynCall_viiijj"] = function () { return (dynCall_viiijj = Module["dynCall_viiijj"] = Module["asm"]["Ra"]).apply(null, arguments); };
        Module["FS"] = FS;
        var calledRun;
        function ExitStatus(status) { this.name = "ExitStatus"; this.message = "Program terminated with exit(" + status + ")"; this.status = status; }
        dependenciesFulfilled = function runCaller() { if (!calledRun)
            run(); if (!calledRun)
            dependenciesFulfilled = runCaller; };
        function run(args) { args = args || arguments_; if (runDependencies > 0) {
            return;
        } preRun(); if (runDependencies > 0) {
            return;
        } function doRun() { if (calledRun)
            return; calledRun = true; Module["calledRun"] = true; if (ABORT)
            return; initRuntime(); readyPromiseResolve(Module); if (Module["onRuntimeInitialized"])
            Module["onRuntimeInitialized"](); postRun(); } if (Module["setStatus"]) {
            Module["setStatus"]("Running...");
            setTimeout(function () { setTimeout(function () { Module["setStatus"](""); }, 1); doRun(); }, 1);
        }
        else {
            doRun();
        } }
        Module["run"] = run;
        function exit(status, implicit) { EXITSTATUS = status; procExit(status); }
        function procExit(code) { EXITSTATUS = code; if (!keepRuntimeAlive()) {
            if (Module["onExit"])
                Module["onExit"](code);
            ABORT = true;
        } quit_(code, new ExitStatus(code)); }
        if (Module["preInit"]) {
            if (typeof Module["preInit"] == "function")
                Module["preInit"] = [Module["preInit"]];
            while (Module["preInit"].length > 0) {
                Module["preInit"].pop()();
            }
        }
        run();
        return Module.ready;
    });
})();
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (Module);


/***/ }),

/***/ "./ltbl-occt/opencascade.js":
/*!**********************************!*\
  !*** ./ltbl-occt/opencascade.js ***!
  \**********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
var __assign = (undefined && undefined.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (undefined && undefined.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var initOpenCascade = function (_a) {
    // console.log("mainJS is "+mainJS)
    // console.log("mainWasm is "+mainWasm)
    var _b = _a === void 0 ? {} : _a, mainJS = _b.mainJS, mainWasm = _b.mainWasm, worker = _b.worker, _c = _b.libs, libs = _c === void 0 ? [] : _c, _d = _b.module, module = _d === void 0 ? {} : _d;
    return new Promise(function (resolve, reject) {
        mainJS(__assign({ locateFile: function (path) {
                console.log("locateFile path: " + path);
                if (path.endsWith('.wasm')) {
                    console.log("returning mainWasm: " + mainWasm);
                    return mainWasm;
                }
                if (path.endsWith('.worker.js') && !!worker) {
                    console.log("returning worker: " + worker);
                    return worker;
                }
                return path;
            } }, module)).then(function (oc) { return __awaiter(void 0, void 0, void 0, function () {
            var _i, libs_1, lib;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _i = 0, libs_1 = libs;
                        _a.label = 1;
                    case 1:
                        if (!(_i < libs_1.length)) return [3 /*break*/, 4];
                        lib = libs_1[_i];
                        return [4 /*yield*/, oc.loadDynamicLibrary(lib, {
                                loadAsync: true,
                                global: true,
                                nodelete: true,
                                allowUndefined: false
                            })];
                    case 2:
                        _a.sent();
                        _a.label = 3;
                    case 3:
                        _i++;
                        return [3 /*break*/, 1];
                    case 4:
                        resolve(oc);
                        return [2 /*return*/];
                }
            });
        }); });
    });
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (initOpenCascade);


/***/ }),

/***/ "./src/commands/CSGCommandKind.ts":
/*!****************************************!*\
  !*** ./src/commands/CSGCommandKind.ts ***!
  \****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   CSGCommandKind: () => (/* binding */ CSGCommandKind)
/* harmony export */ });
var CSGCommandKind;
(function (CSGCommandKind) {
    CSGCommandKind["GetTopoShapeMetadata"] = "GetTopoShapeMetadata";
})(CSGCommandKind || (CSGCommandKind = {}));


/***/ }),

/***/ "./src/commands/commandExecutor.ts":
/*!*****************************************!*\
  !*** ./src/commands/commandExecutor.ts ***!
  \*****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   CommandExecutor: () => (/* binding */ CommandExecutor)
/* harmony export */ });
/* harmony import */ var _CSGCommandKind__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./CSGCommandKind */ "./src/commands/CSGCommandKind.ts");
/* harmony import */ var _csg_csgTypes__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../csg/csgTypes */ "./src/csg/csgTypes.ts");


var CommandExecutor = /** @class */ (function () {
    function CommandExecutor(geometry, nodeCalculator) {
        this.geometry = geometry;
        this.nodeCalculator = nodeCalculator;
    }
    CommandExecutor.prototype.executeCommandJson = function (commandJson) {
        if (typeof commandJson !== 'string') {
            throw new Error("executeCommandJson expects string input.");
        }
        var command = JSON.parse(commandJson);
        return this.executeCommand(command);
    };
    CommandExecutor.prototype.executeCommand = function (command) {
        var result;
        switch (command.Command) {
            case _CSGCommandKind__WEBPACK_IMPORTED_MODULE_0__.CSGCommandKind.GetTopoShapeMetadata:
                result = this.getTopoShapeMetadata(command);
                break;
        }
        var resultJson = JSON.stringify(result, null, 2);
        return resultJson;
    };
    CommandExecutor.prototype.getTopoShapeMetadata = function (command) {
        var result;
        switch (command.Kind) {
            case _csg_csgTypes__WEBPACK_IMPORTED_MODULE_1__.CSGNodeMetadataKind.Mesh:
                result = this.getMesh(command);
                break;
            case _csg_csgTypes__WEBPACK_IMPORTED_MODULE_1__.CSGNodeMetadataKind.AABB:
                result = this.getAABB(command);
                break;
            case _csg_csgTypes__WEBPACK_IMPORTED_MODULE_1__.CSGNodeMetadataKind.OBB:
                result = this.getOBB(command);
                break;
        }
        return result;
    };
    CommandExecutor.prototype.getAABB = function (command) {
        var shape = this.nodeCalculator.calculateNodeShapesWithCache(command.Node)[0];
        var aabb = this.geometry.boundingBoxes.getAABB(shape, false);
        return aabb;
    };
    CommandExecutor.prototype.getOBB = function (command) {
        var shape = this.nodeCalculator.calculateNodeShapesWithCache(command.Node)[0];
        var obb = this.geometry.boundingBoxes.getOBB(shape, false);
        return obb;
    };
    CommandExecutor.prototype.getMesh = function (command) {
        var shape = this.nodeCalculator.calculateNodeShapesWithCache(command.Node)[0];
        var facesAndEdges = this.geometry.makeIntoSingleMesh_My(shape, true, command.TheLinDeflection, command.TheAngDeflection);
        var faceListData = { faces: facesAndEdges.faces };
        var edgeListData = { edges: facesAndEdges.edges };
        var mesh = {
            faceListData: faceListData,
            edgeListData: edgeListData
        };
        return mesh;
    };
    return CommandExecutor;
}());



/***/ }),

/***/ "./src/common/compounds.ts":
/*!*********************************!*\
  !*** ./src/common/compounds.ts ***!
  \*********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _occt_shapes__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../occt/shapes */ "./src/occt/shapes.js");

var compounds = {
    oc: null,
    setOpenCascade: function (openCascade) {
        this.oc = openCascade;
    },
    /**
     *
     * @param shapes Array of shapes
     * @return {TopoDS_Compound}
     */
    makeCompound: function (shapes) {
        var oc = this.oc;
        // Building the Resulting Compound
        var aRes = new oc.TopoDS_Compound();
        var aBuilder = new oc.BRep_Builder();
        aBuilder.MakeCompound(aRes);
        shapes.forEach(function (shape) {
            aBuilder.Add(aRes, shape);
        });
        // aBuilder.Add(aRes, myBody.Shape());
        // aBuilder.Add(aRes, myThreading);
        return aRes;
    },
    deCompoundShape: function (shape, shapeTypeToAccept) {
        var oc = this.oc;
        shapeTypeToAccept = shapeTypeToAccept !== null && shapeTypeToAccept !== void 0 ? shapeTypeToAccept : oc.TopAbs_ShapeEnum.TopAbs_SOLID;
        var shapeType = shape.ShapeType();
        if (shapeType === shapeTypeToAccept) {
            return [shape];
        }
        if (shapeType !== oc.TopAbs_ShapeEnum.TopAbs_COMPOUND) {
            return [];
        }
        return this.listCompoundShapes(shape, shapeTypeToAccept);
    },
    deCompoundShapeMultiple: function (shape, shapeTypesToAccept) {
        var oc = this.oc;
        // If no specific types are provided, default to accepting solids
        shapeTypesToAccept = shapeTypesToAccept !== null && shapeTypesToAccept !== void 0 ? shapeTypesToAccept : [oc.TopAbs_ShapeEnum.TopAbs_SOLID];
        var shapeType = shape.ShapeType();
        // Check if the shape's type is one of the accepted types
        if (shapeTypesToAccept.includes(shapeType)) {
            return [shape];
        }
        // If the shape is not a compound, return an empty array
        if (shapeType !== oc.TopAbs_ShapeEnum.TopAbs_COMPOUND) {
            return [];
        }
        // If it's a compound, list its shapes
        return this.listCompoundShapes(shape, shapeTypesToAccept);
    },
    // filterOutWires(shapes) {
    //     let filtered = [];
    //
    //     let wireShapes =  shapes
    //         .map(shape => this.listWiresInsideCompound(shape) )
    //         .flat();
    //
    //     wireShapes.forEach(shape => {
    //         if (shape.ShapeType() === this.oc.TopAbs_ShapeEnum.TopAbs_WIRE)
    //         {
    //             filtered.push(this.oc.TopoDS.Wire_1(shape));
    //         }
    //     });
    //
    //     return filtered;
    // },
    /**
     * Lists shapes withign the compound compoundShape.
     * @param compoundShape
     * @param shapeTypeToAccept undefined by default
     * @return {*[]} List of shapes withing a given compound compoundShape
     *
     * export declare type TopAbs_ShapeEnum = {
     *   TopAbs_COMPOUND: {};
     *   TopAbs_COMPSOLID: {};
     *   TopAbs_SOLID: {};
     *   TopAbs_SHELL: {};
     *   TopAbs_FACE: {};
     *   TopAbs_WIRE: {};
     *   TopAbs_EDGE: {};
     *   TopAbs_VERTEX: {};
     *   TopAbs_SHAPE: {};
     * }
     */
    listCompoundShapes: function (compoundShape, shapeTypeToAccept) {
        var oc = this.oc;
        shapeTypeToAccept = shapeTypeToAccept !== null && shapeTypeToAccept !== void 0 ? shapeTypeToAccept : oc.TopAbs_ShapeEnum.TopAbs_SOLID;
        if (compoundShape.ShapeType() !== oc.TopAbs_ShapeEnum.TopAbs_COMPOUND) {
            throw new Error("listCompoundShapes(): Shape is not a compound. shape: ".concat(_occt_shapes__WEBPACK_IMPORTED_MODULE_0__["default"].getShapeTypeAsString(compoundShape)));
        }
        var subShapes = [];
        var anExplorer = new oc.TopExp_Explorer_1();
        for (anExplorer.Init(compoundShape, shapeTypeToAccept, oc.TopAbs_ShapeEnum.TopAbs_SHAPE); anExplorer.More(); anExplorer.Next()) {
            var current = anExplorer.Current();
            subShapes.push(current);
        }
        return subShapes;
    },
    /**
     *
     * @param shape A topo shape, compound or not
     * @return [ shape, ... ] An array of shapes, if input shape is a wire the returned array contains just the input shape
     */
    listWiresInsideCompound: function (shape) {
        var oc = this.oc;
        if (shape.ShapeType() === oc.TopAbs_ShapeEnum.TopAbs_WIRE) {
            return [shape];
        }
        return this.deCompoundShape(shape, oc.TopAbs_ShapeEnum.TopAbs_WIRE);
    },
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (compounds);


/***/ }),

/***/ "./src/common/createPromise.js":
/*!*************************************!*\
  !*** ./src/common/createPromise.js ***!
  \*************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   createPromise: () => (/* binding */ createPromise)
/* harmony export */ });
function createPromise() {
    var _resolve, _reject;
    var promise = new Promise(function (resolve, reject) {
        _resolve = resolve;
        _reject = reject;
    });
    promise.resolve = _resolve;
    promise.reject = _reject;
    return promise;
}


/***/ }),

/***/ "./src/common/featureFlags.js":
/*!************************************!*\
  !*** ./src/common/featureFlags.js ***!
  \************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
var ff = {
    sendBackNodeDebugData: true,
    sendBackShapeVerticesData: false,
    sendBackShapeUserData: true,
    attachCSGNodeToShapeResult: true
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (ff);


/***/ }),

/***/ "./src/common/fonts.js":
/*!*****************************!*\
  !*** ./src/common/fonts.js ***!
  \*****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var opentype_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! opentype.js */ "./node_modules/opentype.js/dist/opentype.module.js");
/* harmony import */ var buffer__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! buffer */ "./node_modules/buffer/index.js");
/* harmony import */ var _resources_fonts_Roboto_ttf__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../resources/fonts/Roboto.ttf */ "./src/resources/fonts/Roboto.ttf");
/* harmony import */ var _resources_fonts_Consola_ttf__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../resources/fonts/Consola.ttf */ "./src/resources/fonts/Consola.ttf");
/* harmony import */ var _resources_fonts_Consolas_ttf__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../resources/fonts/Consolas.ttf */ "./src/resources/fonts/Consolas.ttf");
/* harmony import */ var _resources_fonts_Papyrus_ttf__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../resources/fonts/Papyrus.ttf */ "./src/resources/fonts/Papyrus.ttf");






if (typeof window !== 'undefined' && window.Buffer === undefined) {
    window.Buffer = buffer__WEBPACK_IMPORTED_MODULE_1__.Buffer;
}
var fonts = {
    loadFonts: function () {
        var _this = this;
        var fontsToLoad = [
            { fontName: "Roboto", fontUrl: _resources_fonts_Roboto_ttf__WEBPACK_IMPORTED_MODULE_2__["default"] },
            { fontName: "Consola", fontUrl: _resources_fonts_Consola_ttf__WEBPACK_IMPORTED_MODULE_3__["default"] },
            { fontName: "Consolas", fontUrl: _resources_fonts_Consolas_ttf__WEBPACK_IMPORTED_MODULE_4__["default"] },
            { fontName: "Papyrus", fontUrl: _resources_fonts_Papyrus_ttf__WEBPACK_IMPORTED_MODULE_5__["default"] }
        ];
        this._loadedFonts = this._loadedFonts || {};
        var that = this;
        var isNode = typeof process !== 'undefined' && process.versions != null && process.versions.node != null;
        // Node
        if (isNode) {
            fontsToLoad.forEach(function (fontToLoad) {
                var fontUrl = fontToLoad.fontUrl, fontName = fontToLoad.fontName;
                // Assuming 'dataURI' is your base64-encoded data URI
                var base64String = fontUrl.split(',')[1]; // Split the URI and take the data part
                var buffer = buffer__WEBPACK_IMPORTED_MODULE_1__.Buffer.from(base64String, 'base64'); // Create a buffer from the base64 string
                var arrayBuffer = new Uint8Array(buffer).buffer;
                var font = opentype_js__WEBPACK_IMPORTED_MODULE_0__["default"].parse(arrayBuffer);
                if (!font) {
                    console.log("Error parsing font ".concat(fontName));
                }
                _this._loadedFonts[fontName] = font;
            });
        }
        // Browser
        else {
            fontsToLoad.forEach(function (fontToLoad) {
                var fontUrl = fontToLoad.fontUrl, fontName = fontToLoad.fontName;
                opentype_js__WEBPACK_IMPORTED_MODULE_0__["default"].load(fontUrl, function (error, font) {
                    if (error) {
                        console.log("Error loading font ".concat(fontName, " error: ").concat(error));
                    }
                    that._loadedFonts[fontName] = font;
                }, { isUrl: true });
            });
        }
        return this._loadedFonts;
    }
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (fonts);


/***/ }),

/***/ "./src/common/geometry.js":
/*!********************************!*\
  !*** ./src/common/geometry.js ***!
  \********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _openCascadeHelper_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./openCascadeHelper.js */ "./src/common/openCascadeHelper.js");
/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./utils.js */ "./src/common/utils.js");
/* harmony import */ var _vectors_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./vectors.js */ "./src/common/vectors.js");
/* harmony import */ var _occt_booleans__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../occt/booleans */ "./src/occt/booleans.ts");
/* harmony import */ var _occt_faces__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../occt/faces */ "./src/occt/faces.ts");
/* harmony import */ var _occt_shapes__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../occt/shapes */ "./src/occt/shapes.js");
/* harmony import */ var _occt_sweeps__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../occt/sweeps */ "./src/occt/sweeps.js");
/* harmony import */ var _occt_lofts__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../occt/lofts */ "./src/occt/lofts.ts");
/* harmony import */ var _occt_projections__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../occt/projections */ "./src/occt/projections.ts");
/* harmony import */ var _occt_solidOperations__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../occt/solidOperations */ "./src/occt/solidOperations.ts");
/* harmony import */ var _occt_boundingBoxes__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../occt/boundingBoxes */ "./src/occt/boundingBoxes.ts");
/* harmony import */ var _occt_texts__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../occt/texts */ "./src/occt/texts.ts");
/* harmony import */ var _occt_occtio__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ../occt/occtio */ "./src/occt/occtio.ts");
/* harmony import */ var _compounds__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./compounds */ "./src/common/compounds.ts");
/* harmony import */ var _wires_js__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./wires.js */ "./src/common/wires.js");
/* harmony import */ var _wireToSolid_js__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ./wireToSolid.js */ "./src/common/wireToSolid.js");
/* harmony import */ var _math__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ./math */ "./src/common/math.js");
/* harmony import */ var _common_visualize__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ../common/visualize */ "./src/common/visualize.js");


















var geometry = {
    setOpenCascade: function (openCascade) {
        _openCascadeHelper_js__WEBPACK_IMPORTED_MODULE_0__["default"].setOpenCascade(openCascade);
        this.openCascade = openCascade;
        _utils_js__WEBPACK_IMPORTED_MODULE_1__["default"].setOpenCascade(openCascade);
        _vectors_js__WEBPACK_IMPORTED_MODULE_2__["default"].setOpenCascade(openCascade);
        _occt_booleans__WEBPACK_IMPORTED_MODULE_3__["default"].setOpenCascade(openCascade);
        _occt_faces__WEBPACK_IMPORTED_MODULE_4__["default"].setOpenCascade(openCascade);
        _occt_shapes__WEBPACK_IMPORTED_MODULE_5__["default"].setOpenCascade(openCascade);
        _occt_sweeps__WEBPACK_IMPORTED_MODULE_6__["default"].setOpenCascade(openCascade);
        _occt_lofts__WEBPACK_IMPORTED_MODULE_7__["default"].setOpenCascade(openCascade);
        _compounds__WEBPACK_IMPORTED_MODULE_13__["default"].setOpenCascade(openCascade);
        _wires_js__WEBPACK_IMPORTED_MODULE_14__["default"].setOpenCascade(openCascade);
        _wireToSolid_js__WEBPACK_IMPORTED_MODULE_15__["default"].setOpenCascade(openCascade);
        _common_visualize__WEBPACK_IMPORTED_MODULE_17__["default"].setOpenCascade(openCascade);
        _occt_projections__WEBPACK_IMPORTED_MODULE_8__["default"].setOpenCascade(openCascade);
        _occt_solidOperations__WEBPACK_IMPORTED_MODULE_9__["default"].setOpenCascade(openCascade);
        _occt_boundingBoxes__WEBPACK_IMPORTED_MODULE_10__["default"].setOpenCascade(openCascade);
        _occt_texts__WEBPACK_IMPORTED_MODULE_11__["default"].setOpenCascade(openCascade);
        _occt_occtio__WEBPACK_IMPORTED_MODULE_12__["default"].setOpenCascade(openCascade);
        this.utils = _utils_js__WEBPACK_IMPORTED_MODULE_1__["default"];
        this.vectors = _vectors_js__WEBPACK_IMPORTED_MODULE_2__["default"];
        this.booleans = _occt_booleans__WEBPACK_IMPORTED_MODULE_3__["default"];
        this.faces = _occt_faces__WEBPACK_IMPORTED_MODULE_4__["default"];
        this.shapes = _occt_shapes__WEBPACK_IMPORTED_MODULE_5__["default"];
        this.sweeps = _occt_sweeps__WEBPACK_IMPORTED_MODULE_6__["default"];
        this.lofts = _occt_lofts__WEBPACK_IMPORTED_MODULE_7__["default"];
        this.texts = _occt_texts__WEBPACK_IMPORTED_MODULE_11__["default"];
        this.occtio = _occt_occtio__WEBPACK_IMPORTED_MODULE_12__["default"];
        this.compounds = _compounds__WEBPACK_IMPORTED_MODULE_13__["default"];
        this.wires = _wires_js__WEBPACK_IMPORTED_MODULE_14__["default"];
        this.wireToSolid = _wireToSolid_js__WEBPACK_IMPORTED_MODULE_15__["default"];
        this.visualize = _common_visualize__WEBPACK_IMPORTED_MODULE_17__["default"];
        this.projections = _occt_projections__WEBPACK_IMPORTED_MODULE_8__["default"];
        this.solidOperations = _occt_solidOperations__WEBPACK_IMPORTED_MODULE_9__["default"];
        this.boundingBoxes = _occt_boundingBoxes__WEBPACK_IMPORTED_MODULE_10__["default"];
    },
    makeIntoSingleMesh_My: function (shape, addEdges, theLinDeflection, theAngDeflection) {
        var oc = this.openCascade;
        var shapes = this.compounds.deCompoundShapeMultiple(shape, [
            oc.TopAbs_ShapeEnum.TopAbs_SOLID,
            oc.TopAbs_ShapeEnum.TopAbs_SHELL,
            oc.TopAbs_ShapeEnum.TopAbs_FACE,
            oc.TopAbs_ShapeEnum.TopAbs_WIRE,
            oc.TopAbs_ShapeEnum.TopAbs_EDGE
        ]);
        var facelist = [];
        shapes.forEach(function (ss) {
            var shapeFacelist = _openCascadeHelper_js__WEBPACK_IMPORTED_MODULE_0__["default"].tessellate(ss, theLinDeflection, theAngDeflection);
            facelist = facelist.concat(shapeFacelist);
        });
        var faces = facelist.map(function (face) {
            var vectors = [];
            for (var i = 0; i < face.vertex_coord.length; i += 3) {
                var vector = {
                    x: face.vertex_coord[i],
                    y: face.vertex_coord[i + 1],
                    z: face.vertex_coord[i + 2]
                };
                vectors.push(vector);
            }
            return {
                vertex_coord: vectors,
                vertexCount: vectors.length,
                // tri_indexes: triangles,
                // tri_indexes: [],
                tri_indexes: face.tri_indexes.map(function (index) { return index - 1; }),
                tri_indexesCount: face.tri_indexes.length,
                // number_of_triangles: tot_triangle_count,
            };
        });
        var edges = [];
        if (addEdges) {
            edges = facelist
                .map(function (face) { return face.edgeList; }).flat()
                .map(function (edge, index) {
                edge.original_edge_index = edge.edge_index;
                edge.edge_index = index;
                var vectors = [];
                for (var i = 0; i < edge.vertex_coord.length; i += 3) {
                    var vector = {
                        x: edge.vertex_coord[i],
                        y: edge.vertex_coord[i + 1],
                        z: edge.vertex_coord[i + 2]
                    };
                    vectors.push(vector);
                }
                edge.vertex_coord = vectors;
                return edge;
            });
        }
        var facesEdgesAlreadyAdded = edges.length > 0;
        if (addEdges && !facesEdgesAlreadyAdded) {
            var edgeList = _common_visualize__WEBPACK_IMPORTED_MODULE_17__["default"].ShapeToEdges(shape, theLinDeflection, theAngDeflection).edgeList;
            edges = edges.concat(edgeList);
        }
        return { faces: faces, edges: edges };
        // return { faces: [face] }
    },
    getShapePosition_gp_XYZ: function (shape) {
        var oc = this.openCascade;
        if (shape.ShapeType() === oc.TopAbs_ShapeEnum.TopAbs_VERTEX) {
            var vertex = this.shapes.getActualTypeOfShape(shape);
            var pnt = oc.BRep_Tool.Pnt(vertex);
            return pnt.XYZ();
        }
        var shapeTranslationPart_gp_XYZ = shape.Location_1().Transformation().TranslationPart();
        return shapeTranslationPart_gp_XYZ;
    },
    getShapeRotation_gp_Quaternion: function (shape) {
        var rotation_gp_Quaternion = shape.Location_1().Transformation().GetRotation_2();
        return rotation_gp_Quaternion;
    },
    /**
     * Taken from: https://www.euclideanspace.com/maths/geometry/rotations/conversions/quaternionToAngle/index.htm
     * @param q
     * @return { angle: Number, axis:[x, y, z] }
     */
    getQuaternionAngleAxis_Custom: function (q) {
        // //// console.log(`quaternion is q.X: ${q.X()} q.Y: ${q.Y()} q.Z: ${q.Z()} q.W: ${q.W()}`)
        var oc = this.openCascade;
        var angleRad = 2 * Math.acos(q.W());
        var s = Math.sqrt(1 - q.W() * q.W());
        // case where angle is 0 (qw == 0)
        if (s === 0)
            s = 1;
        var axisX = q.X() / s;
        var axisY = q.Y() / s;
        var axisZ = q.Z() / s;
        if (s === 0)
            axisX = 1;
        return { angle: angleRad, axis: [axisX, axisY, axisZ] };
    },
    getQuaternionAngleAxis: function (q) {
        // //// console.log(`quaternion is q.X: ${q.X()} q.Y: ${q.Y()} q.Z: ${q.Z()} q.W: ${q.W()}`)
        var oc = this.openCascade;
        var ref_vec = new oc.gp_Vec_1();
        var ref_angle = { current: 0 };
        q.GetVectorAndAngle(ref_vec, ref_angle);
        return { angle: ref_angle.current, axis: [ref_vec.X(), ref_vec.Y(), ref_vec.Z()] };
    },
    /**
     *
     * @param points An array of arrays. Each sub array is a 3d point [[x,y,z], [x,y,z], (...)]
     * @returns {TopoDS_Compound}
     */
    makePolygon: function (points) {
        if (points.length < 3)
            throw new Error('Cannot make polygon out of less than 3 points.');
        if (points.length < 4)
            throw new Error('Cannot make polygon out of more than 4 points.');
        var openCascade = this.openCascade;
        var builder = new openCascade.BRep_Builder();
        var aComp = new openCascade.TopoDS_Compound();
        builder.MakeCompound(aComp);
        // const path = [[-50, 0, 0], [50, 0, 0], [50, 100, 0]].map(([x, y, z]) => new openCascade.gp_Pnt_3(x, y, z));
        var path = points.map(function (_a) {
            var x = _a[0], y = _a[1], z = _a[2];
            return new openCascade.gp_Pnt_3(x, y, z);
        });
        var makePolygon = points.length === 3
            ? new openCascade.BRepBuilderAPI_MakePolygon_3(path[0], path[1], path[2], true)
            : new openCascade.BRepBuilderAPI_MakePolygon_4(path[0], path[1], path[2], path[3], true);
        var wire = makePolygon.Wire();
        var f = new openCascade.BRepBuilderAPI_MakeFace_15(wire, false);
        builder.Add(aComp, f.Shape());
        return aComp;
    },
    makeSphere: function (x, y, z, radius) {
        var oc = this.openCascade;
        var p = new oc.gp_Pnt_3(0, 0, 0);
        var sphereShape = new oc.BRepPrimAPI_MakeSphere_5(p, radius).Shape();
        sphereShape = this.doTranslate(sphereShape, [x, y, z]);
        return sphereShape;
    },
    /**
     * Creates a cylinder shape.
     *
     * @param a [x,y,z] start point
     * @param b [x,y,z] end point
     * @param radius radius float radius value
     * @returns {any} cylinder shape
     */
    makeCylinderAB: function (a, b, radius) {
        var oc = this.openCascade;
        // export declare class gp_Ax2_3 extends gp_Ax2 {
        //         constructor(P: gp_Pnt, V: gp_Dir);
        //     }
        // export declare class gp_Dir_4 extends gp_Dir {
        //         constructor(theXv: Standard_Real, theYv: Standard_Real, theZv: Standard_Real);
        //     }
        var pA = new oc.gp_Pnt_3(a[0], a[1], a[2]);
        var pB = new oc.gp_Pnt_3(b[0], b[1], b[2]);
        var pCenter = pA.XYZ().Add(pB.XYZ());
        pCenyer.Muliply(0.5);
        pA = new oc.gp_Pnt_2(pA.XYZ().Subtract(pCenter));
        pB = new oc.gp_Pnt_2(pB.XYZ().Subtract(pCenter));
        var dir = new oc.gp_Dir_4(b[0] - a[0], b[1] - a[1], b[2] - a[2]);
        var axis = new oc.gp_Ax2_3(pA, dir);
        var height = pA.Distance(pB);
        var cylinderShape = new oc.BRepPrimAPI_MakeCylinder_3(axis, radius.height).Shape();
        cylinderShape = this.doTranslate(cylinderShape, [pCenter.X(), pCenter.Y(), pCenter.Z()]);
        return cylinderShape;
    },
    /**
     * Creates a cylinder shape.
     *
     * @param a [x,y,z] start point
     * @param dir [x,y,z] cylinder main axis direction vector
     * @param radius float radius value
     * @param radius float height value
     * @returns {any} cylinder shape
     */
    makeCylinder: function (a, dir, radius, height) {
        var oc = this.openCascade;
        // export declare class gp_Ax2_3 extends gp_Ax2 {
        //         constructor(P: gp_Pnt, V: gp_Dir);
        //     }
        // export declare class gp_Dir_4 extends gp_Dir {
        //         constructor(theXv: Standard_Real, theYv: Standard_Real, theZv: Standard_Real);
        //     }
        // let gp_p = new oc.gp_Pnt_3(a[0], a[1], a[2]);
        var gp_p = new oc.gp_Pnt_3(0, 0, 0);
        var gp_dir = new oc.gp_Dir_4(dir[0], dir[1], dir[2]);
        var axis = new oc.gp_Ax2_3(gp_p, gp_dir);
        var cylinderShape = new oc.BRepPrimAPI_MakeCylinder_3(axis, radius, height).Shape();
        cylinderShape = this.doTranslate(cylinderShape, a);
        return cylinderShape;
    },
    makeBox: function (px, py, pz, width, height, depth, pivotX, pivotY, pivotZ) {
        var oc = this.openCascade;
        var ix = depth * pivotX * -1;
        var iy = width * pivotY * -1;
        var iz = height * pivotZ * -1;
        var p = new oc.gp_Pnt_3(ix, iy, iz);
        // let shape = new oc.BRepPrimAPI_MakeBox_3(p, width, height, depth).Shape();
        var shape = new oc.BRepPrimAPI_MakeBox_3(p, depth, width, height).Shape();
        shape = this.doTranslate(shape, [px, py, pz]);
        return shape;
    },
    /**
     *
     * @param normal
     * @param point
     * @param w
     * @param h
     * @param px pivot x (normalised)
     * @param py pivot y (normalised)
     * @returns {TopoDS_Compound}
     */
    makePlane: function (normal, point, w, h, px, py) {
        var oc = this.openCascade;
        // quad in XY plane
        var points = [
            [-w * px, -h * py, 0],
            [w * px, -h * py, 0],
            [w * px, h * py, 0],
            [-w * px, h * py, 0]
        ];
        var from = new oc.gp_Vec_4(0, 0, 1);
        var to = new oc.gp_Vec_4(normal[0], normal[1], normal[2]);
        var rotate = new oc.gp_Quaternion_3(from, to);
        var polygon = this.makePolygon(points);
        _occt_shapes__WEBPACK_IMPORTED_MODULE_5__["default"].rotate_gp_Quaternion(polygon, rotate);
        _occt_shapes__WEBPACK_IMPORTED_MODULE_5__["default"].translate(polygon, point);
        return polygon;
    },
    diff: function (shapeA, shapeB, cut) {
        var oc = this.openCascade;
        var progressRange = new oc.Message_ProgressRange_1();
        var args = new oc.TopTools_ListOfShape_1();
        args.Append_1(shapeA);
        var tools = new oc.TopTools_ListOfShape_1();
        tools.Append_1(shapeB);
        cut.SetFuzzyValue(0.1);
        cut.SetArguments(args);
        cut.SetTools(tools);
        cut.Build(progressRange);
        if (cut.HasErrors()) {
            throw new Error("Cut operation resulted with error(s).");
        }
        return cut.Shape();
    },
    makeDifference: function (mainShape, shapesToSubtract, keepEdges, onProgress) {
        var _this = this;
        var oc = this.openCascade;
        keepEdges = keepEdges || true;
        if (!mainShape || mainShape.IsNull()) {
            throw new Error("makeDifference: mainShape is null");
        }
        var cut = new oc.BRepAlgoAPI_Cut_1();
        var explodedShapesToSubtract = shapesToSubtract
            .map(function (shape) { return _this.compounds.deCompoundShape(shape); })
            .flat(1);
        var difference = mainShape;
        for (var i = 0; i < explodedShapesToSubtract.length; i++) {
            difference = this.diff(difference, explodedShapesToSubtract[i], cut);
        }
        if (!keepEdges) {
            var fusor = new oc.ShapeUpgrade_UnifySameDomain_2(difference, true, false, false);
            fusor.Build();
            difference = fusor.Shape();
        }
        return difference;
    },
    /**
     *
     * @param mainShapes Array of shapes
     * @param shapesToSubtract
     * @param keepEdges
     * @param onProgress
     * @return {TopoDS_Shape}
     */
    makeDifferenceMulti: function (mainShapes, shapesToSubtract, keepEdges, onProgress) {
        var _this = this;
        var oc = this.openCascade;
        keepEdges = keepEdges || true;
        mainShapes = mainShapes.map(function (shape) { return _this.compounds.deCompoundShape(shape); })
            .flat(1);
        var results = [];
        for (var i = 0; i < mainShapes.length; i++) {
            var result = this.makeDifference(mainShapes[i], shapesToSubtract, keepEdges);
            results.push(result);
        }
        // // console.log("mainShapes: ",mainShapes.length);
        // // console.log("results: ",results.length);
        return results.length > 1
            ? this.compounds.makeCompound(results)
            : results[0];
    },
    makeIntersection: function (objectsToIntersect, fuzzValue, keepEdges) {
        var oc = this.openCascade;
        if (!fuzzValue) {
            fuzzValue = 0.1;
        }
        var intersected = objectsToIntersect[0];
        if (objectsToIntersect.length > 1) {
            for (var i = 1; i < objectsToIntersect.length; i++) {
                var progressRange = new oc.Message_ProgressRange_1();
                var intersectedCommon = new oc.BRepAlgoAPI_Common_3(intersected, objectsToIntersect[i], progressRange);
                //
                // intersectedCommon.SetFuzzyValue(fuzzValue);
                // intersectedCommon.Build(progressRange);
                intersected = intersectedCommon.Shape();
            }
        }
        if (!keepEdges) {
            var fusor = new oc.ShapeUpgrade_UnifySameDomain_2(intersected, true, false, false);
            fusor.Build();
            intersected = fusor.Shape();
        }
        return intersected;
    },
    makeSplit: function (shape, tool) {
        var oc = this.openCascade;
        var splitter = new oc.BOPAlgo_Splitter_1();
        var args = new oc.TopTools_ListOfShape_1();
        args.Append_1(shape);
        var tools = new oc.TopTools_ListOfShape_1();
        tools.Append_1(tool);
        // splitter.SetFuzzyValue(0.1);
        splitter.SetArguments(args);
        splitter.SetTools(tools);
        var progressRange = new oc.Message_ProgressRange_1();
        splitter.Perform(progressRange);
        if (splitter.HasErrors()) {
            throw new Error("Split operation resulted in errors.");
        }
        var splittedShape = splitter.Shape();
        return splittedShape;
    },
    /**
     *
     * @param shape TopoDS_Shape to split.
     * @param tool TopoDS_Shape plane.
     * @param planePoint [x,y,z] plane point.
     * @param planeNormal [x,y,z] plane normal vector.
     * @returns {TopoDS_Shape} A compound shape holding all split result shapes that were on the positive side of the plane.
     */
    makeSplitWithPlane: function (shape, tool, planePoint, planeNormal) {
        var _this = this;
        var oc = this.openCascade;
        var splittedShape = this.makeSplit(shape, tool);
        // return splittedShape;
        if (splittedShape.ShapeType() !== oc.TopAbs_ShapeEnum.TopAbs_COMPOUND) {
            throw new Error("makeSplitWithPlane() did not produce a compound shape. No actual split happened.");
            // return shape;
        }
        // now lets drop off the "plane's negative side" split result shape
        var positiveSubShapes = [];
        var negativeSubShapes = [];
        var onPlaneSubShapes = [];
        var subShapes = this.compounds.listCompoundShapes(splittedShape);
        subShapes.forEach(function (subShape) {
            var planeRelation = _this.shapes.getShapeToPlaneOrientation(subShape, planePoint, planeNormal);
            //// console.log("planeRelation.isPositive: "+planeRelation.isPositive+" planeRelation.isNegative: "+planeRelation.isNegative);
            if (planeRelation.isPositive) {
                positiveSubShapes.push(subShape);
                //// console.log("adding positive sub shape")
            }
            else if (planeRelation.isNegative) {
                negativeSubShapes.push(subShape);
                //// console.log("adding negative sub shape")
            }
            else if (planeRelation.isAllOnPlane) {
                onPlaneSubShapes.push(subShape);
                //// console.log("adding onPlane sub shape")
            }
        });
        if (positiveSubShapes.length === 0) {
            throw new Error("No positive shapes has been found in split results shapes.");
        }
        //// console.log("returning positiveCompound from positiveSubShapes: "+positiveSubShapes.length);
        var positiveCompound = this.compounds.makeCompound(positiveSubShapes);
        return positiveCompound;
    },
    /**
     * Creates a face on XY plane.
     * @param lines List of lines where each line is { a: [x,y,z], b: [x,y,z] }
     * @param point [x, y, z] where to position the face
     * @param notrmal [x, y, z] how to rotate the face so that inital face normal (Z forward) becomes same as normal
     */
    makeFaceFromLinesAndPlane: function (lines, point, normal, planeRotationZ) {
        var oc = this.openCascade;
        /// 1 - Create face
        var wires = lines.map(function (line) {
            // support points
            var pa = new oc.gp_Pnt_3(line.a[0], line.a[1], line.a[2]);
            var pb = new oc.gp_Pnt_3(line.b[0], line.b[1], line.b[2]);
            // geometry
            var segment = new oc.GC_MakeSegment_1(pa, pb);
            // topology
            var edge = new oc.BRepBuilderAPI_MakeEdge_24(new openCascade.Handle_Geom_Curve_2(segment.Value().get()));
            var wire = new oc.BRepBuilderAPI_MakeWire_2(edge.Edge());
            return wire;
        });
        var mkWire = new oc.BRepBuilderAPI_MakeWire_1();
        wires.forEach(function (wire) { return mkWire.Add_2(wire.Wire()); });
        var wireProfile = mkWire.Wire();
        var faceProfile = new oc.BRepBuilderAPI_MakeFace_15(wireProfile, false);
        var face = faceProfile.Face();
        /// 2 - Position and orient face
        var zAxisVec = new oc.gp_Vec_4(0, 0, 1);
        var zAngleRad = _math__WEBPACK_IMPORTED_MODULE_16__["default"].degToRad(planeRotationZ);
        var rotateZ = new oc.gp_Quaternion_5(zAxisVec, zAngleRad);
        this.shapes.rotate_gp_Quaternion(face, rotateZ);
        var from = new oc.gp_Vec_4(0, 0, 1);
        var to = new oc.gp_Vec_4(normal[0], normal[1], normal[2]);
        var rotate = new oc.gp_Quaternion_3(from, to);
        this.shapes.rotate_gp_Quaternion(face, rotate);
        this.shapes.translate(face, point);
        return face;
    },
    /**
     * Creates a face from wires.
     * @param wireShapes List of wires
     */
    makeFaceFromWires: function (wireShapes) {
        var oc = this.openCascade;
        // // console.log("makeFaceFromWires oc: ", oc);
        wireShapes = wireShapes.map(function (wireShape) { return _compounds__WEBPACK_IMPORTED_MODULE_13__["default"].listWiresInsideCompound(wireShape); }).flat(1);
        var mkWire = new oc.BRepBuilderAPI_MakeWire_1();
        var index = 0;
        wireShapes.forEach(function (wireShape) {
            // console.log(`### checking wire[${index++}]: ${this.shapes.getShapeTypeAsString(wireShape)}`);
            // let wire = this.wires.listWiresFromShape(wireShape);
            // wireShape = compounds.listWiresInsideCompound(wireShape)[0];
            var wire = new oc.TopoDS.Wire_1(wireShape);
            if (index == 1) {
                wire.Reverse();
            }
            mkWire.Add_2(wire);
        });
        var face = undefined;
        try {
            var wireProfile = mkWire.Wire();
            // console.log("makeFaceFromWires wireProfile: ", wireProfile);
            var faceProfile = new oc.BRepBuilderAPI_MakeFace_15(wireProfile, false);
            face = faceProfile.Face();
            // console.log("makeFaceFromWires face: ", face);
        }
        catch (error) {
            console.error("Wire error: ", error.message);
        }
        /// 2 - Position and orient face
        // const zAxisVec = new oc.gp_Vec_4(0,0,1);
        // const zAngleRad = math.degToRad(planeRotationZ);
        // let rotateZ = new oc.gp_Quaternion_5(zAxisVec, zAngleRad);
        // this.shapes.rotate_gp_Quaternion(face, rotateZ);
        // let from = new oc.gp_Vec_4(0, 0, 1);
        // let to = new oc.gp_Vec_4(normal[0], normal[1], normal[2]);
        // let rotate = new oc.gp_Quaternion_3(from, to);
        // this.shapes.rotate_gp_Quaternion(face, rotate);
        // this.shapes.translate(face, point);
        return face;
    },
    /**
     *
     * @param shape
     * @param offset
     */
    makeOffset: function (shape, offset, mode) {
        var oc = this.openCascade;
        shape = this.makeClone(shape);
        var progressRange = new oc.Message_ProgressRange_1();
        // let thickener = new oc.BRepOffsetAPI_MakeThickSolid();
        // thickener.MakeThickSolidBySimple(shape, offset);
        // thickener.Build(progressRange);
        var thickener = new oc.BRepOffsetAPI_MakeOffsetShape();
        // thickener.PerformBySimple(theS: TopoDS_Shape, theOffsetValue: Standard_Real): void;
        if (mode === 3) {
            thickener.PerformBySimple(shape, offset);
        }
        else {
            // // PerformByJoin(S: TopoDS_Shape, Offset: Standard_Real, Tol: Standard_Real, Mode: BRepOffset_Mode, Intersection: Standard_Boolean, SelfInter: Standard_Boolean, Join: GeomAbs_JoinType, RemoveIntEdges: Standard_Boolean, theRange: Message_ProgressRange): void;
            thickener.PerformByJoin(shape, offset, oc.Precision.Confusion(), oc.BRepOffset_Mode.BRepOffset_Skin, false, false, mode == 0 ? oc.GeomAbs_JoinType.GeomAbs_Arc : oc.GeomAbs_JoinType.GeomAbs_Intersection, false, progressRange);
        }
        var thickened = thickener.Shape();
        return thickened;
    },
    makeClone: function (shape) {
        var oc = this.openCascade;
        var copy = new oc.BRepBuilderAPI_Copy_1();
        copy.Perform(shape, false, false);
        var copied = copy.Shape();
        return copied;
        // return shape;
    },
    /**
     *
     * @param shape
     * @returns {*[]} [shape, ... ] an array of shapes of compound
     */
    explodeCompound: function (shape) {
        var oc = this.openCascade;
        if (shape.ShapeType() !== oc.TopAbs_ShapeEnum.TopAbs_COMPOUND) {
            return [shape];
        }
        var shapes = this.compounds.listCompoundShapes(shape);
        return shapes;
    },
    /**
     *
     * @param shape
     * @param offset [x, y, z] 3d vector in form of an array
     * @returns {TopoDS_Shape}
     */
    makeTranslate: function (shape, offset) {
        var oc = this.openCascade;
        var transformation = new oc.gp_Trsf_1();
        transformation.SetTranslation_1(new oc.gp_Vec_4(offset[0], offset[1], offset[2]));
        var translation = new oc.TopLoc_Location_2(transformation);
        var translated = shape.Moved(translation, true);
        return translated;
    },
    /**
     *
     * @param shape
     * @param offset [x,y,z]
     * @returns {*}
     */
    doTranslate: function (shape, offset) {
        var oc = this.openCascade;
        var transformation = new oc.gp_Trsf_1();
        transformation.SetTranslation_1(new oc.gp_Vec_4(offset[0], offset[1], offset[2]));
        var translation = new oc.TopLoc_Location_2(transformation);
        shape.Move(translation, true);
        return shape;
    },
    /**
     *
     * @param shape
     * @param scale [x, y, z] 3d vector in form of an array
     * @returns {Handle_TCollection_HAsciiString | TopoDS_Shape}
     */
    makeScale: function (shape, scale) {
        //// console.log(`trying to scale a shape ${shape} with scale: ${scale}`)
        var oc = this.openCascade;
        var shapeTranslationPart_gp_XYZ = this.getShapePosition_gp_XYZ(shape);
        // //// console.log(`shape position is ${shapeTranslationPart_gp_XYZ}`);
        // //// console.log(`shape position as array is ${[shapeTranslationPart_gp_XYZ.X(), shapeTranslationPart_gp_XYZ.Y(), shapeTranslationPart_gp_XYZ.Z()]}`);
        var px = shapeTranslationPart_gp_XYZ.X();
        var py = shapeTranslationPart_gp_XYZ.Y();
        var pz = shapeTranslationPart_gp_XYZ.Z();
        var mIdentity = new oc.gp_Mat_1();
        mIdentity.SetIdentity();
        var gtrsf_backToOrigin = new oc.gp_GTrsf_3(mIdentity, new oc.gp_XYZ_2(-px, -py, -pz));
        var gtrsf_backToPosition = new oc.gp_GTrsf_3(mIdentity, new oc.gp_XYZ_2(px, py, pz));
        var m = new oc.gp_Mat_1();
        m.SetDiagonal(scale[0], scale[1], scale[2]);
        var gtrsf_scale = new oc.gp_GTrsf_3(m, new oc.gp_XYZ_2(0, 0, 0));
        var gtrsf = gtrsf_backToPosition.Multiplied(gtrsf_scale).Multiplied(gtrsf_backToOrigin);
        var builder = new oc.BRepBuilderAPI_GTransform_2(shape, gtrsf, true);
        var scaled = builder.Shape();
        return scaled;
    },
    /**
     *
     * @param shape
     * @param point [x, y, z] rotation center
     * @param axis [x, y, z]
     * @param angleRad angle in radians
     */
    makeRotation: function (shape, axis, angleRad) {
        var oc = this.openCascade;
        //// console.log(`makeRotation with shape: ${shape} axis: ${axis} angleRad: ${angleRad}`);
        var aroundShapePosition = false;
        var shapePosition_gp_XYZ = this.getShapePosition_gp_XYZ(shape);
        var p = aroundShapePosition
            ? new oc.gp_Pnt_2(shapePosition_gp_XYZ)
            : new oc.gp_Pnt_3(0, 0, 0);
        // let p = new oc.gp_Pnt_3(point[0], point[1], point[2]);
        var dir = new oc.gp_Dir_4(axis[0], axis[1], axis[2]);
        var qAxis = new oc.gp_Ax1_2(p, dir);
        var transformation = new oc.gp_Trsf_1();
        transformation.SetRotation_1(qAxis, angleRad);
        var location = new oc.TopLoc_Location_2(transformation);
        var rotated = shape.Moved(location, true);
        return rotated;
    },
    /**
     *
     * @param shape
     * @param point [x, y, z] A rotation center
     * @param axis [x, y, z]
     * @param angleRad angle in radians
     */
    makeRotationAround: function (shape, center, axis, angleRad) {
        var oc = this.openCascade;
        //// console.log(`makeRotation with shape: ${shape} axis: ${axis} angleRad: ${angleRad}`);
        var shapePosition_gp_XYZ = this.getShapePosition_gp_XYZ(shape);
        var p = new oc.gp_Pnt_3(point[0], point[1], point[2]);
        var dir = new oc.gp_Dir_4(axis[0], axis[1], axis[2]);
        var qAxis = new oc.gp_Ax1_2(p, dir);
        var transformation = new oc.gp_Trsf_1();
        transformation.SetRotation_1(qAxis, angleRad);
        var location = new oc.TopLoc_Location_2(transformation);
        var rotated = shape.Moved(location, true);
        return rotated;
    },
    doRotate: function (shape, axis, angleRad) {
        var oc = this.openCascade;
        //// console.log(`makeRotation with shape: ${shape} axis: ${axis} angleRad: ${angleRad}`);
        var shapePosition_gp_XYZ = this.getShapePosition_gp_XYZ(shape);
        var p = new oc.gp_Pnt_2(shapePosition_gp_XYZ);
        var dir = new oc.gp_Dir_4(axis[0], axis[1], axis[2]);
        var qAxis = new oc.gp_Ax1_2(p, dir);
        var transformation = new oc.gp_Trsf_1();
        transformation.SetRotation_1(qAxis, angleRad);
        var location = new oc.TopLoc_Location_2(transformation);
        var rotated = shape.Move(location, true);
        return rotated;
    },
    resetLocation: function (shape) {
        // let oc  = this.openCascade;
        var inverted = shape.Location_1().Inverted();
        var originated = shape.Moved(inverted, true);
        return originated;
    },
    makeBottle: function (myWidth, myHeight, myThickness) {
        //// console.log("makeBottle myWidth: ", myWidth)
        //// console.log("makeBottle myHeight: ", myHeight)
        //// console.log("makeBottle myThickness: ", myThickness)
        var openCascade = this.openCascade;
        // Profile : Define Support Points
        var aPnt1 = new openCascade.gp_Pnt_3(-myWidth / 2., 0, 0);
        var aPnt2 = new openCascade.gp_Pnt_3(-myWidth / 2., -myThickness / 4., 0);
        var aPnt3 = new openCascade.gp_Pnt_3(0, -myThickness / 2., 0);
        var aPnt4 = new openCascade.gp_Pnt_3(myWidth / 2., -myThickness / 4., 0);
        var aPnt5 = new openCascade.gp_Pnt_3(myWidth / 2., 0, 0);
        // Profile : Define the Geometry
        var anArcOfCircle = new openCascade.GC_MakeArcOfCircle_4(aPnt2, aPnt3, aPnt4);
        var aSegment1 = new openCascade.GC_MakeSegment_1(aPnt1, aPnt2);
        var aSegment2 = new openCascade.GC_MakeSegment_1(aPnt4, aPnt5);
        // Profile : Define the Topology
        var anEdge1 = new openCascade.BRepBuilderAPI_MakeEdge_24(new openCascade.Handle_Geom_Curve_2(aSegment1.Value().get()));
        var anEdge2 = new openCascade.BRepBuilderAPI_MakeEdge_24(new openCascade.Handle_Geom_Curve_2(anArcOfCircle.Value().get()));
        var anEdge3 = new openCascade.BRepBuilderAPI_MakeEdge_24(new openCascade.Handle_Geom_Curve_2(aSegment2.Value().get()));
        var aWire = new openCascade.BRepBuilderAPI_MakeWire_4(anEdge1.Edge(), anEdge2.Edge(), anEdge3.Edge());
        // Complete Profile
        var xAxis = openCascade.gp.OX();
        var aTrsf = new openCascade.gp_Trsf_1();
        aTrsf.SetMirror_2(xAxis);
        var aBRepTrsf = new openCascade.BRepBuilderAPI_Transform_2(aWire.Wire(), aTrsf, false);
        var aMirroredShape = aBRepTrsf.Shape();
        var mkWire = new openCascade.BRepBuilderAPI_MakeWire_1();
        mkWire.Add_2(aWire.Wire());
        mkWire.Add_2(openCascade.TopoDS.Wire_1(aMirroredShape));
        var myWireProfile = mkWire.Wire();
        // Body : Prism the Profile
        var myFaceProfile = new openCascade.BRepBuilderAPI_MakeFace_15(myWireProfile, false);
        var aPrismVec = new openCascade.gp_Vec_4(0, 0, myHeight);
        var myBody = new openCascade.BRepPrimAPI_MakePrism_1(myFaceProfile.Face(), aPrismVec, false, true);
        // Body : Apply Fillets
        var mkFillet = new openCascade.BRepFilletAPI_MakeFillet(myBody.Shape(), openCascade.ChFi3d_FilletShape.ChFi3d_Rational);
        var anEdgeExplorer = new openCascade.TopExp_Explorer_2(myBody.Shape(), openCascade.TopAbs_ShapeEnum.TopAbs_EDGE, openCascade.TopAbs_ShapeEnum.TopAbs_SHAPE);
        while (anEdgeExplorer.More()) {
            var anEdge = openCascade.TopoDS.Edge_1(anEdgeExplorer.Current());
            // Add edge to fillet algorithm
            mkFillet.Add_2(myThickness / 12., anEdge);
            anEdgeExplorer.Next();
        }
        myBody = mkFillet.Shape();
        // Body : Add the Neck
        var neckLocation = new openCascade.gp_Pnt_3(0, 0, myHeight);
        var neckAxis = openCascade.gp.DZ();
        var neckAx2 = new openCascade.gp_Ax2_3(neckLocation, neckAxis);
        var myNeckRadius = myThickness / 4.;
        var myNeckHeight = myHeight / 10.;
        var MKCylinder = new openCascade.BRepPrimAPI_MakeCylinder_3(neckAx2, myNeckRadius, myNeckHeight);
        var myNeck = MKCylinder.Shape();
        myBody = new openCascade.BRepAlgoAPI_Fuse_3(myBody, myNeck, new openCascade.Message_ProgressRange_1());
        // Body : Create a Hollowed Solid
        var faceToRemove;
        var zMax = -1;
        var aFaceExplorer = new openCascade.TopExp_Explorer_2(myBody.Shape(), openCascade.TopAbs_ShapeEnum.TopAbs_FACE, openCascade.TopAbs_ShapeEnum.TopAbs_SHAPE);
        for (; aFaceExplorer.More(); aFaceExplorer.Next()) {
            var aFace = openCascade.TopoDS.Face_1(aFaceExplorer.Current());
            // Check if <aFace> is the top face of the bottle's neck 
            var aSurface = openCascade.BRep_Tool.Surface_2(aFace);
            if (aSurface.get().$$.ptrType.name === "Geom_Plane*") {
                var aPlane = new openCascade.Handle_Geom_Plane_2(aSurface.get()).get();
                var aPnt_1 = aPlane.Location();
                var aZ = aPnt_1.Z();
                if (aZ > zMax) {
                    zMax = aZ;
                    faceToRemove = new openCascade.TopExp_Explorer_2(aFace, openCascade.TopAbs_ShapeEnum.TopAbs_FACE, openCascade.TopAbs_ShapeEnum.TopAbs_SHAPE).Current();
                }
            }
        }
        var facesToRemove = new openCascade.TopTools_ListOfShape_1();
        facesToRemove.Append_1(faceToRemove);
        var s = myBody.Shape();
        myBody = new openCascade.BRepOffsetAPI_MakeThickSolid();
        myBody.MakeThickSolidByJoin(s, facesToRemove, -myThickness / 50, 1.e-3, openCascade.BRepOffset_Mode.BRepOffset_Skin, false, false, openCascade.GeomAbs_JoinType.GeomAbs_Arc, false, new openCascade.Message_ProgressRange_1());
        // Threading : Create Surfaces
        var aCyl1 = new openCascade.Geom_CylindricalSurface_1(new openCascade.gp_Ax3_2(neckAx2), myNeckRadius * 0.99);
        var aCyl2 = new openCascade.Geom_CylindricalSurface_1(new openCascade.gp_Ax3_2(neckAx2), myNeckRadius * 1.05);
        // Threading : Define 2D Curves
        var aPnt = new openCascade.gp_Pnt2d_3(2. * Math.PI, myNeckHeight / 2.);
        var aDir = new openCascade.gp_Dir2d_4(2. * Math.PI, myNeckHeight / 4.);
        var anAx2d = new openCascade.gp_Ax2d_2(aPnt, aDir);
        var aMajor = 2. * Math.PI;
        var aMinor = myNeckHeight / 10;
        var anEllipse1 = new openCascade.Geom2d_Ellipse_2(anAx2d, aMajor, aMinor, true);
        var anEllipse2 = new openCascade.Geom2d_Ellipse_2(anAx2d, aMajor, aMinor / 4, true);
        var anArc1 = new openCascade.Geom2d_TrimmedCurve(new openCascade.Handle_Geom2d_Curve_2(anEllipse1), 0, Math.PI, true, true);
        var anArc2 = new openCascade.Geom2d_TrimmedCurve(new openCascade.Handle_Geom2d_Curve_2(anEllipse2), 0, Math.PI, true, true);
        var tmp1 = anEllipse1.Value(0);
        var anEllipsePnt1 = new openCascade.gp_Pnt2d_3(tmp1.X(), tmp1.Y());
        var tmp2 = anEllipse1.Value(Math.PI);
        var anEllipsePnt2 = new openCascade.gp_Pnt2d_3(tmp2.X(), tmp2.Y());
        var aSegment = new openCascade.GCE2d_MakeSegment_1(anEllipsePnt1, anEllipsePnt2);
        // Threading : Build Edges and Wires
        var anEdge1OnSurf1 = new openCascade.BRepBuilderAPI_MakeEdge_30(new openCascade.Handle_Geom2d_Curve_2(anArc1), new openCascade.Handle_Geom_Surface_2(aCyl1));
        var anEdge2OnSurf1 = new openCascade.BRepBuilderAPI_MakeEdge_30(new openCascade.Handle_Geom2d_Curve_2(aSegment.Value().get()), new openCascade.Handle_Geom_Surface_2(aCyl1));
        var anEdge1OnSurf2 = new openCascade.BRepBuilderAPI_MakeEdge_30(new openCascade.Handle_Geom2d_Curve_2(anArc2), new openCascade.Handle_Geom_Surface_2(aCyl2));
        var anEdge2OnSurf2 = new openCascade.BRepBuilderAPI_MakeEdge_30(new openCascade.Handle_Geom2d_Curve_2(aSegment.Value().get()), new openCascade.Handle_Geom_Surface_2(aCyl2));
        var threadingWire1 = new openCascade.BRepBuilderAPI_MakeWire_3(anEdge1OnSurf1.Edge(), anEdge2OnSurf1.Edge());
        var threadingWire2 = new openCascade.BRepBuilderAPI_MakeWire_3(anEdge1OnSurf2.Edge(), anEdge2OnSurf2.Edge());
        openCascade.BRepLib.BuildCurves3d_2(threadingWire1.Wire());
        openCascade.BRepLib.BuildCurves3d_2(threadingWire2.Wire());
        openCascade.BRepLib.BuildCurves3d_2(threadingWire1.Wire());
        openCascade.BRepLib.BuildCurves3d_2(threadingWire2.Wire());
        // Create Threading 
        var aTool = new openCascade.BRepOffsetAPI_ThruSections(true, false, 1.0e-06);
        aTool.AddWire(threadingWire1.Wire());
        aTool.AddWire(threadingWire2.Wire());
        aTool.CheckCompatibility(false);
        var myThreading = aTool.Shape();
        // Building the Resulting Compound 
        var aRes = new openCascade.TopoDS_Compound();
        var aBuilder = new openCascade.BRep_Builder();
        aBuilder.MakeCompound(aRes);
        aBuilder.Add(aRes, myBody.Shape());
        aBuilder.Add(aRes, myThreading);
        return aRes;
    }
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (geometry);


/***/ }),

/***/ "./src/common/math.js":
/*!****************************!*\
  !*** ./src/common/math.js ***!
  \****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
var math = {
    PIPer180: Math.PI / 180,
    kEpsilon: 1e-05,
    degToRad: function (deg) {
        return deg * this.PIPer180;
    }
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (math);


/***/ }),

/***/ "./src/common/openCascadeHelper.js":
/*!*****************************************!*\
  !*** ./src/common/openCascadeHelper.js ***!
  \*****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
var openCascadeHelper = {
    setOpenCascade: function (openCascade) {
        this.openCascade = openCascade;
    },
    ForEachFace: function (shape, callback) {
        var oc = this.openCascade;
        var face_index = 0;
        var anExplorer = new oc.TopExp_Explorer_1();
        for (anExplorer.Init(shape, oc.TopAbs_ShapeEnum.TopAbs_FACE, oc.TopAbs_ShapeEnum.TopAbs_SHAPE); anExplorer.More(); anExplorer.Next()) {
            var face = new oc.TopoDS.Face_1(anExplorer.Current());
            callback(face_index++, face);
            face.delete();
        }
        anExplorer.delete();
    },
    ListFaces: function (shape) {
        var oc = this.openCascade;
        var faces = [];
        var anExplorer = new oc.TopExp_Explorer_1();
        for (anExplorer.Init(shape, oc.TopAbs_ShapeEnum.TopAbs_FACE, oc.TopAbs_ShapeEnum.TopAbs_SHAPE); anExplorer.More(); anExplorer.Next()) {
            var face = new oc.TopoDS.Face_1(anExplorer.Current());
            faces.push(face);
        }
        anExplorer.delete();
        return faces;
    },
    ForEachEdge: function (shape, callback) {
        var oc = this.openCascade;
        var edgeHashes = {};
        var edgeIndex = 0;
        var anExplorer = new oc.TopExp_Explorer_1();
        for (anExplorer.Init(shape, oc.TopAbs_ShapeEnum.TopAbs_EDGE, oc.TopAbs_ShapeEnum.TopAbs_SHAPE); anExplorer.More(); anExplorer.Next()) {
            // let edge = anExplorer.Current();
            var edge = new oc.TopoDS.Edge_1(anExplorer.Current());
            var edgeHash = edge.HashCode(100000000);
            if (!edgeHashes.hasOwnProperty(edgeHash)) {
                edgeHashes[edgeHash] = edgeIndex;
                callback(edgeIndex++, edge);
            }
        }
        return edgeHashes;
    },
    tessellate: function (shape, theLinDeflection, theAngDeflection) {
        theLinDeflection = theLinDeflection !== null && theLinDeflection !== void 0 ? theLinDeflection : 0.1;
        theAngDeflection = theAngDeflection !== null && theAngDeflection !== void 0 ? theAngDeflection : 0.5;
        var facelist = [];
        new this.openCascade.BRepMesh_IncrementalMesh_2(shape, theLinDeflection, false, theAngDeflection, false);
        // new this.openCascade.BRepMesh_IncrementalMesh_2(shape, 0.05, false, 0.25, false);
        // new this.openCascade.BRepMesh_IncrementalMesh_2(shape, 0.1, false, 0.5, false);
        // new this.openCascade.BRepMesh_IncrementalMesh_2(shape, 0.5, false, 1, false);
        // new this.openCascade.BRepMesh_IncrementalMesh_2(shape, 1, false, 1.5, false);
        // new this.openCascade.BRepMesh_IncrementalMesh_2(shape, 2, false, 2.5, false);
        // new this.openCascade.BRepMesh_IncrementalMesh_2(shape, 5, false, 5.5, false);
        // new this.openCascade.BRepMesh_IncrementalMesh_2(shape, 10, false, 10.5, false);
        var ExpFace = new this.openCascade.TopExp_Explorer_1();
        var _loop_1 = function () {
            var myFace = this_1.openCascade.TopoDS.Face_1(ExpFace.Current());
            var aFaceLocation = new this_1.openCascade.TopLoc_Location_1();
            var myT = this_1.openCascade.BRep_Tool.Triangulation(myFace, aFaceLocation, 0 /* == Poly_MeshPurpose_NONE */);
            if (myT.IsNull()) {
                return "continue";
            }
            var this_face = {
                vertex_coord: null,
                tri_indexes: [],
                number_of_triangles: 0,
            };
            var triangulation = myT.get();
            // write vertex buffer
            this_face.vertex_coord = new Array(triangulation.NbNodes() * 3);
            var nbNodes = triangulation.NbNodes();
            this_face.vertex_coord = new Array(nbNodes * 3);
            for (var i = 1; i <= nbNodes; i++) {
                var p = triangulation.Node(i).Transformed(aFaceLocation.Transformation());
                // this_face.vertex_coord[((i - 1) * 3) + 0] = p.X().toFixed(3);
                // this_face.vertex_coord[((i - 1) * 3) + 1] = p.Y().toFixed(3);
                // this_face.vertex_coord[((i - 1) * 3) + 2] = p.Z().toFixed(3);
                var ii = ((i - 1) * 3);
                this_face.vertex_coord[ii + 0] = p.X();
                this_face.vertex_coord[ii + 1] = p.Y();
                this_face.vertex_coord[ii + 2] = p.Z();
            }
            // write triangle buffer
            var orient = myFace.Orientation_1();
            var triangles = myT.get().Triangles();
            var trianglesLength = triangles.Length();
            this_face.tri_indexes = new Array(trianglesLength * 3);
            var validFaceTriCount = 0;
            var nbTriangles = myT.get().NbTriangles();
            for (var nt = 1; nt <= nbTriangles; nt++) {
                var t = triangles.Value(nt);
                var n1 = t.Value(1);
                var n2 = t.Value(2);
                var n3 = t.Value(3);
                if (orient !== this_1.openCascade.TopAbs_Orientation.TopAbs_FORWARD) {
                    var tmp = n1;
                    n1 = n2;
                    n2 = tmp;
                }
                var ntt = (validFaceTriCount * 3);
                this_face.tri_indexes[ntt + 0] = n1;
                this_face.tri_indexes[ntt + 1] = n2;
                this_face.tri_indexes[ntt + 2] = n3;
                validFaceTriCount++;
            }
            this_face.number_of_triangles = validFaceTriCount;
            facelist.push(this_face);
            this_face.edgeList = [];
            var oc = this_1.openCascade;
            this_1.ForEachEdge(myFace, function (index, myEdge) {
                var this_edge = {
                    vertex_coord: [],
                    edge_index: -1
                };
                var myP = oc.BRep_Tool.PolygonOnTriangulation_1(myEdge, myT, aFaceLocation);
                var edgeNodes = myP.get().Nodes();
                this_edge.vertex_coord = new Array(edgeNodes.Length() * 3);
                for (var j = 0; j < edgeNodes.Length(); j++) {
                    var vertexIndex = edgeNodes.Value(j + 1);
                    this_edge.vertex_coord[(j * 3) + 0] = this_face.vertex_coord[((vertexIndex - 1) * 3) + 0];
                    this_edge.vertex_coord[(j * 3) + 1] = this_face.vertex_coord[((vertexIndex - 1) * 3) + 1];
                    this_edge.vertex_coord[(j * 3) + 2] = this_face.vertex_coord[((vertexIndex - 1) * 3) + 2];
                }
                this_edge.vertexCount = edgeNodes.Length();
                this_edge.edge_index = index;
                this_edge.cmon = "okok";
                this_face.edgeList.push(this_edge);
            });
        };
        var this_1 = this;
        for (ExpFace.Init(shape, this.openCascade.TopAbs_ShapeEnum.TopAbs_FACE, this.openCascade.TopAbs_ShapeEnum.TopAbs_SHAPE); ExpFace.More(); ExpFace.Next()) {
            _loop_1();
        }
        return facelist;
    }
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (openCascadeHelper);


/***/ }),

/***/ "./src/common/performer.js":
/*!*********************************!*\
  !*** ./src/common/performer.js ***!
  \*********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
var __classPrivateFieldSet = (undefined && undefined.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {
    if (kind === "m") throw new TypeError("Private method is not writable");
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
    return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
};
var __classPrivateFieldGet = (undefined && undefined.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _Performer_lastMeasureMs;
var Performer = /** @class */ (function () {
    function Performer() {
        _Performer_lastMeasureMs.set(this, void 0);
        this.timeStart = 0;
    }
    Performer.create = function () {
        return new Performer();
    };
    Performer.prototype.start = function () {
        this.timeStart = new Date().getTime();
        return this;
    };
    Performer.prototype.measure = function (label) {
        var timeEndLayout = new Date().getTime();
        var durationInMs = (timeEndLayout - this.timeStart);
        // console.log("#perf# "+label +" "+ durationInMs +" ms.")
        __classPrivateFieldSet(this, _Performer_lastMeasureMs, durationInMs, "f");
        return durationInMs;
    };
    Performer.prototype.lastMeasure = function () {
        return __classPrivateFieldGet(this, _Performer_lastMeasureMs, "f");
    };
    return Performer;
}());
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (Performer);
_Performer_lastMeasureMs = new WeakMap();


/***/ }),

/***/ "./src/common/utils.js":
/*!*****************************!*\
  !*** ./src/common/utils.js ***!
  \*****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/**
 * Some utils taken directly from CascadeStudio's CascadeStudioStandardUtils.js
 */
var utils = {
    setOpenCascade: function (openCascade) {
        this.openCascade = openCascade;
    },
    /** Converts either single dimensional array or a gp_Pnt to a gp_Pnt.  Does not accept `TopoDS_Vertex`'s yet!
     *
     * @param pnt [x, y, z]
     * @return gp_Pnt point
     */
    convertTo_gp_Pnt: function (pnt) {
        var oc = this.openCascade;
        var point = pnt; // Accept raw gp_Points if we got 'em
        if (point.length) // point is an js array
         {
            point = new oc.gp_Pnt_3(point[0], point[1], (point[2]) ? point[2] : 0);
        }
        return point;
    },
    /** This function converts either single dimensional
     * array or a gp_Pnt to a gp_Pnt.  Does not accept
     * `TopoDS_Vertex`'s yet!
     *
     * @param dir [x, y, z]
     * @return gp_Dir direction
     */
    convertTo_gp_Dir: function (dir) {
        var oc = this.openCascade;
        var direction = dir; // Accept raw gp_Points if we got 'em
        if (direction.length) // direction is an js array
         {
            direction = new oc.gp_Dir_4(direction[0], direction[1], (direction[2]) ? direction[2] : 0);
        }
        return direction;
    },
    parseJoinType: function (joinType) {
        var oc = this.openCascade;
        if (joinType === "Arc")
            return oc.GeomAbs_JoinType.GeomAbs_Arc;
        if (joinType === "Tangent")
            return oc.GeomAbs_JoinType.GeomAbs_Tangent;
        if (joinType === "Intersection")
            return oc.GeomAbs_JoinType.GeomAbs_Intersection;
        throw new Error("Unsupported joint type: " + joinType);
    },
    /**
     *
     * @param points Array of points [ [x,y,z], [x2, y2, z2], ... ]
     */
    convertTo_TColgp_Array1OfPnt: function (points) {
        var oc = this.openCascade;
        var controlPoints = new oc.TColgp_Array1OfPnt_2(1, points.length);
        for (var i = 1; i <= points.length; i++) {
            var pnt = this.convertTo_gp_Pnt(points[i - 1]);
            controlPoints.SetValue(i, pnt);
        }
        return controlPoints;
    }
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (utils);


/***/ }),

/***/ "./src/common/vectors.js":
/*!*******************************!*\
  !*** ./src/common/vectors.js ***!
  \*******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _math__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./math */ "./src/common/math.js");

var vectors = {
    setOpenCascade: function (openCascade) {
        this.oc = openCascade;
    },
    toString: function (v) {
        return "[x:".concat(v.X(), ",y:").concat(v.Y(), ",z:").concat(v.z(), "]");
    },
    /**
     *
     * @param v [x,y,z]
     * @param t [x,y,z]
     * @return translated [x,y,z]
     */
    translate: function (v, t) {
        return [
            v[0] + t[0],
            v[1] + t[1],
            v[2] + t[2]
        ];
    },
    /**
     *
     * @param v [x,y,z] to be scaled
     * @param s [x,y,z] scale factors
     * @return [x,y,z] scaled v
     */
    scale: function (v, s) {
        return [
            v[0] * s[0],
            v[1] * s[1],
            v[2] * s[2]
        ];
    },
    /**
     * Rotates point v around origin point about given axis and angle in radians.
     * @param v [x,y,z]
     * @param axis [x,y,z]
     * @param angleRad
     */
    rotate: function (v, axis, angleRad) {
        return this.rotateAround(v, [0, 0, 0], axis, angleRad);
    },
    /**
     * Rotates point v around axis in space with given angle in radians.
     * @param v Point to rotate
     * @param axisPoint axis hooking point
     * @param axisDir axis direction
     * @param angleRad angle to rotate
     */
    rotateAround: function (v, axisPoint, axisDir, angleRad) {
        // const zAxisVec = new oc.gp_Vec_4(0,0,1);
        // const zAngleRad = math.degToRad(planeRotationZ);
        // let rotateZ = new oc.gp_Quaternion_5(zAxisVec, zAngleRad);
        var ax1_dir = new this.oc.gp_Dir_4(axisDir[0], axisDir[1], axisDir[2]);
        var ax1_point = new this.oc.gp_Pnt_3(axisPoint[0], axisPoint[1], axisPoint[2]);
        var ax1 = new this.oc.gp_Ax1_2(ax1_point, ax1_dir);
        var p = new this.oc.gp_Pnt_3(v[0], v[1], v[2]);
        p.Rotate(ax1, angleRad);
        return [p.X(), p.Y(), p.Z()];
    },
    /**
     * Calculated vector perpendicular to given input vector p.
     * @param p gp_Vec
     */
    getPerpendicularVector: function (p) {
        var perp = null;
        if (Math.abs(p.x) >= _math__WEBPACK_IMPORTED_MODULE_0__["default"].kEpsilon) {
            var x = -(p.y + p.z) / p.x;
            perp = new this.oc.gp_Vec_4(x, 1, 1);
        }
        if (Math.abs(p.y) >= _math__WEBPACK_IMPORTED_MODULE_0__["default"].kEpsilon) {
            var y = -(p.x + p.z) / p.y;
            perp = new this.oc.gp_Vec_4(1, y, 1);
        }
        if (Math.abs(p.z) >= _math__WEBPACK_IMPORTED_MODULE_0__["default"].kEpsilon) {
            var z = -(p.x + p.y) / p.z;
            perp = new this.oc.gp_Vec_4(1, 1, z);
        }
        if (perp !== null) {
            return perp;
        }
        throw new Error("Cannot find perpendicular vector to (zero vector?) " + this.toString(p));
    },
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (vectors);


/***/ }),

/***/ "./src/common/visualize.js":
/*!*********************************!*\
  !*** ./src/common/visualize.js ***!
  \*********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _openCascadeHelper_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./openCascadeHelper.js */ "./src/common/openCascadeHelper.js");

var visualize = {
    setOpenCascade: function (openCascade) {
        this.openCascade = openCascade;
    },
    //
    // ShapeToMesh(shape, maxDeviation, theAngleDeviation) {
    //   const oc = this.openCascade;
    //  
    //   let fullShapeEdgeHashes = {}; let fullShapeFaceHashes = {};
    //  
    //   let facelist = [], edgeList = [];
    //   try {
    //     // Set up the Incremental Mesh builder, with a precision
    //     new oc.BRepMesh_IncrementalMesh_2(shape, maxDeviation, false, theAngleDeviation, false);
    //     // new this.openCascade.BRepMesh_IncrementalMesh_2(shape, 0.1, false, 0.5, false);
    //
    //     // Construct the edge hashes to assign proper indices to the edges
    //     let fullShapeEdgeHashes2 = {};
    //
    //     // Iterate through the faces and triangulate each one
    //     let triangulations = []; let uv_boxes = []; let curFace = 0;
    //
    //     och.ForEachFace(shape, (faceIndex, myFace) =>
    //     {
    //       var aLocation = new oc.TopLoc_Location_1();
    //       var myT = oc.BRep_Tool.Triangulation(myFace, aLocation, 0);
    //      
    //       if (myT.IsNull()) {
    //         console.error("Encountered Null Face!");
    //         return;
    //       }
    //
    //       let this_face = {
    //         vertex_coord: [],
    //         vertexCount: -1,
    //         uv_coord: [],
    //         tri_indexes: [],
    //         tri_indexesCount: 0,
    //         number_of_triangles: 0,
    //         face_index: fullShapeFaceHashes[myFace.HashCode(100000000)]
    //       };
    //
    //       let pc = new oc.Poly_Connect_2(myT);
    //      
    //       // let Nodes = myT.get().Nodes();
    //       let Nodes = new oc.TColgp_Array1OfPnt_2(1, myT.get().NbNodes());
    //       for (let i = 1; i <= myT.get().NbNodes(); i++)
    //       {
    //         Nodes.SetValue(i, myT.get().Node(i));
    //       }
    //
    //       this_face.vertex_coord = new Array(Nodes.Length());
    //       for(let i = 0; i < Nodes.Length(); i++) {
    //         let p = Nodes.Value(i + 1).Transformed(aLocation.Transformation());
    //
    //         let v = {
    //           x: p.X(),
    //           y: p.Y(),
    //           z: p.Z()
    //         };
    //
    //         this_face.vertex_coord[i] = v;
    //       }
    //      
    //       this_face.vertexCount = Nodes.Length();
    //       this_face.number_of_triangles = validFaceTriCount;
    //       facelist.push(this_face);
    //       curFace += 1;
    //      
    //       try {
    //         och.ForEachEdge(myFace, (index, myEdge) => {
    //
    //           let edgeHash = myEdge.HashCode(100000000);
    //           if (fullShapeEdgeHashes2.hasOwnProperty(edgeHash)) {
    //             let this_edge = {
    //               vertex_coord: [],
    //               edge_index: -1
    //             };
    //
    //             let myP = oc.BRep_Tool.PolygonOnTriangulation_1(myEdge, myT, aLocation);
    //             let edgeNodes = myP.get().Nodes();
    //
    //             this_edge.vertex_coord = new Array(edgeNodes.Length());
    //             for(let j = 0; j < edgeNodes.Length(); j++) {
    //               let vertexIndex = edgeNodes.Value(j+1);
    //              
    //               this_edge.vertex_coord[j] = this_face.vertex_coord[vertexIndex-1];
    //             }
    //
    //             this_edge.vertexCount = edgeNodes.Length();
    //             this_edge.edge_index = index;
    //             this_edge.cmon = "okok";
    //             edgeList.push(this_edge);
    //            
    //           } else {
    //             fullShapeEdgeHashes2[edgeHash] = edgeHash;
    //           }
    //         });
    //       }
    //       catch (e)
    //       {
    //         console.error("error tesselating edges: ",e.message);
    //       }
    //      
    //       triangulations.push(myT);
    //     });
    //
    //     // Get the free edges that aren't on any triangulated face/surface
    //     och.ForEachEdge(shape, (index, myEdge) => {
    //       let edgeHash = myEdge.HashCode(100000000);
    //       if (!fullShapeEdgeHashes2.hasOwnProperty(edgeHash)) {
    //         let this_edge = {
    //           vertex_coord: [],
    //           edge_index: -1
    //         };
    //
    //         let aLocation = new oc.TopLoc_Location_1();
    //         let adaptorCurve = new oc.BRepAdaptor_Curve_2(myEdge);
    //         let tangDef = new oc.GCPnts_TangentialDeflection_2(adaptorCurve, maxDeviation, 0.1, 2, 1.0e-9, 1.0e-7);
    //
    //         // write vertex buffer
    //         this_edge.vertex_coord = new Array(tangDef.NbPoints());
    //         for(let j = 0; j < tangDef.NbPoints(); j++) {
    //           let vertex = tangDef.Value(j+1).Transformed(aLocation.Transformation());
    //           this_edge.vertex_coord[j] = { x: vertex.X(), y: vertex.Y(), z:vertex.Z() };
    //         }
    //
    //         this_edge.edge_index = fullShapeEdgeHashes[edgeHash];
    //         fullShapeEdgeHashes2[edgeHash] = edgeHash;
    //        
    //         edgeList.push(this_edge);
    //       }
    //     });
    //
    //   } catch(err) {
    //     console.error("error: ",err.message)
    //     throw err;
    //   }
    //
    //   return [facelist, edgeList, {cmon: "ok"}];
    // },
    ShapeToEdges: function (shape, theLinDeflection, theAngDeflection) {
        var oc = this.openCascade;
        theLinDeflection = theLinDeflection !== null && theLinDeflection !== void 0 ? theLinDeflection : 0.1;
        var fullShapeEdgeHashes = {};
        var fullShapeFaceHashes = {};
        var edgeList = [];
        try {
            // Set up the Incremental Mesh builder, with a precision
            new oc.BRepMesh_IncrementalMesh_2(shape, theLinDeflection, false, theAngDeflection, false);
            // Get the free edges that aren't on any triangulated face/surface
            _openCascadeHelper_js__WEBPACK_IMPORTED_MODULE_0__["default"].ForEachEdge(shape, function (index, myEdge) {
                var edgeHash = myEdge.HashCode(100000000);
                if (!fullShapeEdgeHashes.hasOwnProperty(edgeHash)) {
                    var this_edge = {
                        vertex_coord: [],
                        edge_index: -1
                    };
                    var aLocation = new oc.TopLoc_Location_1();
                    var adaptorCurve = new oc.BRepAdaptor_Curve_2(myEdge);
                    var tangDef = new oc.GCPnts_TangentialDeflection_2(adaptorCurve, theLinDeflection, theAngDeflection, 2, 1.0e-9, 1.0e-7);
                    // write vertex buffer
                    this_edge.vertex_coord = new Array(tangDef.NbPoints());
                    for (var j = 0; j < tangDef.NbPoints(); j++) {
                        var vertex = tangDef.Value(j + 1).Transformed(aLocation.Transformation());
                        this_edge.vertex_coord[j] = { x: vertex.X(), y: vertex.Y(), z: vertex.Z() };
                    }
                    this_edge.edge_index = fullShapeEdgeHashes[edgeHash];
                    fullShapeEdgeHashes[edgeHash] = edgeHash;
                    edgeList.push(this_edge);
                }
            });
        }
        catch (err) {
            console.error("error: ", err.message);
            throw err;
        }
        return { edgeList: edgeList };
    }
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (visualize);


/***/ }),

/***/ "./src/common/wireToSolid.js":
/*!***********************************!*\
  !*** ./src/common/wireToSolid.js ***!
  \***********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _math__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./math */ "./src/common/math.js");
/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./utils */ "./src/common/utils.js");
/* harmony import */ var _occt_shapes__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../occt/shapes */ "./src/occt/shapes.js");
/* harmony import */ var _compounds__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./compounds */ "./src/common/compounds.ts");
/* harmony import */ var _occt_faces__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../occt/faces */ "./src/occt/faces.ts");





var wireToSolid = {
    setOpenCascade: function (openCascade) {
        this.openCascade = openCascade;
    },
    /**
     *
     * @param wireShape Wire shape
     * @param axisPoint [x, y, z]
     * @param axisDirection [x, y, z]
     * @param angleDeg angle in degrees
     */
    revolveWireToMakeSolid: function (wireShape, axisPoint, axisDirection, angleDeg) {
        var oc = this.openCascade;
        var point = _utils__WEBPACK_IMPORTED_MODULE_1__["default"].convertTo_gp_Pnt(axisPoint);
        var direction = _utils__WEBPACK_IMPORTED_MODULE_1__["default"].convertTo_gp_Dir(axisDirection);
        var axis = new oc.gp_Ax1_2(point, direction);
        var angleRad = _math__WEBPACK_IMPORTED_MODULE_0__["default"].degToRad(angleDeg);
        var profileFace = _occt_faces__WEBPACK_IMPORTED_MODULE_4__["default"].wiresToFaces([wireShape]);
        var revolBuilder = new oc.BRepPrimAPI_MakeRevol_1(profileFace, axis, angleRad, true);
        var solid = revolBuilder.Shape();
        axis.delete();
        profileFace.delete();
        revolBuilder.delete();
        return solid;
        // // console.log("first shape: ", shapes.getShapeTypeAsString(revolBuilder.FirstShape_1()))
        // // console.log("last shape: ", shapes.getShapeTypeAsString(revolBuilder.LastShape_1()))
        //
        // let firstFaceShape = new oc.BRepBuilderAPI_MakeFace_15(revolBuilder.FirstShape_1(), false);
        // let endFaceShape = new oc.BRepBuilderAPI_MakeFace_15(revolBuilder.LastShape_1(), false);
        //
        // let firstFace = compounds.listCompoundShapes(shape);
        //
        // let sewingBuilder = new oc.BRepBuilderAPI_FastSewing(0.01);
        // sewingBuilder.Add_1(shell);
        // sewingBuilder.Add_1(startFace);
        // sewingBuilder.Add_1(endFace);
        // sewingBuilder.Perform();
        //
        // let closedShell = sewingBuilder.GetResult();
        //
        // let solidBuilder = new oc.BRepBuilderAPI_MakeSolid_3(closedShell);
        // let solid = solidBuilder.Solid();
        //
        // return solid;
    }
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (wireToSolid);


/***/ }),

/***/ "./src/common/wires.js":
/*!*****************************!*\
  !*** ./src/common/wires.js ***!
  \*****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./utils.js */ "./src/common/utils.js");
/* harmony import */ var _occt_shapes__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../occt/shapes */ "./src/occt/shapes.js");
/* harmony import */ var _compounds__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./compounds */ "./src/common/compounds.ts");
/* harmony import */ var _csg_csgTypes__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../csg/csgTypes */ "./src/csg/csgTypes.ts");
var __spreadArray = (undefined && undefined.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};




var wires = {
    setOpenCascade: function (openCascade) {
        this.openCascade = openCascade;
    },
    // export declare type GeomAbs_Shape = {
    //     GeomAbs_C0: {};
    //     GeomAbs_G1: {};
    //     GeomAbs_C1: {};
    //     GeomAbs_G2: {};
    //     GeomAbs_C2: {};
    //     GeomAbs_C3: {};
    //     GeomAbs_CN: {};
    // }
    /**
     * Converts from string into GeomAbs_Shape value.
     * @param continuity string like "C0" or "CN" or "G1"
     */
    parseContinuityAs_GeomAbs_Shape: function (continuity) {
        var oc = this.openCascade;
        var key = "GeomAbs_".concat(continuity);
        return oc.GeomAbs_Shape[key];
    },
    /**
     *
     * @param points An array of [x,y,z] points. [[x,y,z], [x,y,z], [x,y,z], ...]
     * @param closed should close the curve
     */
    makePolygonWireFromPoins: function (points, closed) {
        var oc = this.openCascade;
        points = __spreadArray([], points, true);
        if (closed)
            points.push(points[0]);
        // Create the wire
        var mkWire = new oc.BRepBuilderAPI_MakeWire_1();
        // let wire = new oc.BRepBuilderAPI_MakeWire_2(edge).Wire();
        for (var i = 0; i < points.length - 1; i++) {
            var a = new oc.gp_Pnt_3(points[i][0], points[i][1], points[i][2]);
            var b = new oc.gp_Pnt_3(points[i + 1][0], points[i + 1][1], points[i + 1][2]);
            var edge = new oc.BRepBuilderAPI_MakeEdge_3(a, b).Edge();
            mkWire.Add_1(edge);
        }
        // Create the polygon
        var polygon = mkWire.Wire();
        return polygon;
    },
    /**
     * Taken from OpenCascade
     * TODO: implement this
     * @param points An array of [x,y,z] points. [[x,y,z], [x,y,z], [x,y,z], ...]
     * @param closed should close the curve
     * @param curveContinuity for ex: oc.GeomAbs_Shape.GeomAbs_C0
     */
    fitBSplineWireFromPoints: function (points, closed, curveContinuity) {
        var oc = this.openCascade;
        var ptList = new oc.TColgp_Array1OfPnt_2(1, points.length + (closed ? 1 : 0));
        for (var pIndex = 1; pIndex <= points.length; pIndex++) {
            ptList.SetValue(pIndex, _utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].convertTo_gp_Pnt(points[pIndex - 1]));
        }
        if (closed) {
            ptList.SetValue(points.length + 1, ptList.Value(1));
        }
        // let geomCurveHandle = new oc.GeomAPI_PointsToBSpline_2(ptList, 3, 8, oc.GeomAbs_Shape.GeomAbs_C0, 1.0e-3).Curve();
        var geomCurveHandle = new oc.GeomAPI_PointsToBSpline_2(ptList, 3, 8, curveContinuity, 1.0e-3).Curve();
        var geomCurveHandle2 = new oc.Handle_Geom_Curve_2(geomCurveHandle.get());
        var edge = new oc.BRepBuilderAPI_MakeEdge_24(geomCurveHandle2).Edge();
        var wire = new oc.BRepBuilderAPI_MakeWire_2(edge).Wire();
        // // console.log("wire: ",wire)
        return wire;
    },
    /**
     * TODO: implement closing the curve
     * @param points control points of the cubic bezier segment (multiples of 4)
     * @param closed
     * @return {TopoDS_Wire}
     */
    makeBezierWireFromControlPoints: function (points, closed) {
        var oc = this.openCascade;
        var controlPoints = new oc.TColgp_Array1OfPnt_2(1, points.length);
        for (var i = 1; i <= points.length; i++) {
            var pnt = _utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].convertTo_gp_Pnt(points[i - 1]);
            controlPoints.SetValue(i, pnt);
        }
        var bezierCurve = new oc.Geom_BezierCurve_1(controlPoints);
        var geomCurveHandle2 = new oc.Handle_Geom_Curve_2(bezierCurve);
        var edge = new oc.BRepBuilderAPI_MakeEdge_24(geomCurveHandle2).Edge();
        var wire = new oc.BRepBuilderAPI_MakeWire_2(edge).Wire();
        return wire;
    },
    /**
     *
     * @param svgEdges An array of SVGEdge
     * @param isClosed
     */
    makeBezierFromSVGPath: function (svgEdges, isClosed) {
        var oc = this.openCascade;
        var mkWire = new oc.BRepBuilderAPI_MakeWire_1();
        svgEdges.forEach(function (svgEdge) {
            switch (svgEdge.EdgeType) {
                case _csg_csgTypes__WEBPACK_IMPORTED_MODULE_3__.SVGEdgeType.Line: {
                    var a = new oc.gp_Pnt_3(svgEdge.Points[0][0], svgEdge.Points[0][1], 0);
                    var b = new oc.gp_Pnt_3(svgEdge.Points[1][0], svgEdge.Points[1][1], 0);
                    var edge = new oc.BRepBuilderAPI_MakeEdge_3(a, b).Edge();
                    mkWire.Add_1(edge);
                    break;
                }
                case _csg_csgTypes__WEBPACK_IMPORTED_MODULE_3__.SVGEdgeType.BezierQuadratic:
                case _csg_csgTypes__WEBPACK_IMPORTED_MODULE_3__.SVGEdgeType.BezierCubic: {
                    var controlPoints = _utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].convertTo_TColgp_Array1OfPnt(svgEdge.Points);
                    var bezierCurve = new oc.Geom_BezierCurve_1(controlPoints);
                    var geomCurveHandle2 = new oc.Handle_Geom_Curve_2(bezierCurve);
                    var edge = new oc.BRepBuilderAPI_MakeEdge_24(geomCurveHandle2).Edge();
                    mkWire.Add_1(edge);
                    break;
                }
            }
        });
        var svgPathWire = mkWire.Wire();
        return svgPathWire;
    },
    /**
     *
     * @param svgPaths [ [svgPath], ...]
     */
    makeSVGPathsWire: function (svgPaths) {
        var _this = this;
        var wires = [];
        svgPaths.forEach(function (svgPath) {
            try {
                var wire = _this.makeBezierFromSVGPath(svgPath.Edges, svgPath.IsClosed);
                wires.push(wire);
            }
            catch (error) {
                console.error("error while making svg path wire: ", error);
            }
        });
        // console.log("wires: ",wires)
        var compound = _compounds__WEBPACK_IMPORTED_MODULE_2__["default"].makeCompound(wires);
        return compound;
    },
    /**
     * GeomAPI_Interpolate_2 DOES NOT WORK YET as occt.js is missing bindings to create the TColgp_HArray1OfPnt array of points, for details
     * see this https://github.com/donalffons/opencascade.js/issues/87
     * and this https://github.com/donalffons/opencascade.js/issues/33
     * @param points
     * @param closed
     * @return {TopoDS_Wire}
     */
    fitBezierWireFromPoints: function (points, closed) {
        var oc = this.openCascade;
        var controlPoints = new oc.TColgp_Array1OfPnt_2(1, points.length);
        for (var i = 1; i <= points.length; i++) {
            var pnt = _utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].convertTo_gp_Pnt(points[i - 1]);
            controlPoints.SetValue(i, pnt);
        }
        var parameters = new oc.TColStd_Array1OfReal_2(1, points.length);
        var step = 1.0 / (points.length - 1);
        for (var i = 0; i < points.length; i++) {
            parameters.SetValue(i + 1, i * step);
        }
        var controlPointsHandle = new oc.Handle_TColgp_HArray1OfPnt_2(controlPoints);
        var interp = new oc.GeomAPI_Interpolate_2(controlPointsHandle, parameters, false, 1.0e-6);
        var bezierCurve = interp.Curve();
        var geomCurveHandle2 = new oc.Handle_Geom_Curve_2(bezierCurve);
        var edge = new oc.BRepBuilderAPI_MakeEdge_24(geomCurveHandle2).Edge();
        var wire = new oc.BRepBuilderAPI_MakeWire_2(edge).Wire();
        return wire;
    },
    projectWireOntoFace: function (wire, target, d) {
        var oc = this.openCascade;
        var dir = new oc.gp_Dir_4(d[0], d[1], d[2]);
        var projection = new oc.BRepProj_Projection_1(wire, target, dir);
        // projection.Build();
        if (!projection.IsDone()) {
            throw new Error("Projecting a wire onto a shape failed.");
        }
        var projectedWire = projection.Shape();
        return projectedWire;
        // let projectedWire = new oc.TopoDS.Wire_1(projection.Shape());
        // TopoDS_Wire projectedWire = TopoDS::Wire();
        // use the projected wire
    },
    // offsetWire(wireShape, offset, joinType) {
    //     const oc = this.openCascade;
    //
    //     joinType = _utils.parseJoinType(joinType);
    //    
    //     wireShape = compounds.listWiresInsideCompound(wireShape)[0];
    //     let wire = new oc.TopoDS.Wire_1(wireShape);
    //
    //     let offseter = new oc.BRepOffsetAPI_MakeOffset_3(wire, joinType, false);
    //     offseter.Perform(offset, 0);
    //    
    //     if (!offseter.IsDone()) {
    //         throw new Error("Offsetting a wire failed.");
    //     }
    //
    //     let offsetedWire = offseter.Shape();
    //     return offsetedWire; 
    // },
    offsetWire: function (wireShape, offset, joinType) {
        var oc = this.openCascade;
        joinType = _utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].parseJoinType(joinType);
        var offsetedWires = [];
        _compounds__WEBPACK_IMPORTED_MODULE_2__["default"].listWiresInsideCompound(wireShape).forEach(function (wireShape) {
            var wire = new oc.TopoDS.Wire_1(wireShape);
            var offseter = new oc.BRepOffsetAPI_MakeOffset_3(wire, joinType, false);
            offseter.Perform(offset, 0);
            if (!offseter.IsDone()) {
                throw new Error("Offsetting a wire failed.");
            }
            var offsetedWire = offseter.Shape();
            offsetedWires.push(offsetedWire);
        });
        if (offsetedWires.length === 1) {
            return offsetedWires[0];
        }
        return _compounds__WEBPACK_IMPORTED_MODULE_2__["default"].makeCompound(offsetedWires);
    },
    /**
     *
     * @param wiresShape A compound of wires.
     */
    reconstructWires: function (wireShapes) {
        wireShapes = wireShapes.map(function (wireShape) { return _occt_shapes__WEBPACK_IMPORTED_MODULE_1__["default"].listWiresInsideCompound(wireShape); }).flat(1);
        var edges = [];
        wireShapes.forEach(function (wireShape) {
            openCascadeHelper.ForEachEdge(wireShape, function (index, edge) {
                edges.push(edge);
                // console.log("### adding edge: ",edge);
                // console.log("### adding edge: of type: ", shapes.getShapeTypeAsString(edge));
            });
        });
        var edgesCompound = _compounds__WEBPACK_IMPORTED_MODULE_2__["default"].makeCompound(edges);
        var wiresCompound = new oc.TopoDS_Wire();
        var wireDone = oc.BOPAlgo_Tools.EdgesToWires(edgesCompound, wiresCompound, false, .001);
        // console.log("### wiresToFaces wireDone is: ",wireDone);
        // console.log("### wiresToFaces wiresCompound is: ",wiresCompound);
        return wiresCompound;
    }
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (wires);


/***/ }),

/***/ "./src/csg/csgCompoundFactory.js":
/*!***************************************!*\
  !*** ./src/csg/csgCompoundFactory.js ***!
  \***************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _csgTypes__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./csgTypes */ "./src/csg/csgTypes.ts");
/* harmony import */ var _occt_occtio__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../occt/occtio */ "./src/occt/occtio.ts");
var __classPrivateFieldSet = (undefined && undefined.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {
    if (kind === "m") throw new TypeError("Private method is not writable");
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
    return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
};
var __classPrivateFieldGet = (undefined && undefined.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _CSGCompoundFactory_instances, _CSGCompoundFactory_geometry, _CSGCompoundFactory_nodeCalculator, _CSGCompoundFactory_createFromFilE;


var CSGCompoundFactory = /** @class */ (function () {
    function CSGCompoundFactory(geometry, nodeCalculator) {
        _CSGCompoundFactory_instances.add(this);
        _CSGCompoundFactory_geometry.set(this, void 0);
        _CSGCompoundFactory_nodeCalculator.set(this, void 0);
        __classPrivateFieldSet(this, _CSGCompoundFactory_geometry, geometry, "f");
        __classPrivateFieldSet(this, _CSGCompoundFactory_nodeCalculator, nodeCalculator, "f");
    }
    /**
        return: a shape.
     */
    CSGCompoundFactory.prototype.createNodeShape = function (node) {
        if (node.Type !== _csgTypes__WEBPACK_IMPORTED_MODULE_0__.CSGNodeType.Compound)
            throw new Error("Given node is not a ".concat(_csgTypes__WEBPACK_IMPORTED_MODULE_0__.CSGNodeType.Compound));
        var shape = undefined;
        switch (node.Compound.Type) {
            case _csgTypes__WEBPACK_IMPORTED_MODULE_0__.CSGCompoundType.FromFile:
                shape = __classPrivateFieldGet(this, _CSGCompoundFactory_instances, "m", _CSGCompoundFactory_createFromFilE).call(this, node.Compound);
                break;
            default:
                throw new Error("Compound type ".concat(node.Compound.Type, " is not supported."));
        }
        return shape;
    };
    return CSGCompoundFactory;
}());
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (CSGCompoundFactory);
_CSGCompoundFactory_geometry = new WeakMap(), _CSGCompoundFactory_nodeCalculator = new WeakMap(), _CSGCompoundFactory_instances = new WeakSet(), _CSGCompoundFactory_createFromFilE = function _CSGCompoundFactory_createFromFilE(compound) {
    var shape = __classPrivateFieldGet(this, _CSGCompoundFactory_geometry, "f").occtio.textToShape(compound.FileText, compound.FileType);
    return shape;
};


/***/ }),

/***/ "./src/csg/csgFaceFactory.js":
/*!***********************************!*\
  !*** ./src/csg/csgFaceFactory.js ***!
  \***********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _csgTypes__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./csgTypes */ "./src/csg/csgTypes.ts");
var __classPrivateFieldSet = (undefined && undefined.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {
    if (kind === "m") throw new TypeError("Private method is not writable");
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
    return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
};
var __classPrivateFieldGet = (undefined && undefined.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _CSGFaceFactory_instances, _CSGFaceFactory_geometry, _CSGFaceFactory_nodeCalculator, _CSGFaceFactory_createFaceFromWires;

var CSGFaceFactory = /** @class */ (function () {
    function CSGFaceFactory(geometry, nodeCalculator) {
        _CSGFaceFactory_instances.add(this);
        _CSGFaceFactory_geometry.set(this, void 0);
        _CSGFaceFactory_nodeCalculator.set(this, void 0);
        __classPrivateFieldSet(this, _CSGFaceFactory_geometry, geometry, "f");
        __classPrivateFieldSet(this, _CSGFaceFactory_nodeCalculator, nodeCalculator, "f");
    }
    /**
        return: a shape.
     */
    CSGFaceFactory.prototype.createNodeShape = function (node) {
        if (node.Type !== _csgTypes__WEBPACK_IMPORTED_MODULE_0__.CSGNodeType.Face)
            throw new Error("Given node is not a ".concat(_csgTypes__WEBPACK_IMPORTED_MODULE_0__.CSGNodeType.Face));
        var shape = undefined;
        switch (node.Face.Type) {
            case _csgTypes__WEBPACK_IMPORTED_MODULE_0__.CSGFaceType.FaceFromWires:
                shape = __classPrivateFieldGet(this, _CSGFaceFactory_instances, "m", _CSGFaceFactory_createFaceFromWires).call(this, node.Face.WireNodes);
                break;
            case _csgTypes__WEBPACK_IMPORTED_MODULE_0__.CSGFaceType.SelectFaceFromShapeByAxis:
                break;
            case _csgTypes__WEBPACK_IMPORTED_MODULE_0__.CSGFaceType.SelectFaceByIndex:
                break;
            default:
                throw new Error("Face type ".concat(node.Face.Type, " is not supported."));
        }
        return shape;
    };
    return CSGFaceFactory;
}());
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (CSGFaceFactory);
_CSGFaceFactory_geometry = new WeakMap(), _CSGFaceFactory_nodeCalculator = new WeakMap(), _CSGFaceFactory_instances = new WeakSet(), _CSGFaceFactory_createFaceFromWires = function _CSGFaceFactory_createFaceFromWires(wireNodes) {
    var _this = this;
    var wireShapes = wireNodes.map(function (wireNode) {
        var wireShape = __classPrivateFieldGet(_this, _CSGFaceFactory_nodeCalculator, "f").calculateNodeShapesWithCache(wireNode)[0];
        return wireShape;
    });
    var face = __classPrivateFieldGet(this, _CSGFaceFactory_geometry, "f").faces.wiresToFaces(wireShapes);
    return face;
};


/***/ }),

/***/ "./src/csg/csgNodeCalculator.js":
/*!**************************************!*\
  !*** ./src/csg/csgNodeCalculator.js ***!
  \**************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _csgTypes__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./csgTypes */ "./src/csg/csgTypes.ts");
/* harmony import */ var _csgSolidFactory_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./csgSolidFactory.js */ "./src/csg/csgSolidFactory.js");
/* harmony import */ var _csgPlaneFactory_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./csgPlaneFactory.js */ "./src/csg/csgPlaneFactory.js");
/* harmony import */ var _csgWireFactory_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./csgWireFactory.js */ "./src/csg/csgWireFactory.js");
/* harmony import */ var _csgWireOperationCalculator_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./csgWireOperationCalculator.js */ "./src/csg/csgWireOperationCalculator.js");
/* harmony import */ var _csgFaceFactory_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./csgFaceFactory.js */ "./src/csg/csgFaceFactory.js");
/* harmony import */ var _csgOperationCalculator_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./csgOperationCalculator.js */ "./src/csg/csgOperationCalculator.js");
/* harmony import */ var _csgTransformCalculator_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./csgTransformCalculator.js */ "./src/csg/csgTransformCalculator.js");
/* harmony import */ var _common_performer__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./../common/performer */ "./src/common/performer.js");
/* harmony import */ var _common_featureFlags__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./../common/featureFlags */ "./src/common/featureFlags.js");
/* harmony import */ var _csgVertexFactory_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./csgVertexFactory.js */ "./src/csg/csgVertexFactory.js");
/* harmony import */ var _csgCompoundFactory__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./csgCompoundFactory */ "./src/csg/csgCompoundFactory.js");
var __classPrivateFieldSet = (undefined && undefined.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {
    if (kind === "m") throw new TypeError("Private method is not writable");
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
    return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
};
var __classPrivateFieldGet = (undefined && undefined.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _CSGNodeCalculator_instances, _CSGNodeCalculator_geometry, _CSGNodeCalculator_solidFactory, _CSGNodeCalculator_planeFactory, _CSGNodeCalculator_wireFactory, _CSGNodeCalculator_faceFactory, _CSGNodeCalculator_vertexFactory, _CSGNodeCalculator_compoundFactory, _CSGNodeCalculator_wireOperationCalculator, _CSGNodeCalculator_operationCalculator, _CSGNodeCalculator_transformCalculator, _CSGNodeCalculator_nodeCacheMap, _CSGNodeCalculator_calculateNodeShapes, _CSGNodeCalculator_calculateReferenceNodeShapes, _CSGNodeCalculator_prepareResultMeshForShape;












var CSGNodeCalculator = /** @class */ (function () {
    function CSGNodeCalculator(geometry) {
        _CSGNodeCalculator_instances.add(this);
        _CSGNodeCalculator_geometry.set(this, void 0);
        _CSGNodeCalculator_solidFactory.set(this, void 0);
        _CSGNodeCalculator_planeFactory.set(this, void 0);
        _CSGNodeCalculator_wireFactory.set(this, void 0);
        _CSGNodeCalculator_faceFactory.set(this, void 0);
        _CSGNodeCalculator_vertexFactory.set(this, void 0);
        _CSGNodeCalculator_compoundFactory.set(this, void 0);
        _CSGNodeCalculator_wireOperationCalculator.set(this, void 0);
        _CSGNodeCalculator_operationCalculator.set(this, void 0);
        _CSGNodeCalculator_transformCalculator.set(this, void 0);
        _CSGNodeCalculator_nodeCacheMap.set(this, void 0);
        __classPrivateFieldSet(this, _CSGNodeCalculator_geometry, geometry, "f");
        __classPrivateFieldSet(this, _CSGNodeCalculator_solidFactory, new _csgSolidFactory_js__WEBPACK_IMPORTED_MODULE_1__["default"](geometry, this), "f");
        __classPrivateFieldSet(this, _CSGNodeCalculator_planeFactory, new _csgPlaneFactory_js__WEBPACK_IMPORTED_MODULE_2__["default"](geometry), "f");
        __classPrivateFieldSet(this, _CSGNodeCalculator_wireFactory, new _csgWireFactory_js__WEBPACK_IMPORTED_MODULE_3__["default"](geometry), "f");
        __classPrivateFieldSet(this, _CSGNodeCalculator_faceFactory, new _csgFaceFactory_js__WEBPACK_IMPORTED_MODULE_5__["default"](geometry, this), "f");
        __classPrivateFieldSet(this, _CSGNodeCalculator_vertexFactory, new _csgVertexFactory_js__WEBPACK_IMPORTED_MODULE_10__["default"](geometry, this), "f");
        __classPrivateFieldSet(this, _CSGNodeCalculator_compoundFactory, new _csgCompoundFactory__WEBPACK_IMPORTED_MODULE_11__["default"](geometry, this), "f");
        __classPrivateFieldSet(this, _CSGNodeCalculator_wireOperationCalculator, new _csgWireOperationCalculator_js__WEBPACK_IMPORTED_MODULE_4__["default"](geometry, this), "f");
        __classPrivateFieldSet(this, _CSGNodeCalculator_operationCalculator, new _csgOperationCalculator_js__WEBPACK_IMPORTED_MODULE_6__["default"](geometry, this), "f");
        __classPrivateFieldSet(this, _CSGNodeCalculator_transformCalculator, new _csgTransformCalculator_js__WEBPACK_IMPORTED_MODULE_7__["default"](geometry, this), "f");
        __classPrivateFieldSet(this, _CSGNodeCalculator_nodeCacheMap, new Map(), "f");
    }
    /**
     * Unity's API entry point to calculating CSGNode result.
     *
     * @param node CSGNode input to calculate.
     * @returns {string} A text representation list of topo shapes.
     */
    CSGNodeCalculator.prototype.calculateNodeResult = function (node) {
        // // console.log("######### calculateNodeResult abcdefgh #########")
        var _this = this;
        try {
            var perf = _common_performer__WEBPACK_IMPORTED_MODULE_8__["default"].create().start();
            if (typeof node === 'string') {
                var perfParseJson = _common_performer__WEBPACK_IMPORTED_MODULE_8__["default"].create().start();
                node = JSON.parse(node);
                perfParseJson.measure("calculateNodeResult() parse input node json node Id: " + node.PartName);
            }
            var perfCalculateNodeShape = _common_performer__WEBPACK_IMPORTED_MODULE_8__["default"].create().start();
            var shapes = this.calculateNodeShapesWithCache(node);
            perfCalculateNodeShape.measure("calculateNodeResult() calculate node shapes for node Id: " + node.PartName);
            var topoShapesData_1 = {
                topoShapes: []
            };
            shapes.forEach(function (shape, shapeIndex) {
                _this.appendTopoShapeData(node, shape, topoShapesData_1, shapeIndex);
            });
            perf.measure("calculateNodeResult() node Id: " + node.PartName);
            node._duration = perf.lastMeasure();
            var perfJson = _common_performer__WEBPACK_IMPORTED_MODULE_8__["default"].create().start();
            var topoShapesDataJson = JSON.stringify(topoShapesData_1, null, 2);
            // console.log("C# topoShapesDataJson length: "+topoShapesDataJson.length)
            // console.log("C# typeof topoShapesDataJson: "+ (typeof topoShapesDataJson))
            perfJson.measure("calculateNodeResult() stringify topoShapeDataJson node Id: \"+node.PartName+\"");
            return topoShapesDataJson;
        }
        catch (e) {
            var oc = __classPrivateFieldGet(this, _CSGNodeCalculator_geometry, "f").openCascade;
            var errorMessage = "";
            if (typeof e === "number") {
                var exceptionData = oc.OCJS.getStandard_FailureData(e);
                // console.log(`That didn't work because: ${exceptionData.GetMessageString()}`);
                errorMessage = "That didn't work because: ".concat(exceptionData.GetMessageString());
            }
            else if (typeof e === "string") {
                errorMessage = e;
                // console.log();
            }
            else {
                errorMessage = "Unkown error: " + e;
                // console.log();
            }
            console.error("".concat(this.constructor.name, ".calculateNodeResult(").concat(node.PartName, ") error: ").concat(errorMessage));
            console.log("".concat(this.constructor.name, ".calculateNodeResult(").concat(node.PartName, ") error: ").concat(errorMessage));
            return JSON.stringify({
                error: "".concat(errorMessage)
            });
            // throw e;
        }
    };
    CSGNodeCalculator.prototype.appendTopoShapeData = function (node, shape, topoShapesData, shapeIndex) {
        var _a;
        var perfMeshing = _common_performer__WEBPACK_IMPORTED_MODULE_8__["default"].create().start();
        var meshDto = node.MetadataRequests.find(function (dto) { return dto.Kind === _csgTypes__WEBPACK_IMPORTED_MODULE_0__.CSGNodeMetadataKind.Mesh; });
        var _b = meshDto !== undefined
            ? __classPrivateFieldGet(this, _CSGNodeCalculator_instances, "m", _CSGNodeCalculator_prepareResultMeshForShape).call(this, shape, meshDto.TheLinDeflection, meshDto.TheAngDeflection)
            : { faceListData: { faces: [] }, edgeListData: { edges: [] } }, faceListData = _b.faceListData, edgeListData = _b.edgeListData;
        perfMeshing.measure("calculateNodeResult() mesh shape nr " + (shapeIndex++) + " node: " + node.PartName);
        var p = __classPrivateFieldGet(this, _CSGNodeCalculator_geometry, "f").getShapePosition_gp_XYZ(shape);
        var q = __classPrivateFieldGet(this, _CSGNodeCalculator_geometry, "f").getShapeRotation_gp_Quaternion(shape);
        var _c = __classPrivateFieldGet(this, _CSGNodeCalculator_geometry, "f").getQuaternionAngleAxis(q), angle = _c.angle, axis = _c.axis;
        var topoShapeData = {
            mesh: {
                faceListData: faceListData,
                edgeListData: edgeListData,
            },
            translation: { x: p.X(), y: p.Y(), z: p.Z(), },
            scale: { x: 1, y: 1, z: 1 },
            rotation: { x: axis[0], y: axis[1], z: axis[2], angleRad: angle }
        };
        if (_common_featureFlags__WEBPACK_IMPORTED_MODULE_9__["default"].sendBackNodeDebugData) {
            topoShapeData._node = node;
        }
        if (_common_featureFlags__WEBPACK_IMPORTED_MODULE_9__["default"].sendBackShapeVerticesData) {
            topoShapeData.verticesData = {
                vertices: __classPrivateFieldGet(this, _CSGNodeCalculator_geometry, "f").shapes.listShapeVerticesAsPoints(shape)
                    .map(function (gp_pnt) { return [gp_pnt.X(), gp_pnt.Y(), gp_pnt.Z()]; })
            };
        }
        if (_common_featureFlags__WEBPACK_IMPORTED_MODULE_9__["default"].sendBackShapeUserData) {
            var aabb = node.MetadataRequests.find(function (dto) { return dto.Kind === _csgTypes__WEBPACK_IMPORTED_MODULE_0__.CSGNodeMetadataKind.AABB; }) !== undefined
                ? __classPrivateFieldGet(this, _CSGNodeCalculator_geometry, "f").boundingBoxes.getAABB(shape, false)
                : {};
            var obb = node.MetadataRequests.find(function (dto) { return dto.Kind === _csgTypes__WEBPACK_IMPORTED_MODULE_0__.CSGNodeMetadataKind.OBB; }) !== undefined
                ? __classPrivateFieldGet(this, _CSGNodeCalculator_geometry, "f").boundingBoxes.getOBB(shape, false)
                : {};
            topoShapeData.obb = obb;
            topoShapeData.aabb = aabb;
            topoShapeData._shapeUserData = (_a = shape.userData) !== null && _a !== void 0 ? _a : { isEmpty: true };
        }
        topoShapeData.ShapeType = __classPrivateFieldGet(this, _CSGNodeCalculator_geometry, "f").shapes.getShapeTypeAsString(shape);
        topoShapesData.topoShapes.push(topoShapeData);
        shape.topoShapeData = topoShapeData;
        // console.log("### topoShapeData: "+topoShapeData);
    };
    /**
     *
     * @param node
     * @param explodeShapes If true all the shapes will be put into cache individually, thats to support 'disjoin' operation which produces multiple shapes out of single compound shape.
     *
     * @returns calculated shapes.
     */
    CSGNodeCalculator.prototype.calculateNodeShapesWithCache = function (node) {
        var _this = this;
        var result = __classPrivateFieldGet(this, _CSGNodeCalculator_nodeCacheMap, "f").get(node.PartName);
        if (result !== undefined) {
            return result.shapes;
        }
        var shapes = __classPrivateFieldGet(this, _CSGNodeCalculator_instances, "m", _CSGNodeCalculator_calculateNodeShapes).call(this, node);
        var explodeShapes = node.Type === _csgTypes__WEBPACK_IMPORTED_MODULE_0__.CSGNodeType.Operation && node.Operation === _csgTypes__WEBPACK_IMPORTED_MODULE_0__.CSGOperationType.Disjoin;
        if (!explodeShapes) {
            __classPrivateFieldGet(this, _CSGNodeCalculator_nodeCacheMap, "f").set(node.PartName, {
                shapes: shapes
            });
        }
        else {
            shapes.forEach(function (shape, index) {
                var id = index < 1 ? "".concat(node.PartName) : "".concat(node.PartName, "_").concat(index);
                __classPrivateFieldGet(_this, _CSGNodeCalculator_nodeCacheMap, "f").set(id, {
                    shapes: [shape]
                });
            });
        }
        return shapes;
    };
    return CSGNodeCalculator;
}());
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (CSGNodeCalculator);
_CSGNodeCalculator_geometry = new WeakMap(), _CSGNodeCalculator_solidFactory = new WeakMap(), _CSGNodeCalculator_planeFactory = new WeakMap(), _CSGNodeCalculator_wireFactory = new WeakMap(), _CSGNodeCalculator_faceFactory = new WeakMap(), _CSGNodeCalculator_vertexFactory = new WeakMap(), _CSGNodeCalculator_compoundFactory = new WeakMap(), _CSGNodeCalculator_wireOperationCalculator = new WeakMap(), _CSGNodeCalculator_operationCalculator = new WeakMap(), _CSGNodeCalculator_transformCalculator = new WeakMap(), _CSGNodeCalculator_nodeCacheMap = new WeakMap(), _CSGNodeCalculator_instances = new WeakSet(), _CSGNodeCalculator_calculateNodeShapes = function _CSGNodeCalculator_calculateNodeShapes(node) {
    //// console.log(`${this.constructor.name}.calculateNodeShape(${node.PartName} called...`);
    var shapes = undefined;
    var perf = _common_performer__WEBPACK_IMPORTED_MODULE_8__["default"].create().start();
    switch (node.Type) {
        case _csgTypes__WEBPACK_IMPORTED_MODULE_0__.CSGNodeType.Reference:
            shapes = __classPrivateFieldGet(this, _CSGNodeCalculator_instances, "m", _CSGNodeCalculator_calculateReferenceNodeShapes).call(this, node);
            break;
        case _csgTypes__WEBPACK_IMPORTED_MODULE_0__.CSGNodeType.Solid:
            shapes = [__classPrivateFieldGet(this, _CSGNodeCalculator_solidFactory, "f").createNodeShape(node)];
            break;
        case _csgTypes__WEBPACK_IMPORTED_MODULE_0__.CSGNodeType.Plane:
            shapes = [__classPrivateFieldGet(this, _CSGNodeCalculator_planeFactory, "f").createNodeShape(node)];
            break;
        case _csgTypes__WEBPACK_IMPORTED_MODULE_0__.CSGNodeType.Operation:
            shapes = __classPrivateFieldGet(this, _CSGNodeCalculator_operationCalculator, "f").calculateOperation(node);
            break;
        case _csgTypes__WEBPACK_IMPORTED_MODULE_0__.CSGNodeType.Wire:
            shapes = [__classPrivateFieldGet(this, _CSGNodeCalculator_wireFactory, "f").createNodeShape(node)];
            break;
        case _csgTypes__WEBPACK_IMPORTED_MODULE_0__.CSGNodeType.WireOperation:
            shapes = __classPrivateFieldGet(this, _CSGNodeCalculator_wireOperationCalculator, "f").calculateOperation(node);
            break;
        case _csgTypes__WEBPACK_IMPORTED_MODULE_0__.CSGNodeType.Face:
            shapes = [__classPrivateFieldGet(this, _CSGNodeCalculator_faceFactory, "f").createNodeShape(node)];
            break;
        case _csgTypes__WEBPACK_IMPORTED_MODULE_0__.CSGNodeType.Vertex:
            shapes = [__classPrivateFieldGet(this, _CSGNodeCalculator_vertexFactory, "f").createNodeShape(node)];
            break;
        case _csgTypes__WEBPACK_IMPORTED_MODULE_0__.CSGNodeType.Compound:
            shapes = [__classPrivateFieldGet(this, _CSGNodeCalculator_compoundFactory, "f").createNodeShape(node)];
            break;
        case _csgTypes__WEBPACK_IMPORTED_MODULE_0__.CSGNodeType.Transform:
            shapes = __classPrivateFieldGet(this, _CSGNodeCalculator_transformCalculator, "f").calculateTransforms(node);
            break;
        default:
            throw new Error("Node type ".concat(node.Type, " is unsupported yet."));
    }
    perf.measure("calculateNodeShape() node: " + node.PartName);
    node._calculateNodeShapeDuration = perf.lastMeasure();
    return shapes;
}, _CSGNodeCalculator_calculateReferenceNodeShapes = function _CSGNodeCalculator_calculateReferenceNodeShapes(node) {
    if (node.Type !== _csgTypes__WEBPACK_IMPORTED_MODULE_0__.CSGNodeType.Reference)
        throw new Error("Given node is not a ".concat(_csgTypes__WEBPACK_IMPORTED_MODULE_0__.CSGNodeType.Reference));
    var cachedValue = __classPrivateFieldGet(this, _CSGNodeCalculator_nodeCacheMap, "f").get(node.ReferencePartName);
    if (cachedValue === undefined) {
        throw new Error("".concat(this.constructor.name, ".calculateReferenceNode(").concat(node.PartName, ") cache missed looking for reference node: ").concat(node.ReferencePartName, "."));
    }
    return cachedValue.shapes;
}, _CSGNodeCalculator_prepareResultMeshForShape = function _CSGNodeCalculator_prepareResultMeshForShape(shape, theLinDeflection, theAngDeflection) {
    // const oc = this.#geometry.openCascade;
    // if (shape.ShapeType() === oc.TopAbs_ShapeEnum.TopAbs_WIRE)
    // {
    //     // let facesAndEdges = this.#prepareResultMesh2(shape);
    //     let facesAndEdges = this.#geometry.visualize.ShapeToMesh(shape, 0.01, 0.05);
    //
    //     let faceListData = {
    //         faces: facesAndEdges[0]
    //     };
    //     let edgeListData = {
    //         // edges: []
    //         edges: facesAndEdges[1]
    //     };
    //
    //     return {faceListData, edgeListData};
    // }
    {
        // let faceListData = this.#prepareResultMesh(shape);
        // let edgeListData = { edges: []};
        var facesAndEdges = __classPrivateFieldGet(this, _CSGNodeCalculator_geometry, "f").makeIntoSingleMesh_My(shape, true, theLinDeflection, theAngDeflection);
        var faceListData = { faces: facesAndEdges.faces };
        var edgeListData = { edges: facesAndEdges.edges };
        // let edgeListData = {edges: []};
        return { faceListData: faceListData, edgeListData: edgeListData };
    }
};


/***/ }),

/***/ "./src/csg/csgOperationCalculator.js":
/*!*******************************************!*\
  !*** ./src/csg/csgOperationCalculator.js ***!
  \*******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _csgTypes__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./csgTypes */ "./src/csg/csgTypes.ts");
/* harmony import */ var _common_featureFlags__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./../common/featureFlags */ "./src/common/featureFlags.js");
var __assign = (undefined && undefined.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __classPrivateFieldSet = (undefined && undefined.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {
    if (kind === "m") throw new TypeError("Private method is not writable");
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
    return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
};
var __classPrivateFieldGet = (undefined && undefined.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _CSGOperationCalculator_instances, _CSGOperationCalculator_geometry, _CSGOperationCalculator_nodeCalculator, _CSGOperationCalculator_union, _CSGOperationCalculator_difference, _CSGOperationCalculator_intersection, _CSGOperationCalculator_clone, _CSGOperationCalculator_join, _CSGOperationCalculator_disjoin, _CSGOperationCalculator_sliceOff, _CSGOperationCalculator_offset, _CSGOperationCalculator_hollow;


var CSGOperationCalculator = /** @class */ (function () {
    function CSGOperationCalculator(geometry, nodeCalculator) {
        _CSGOperationCalculator_instances.add(this);
        _CSGOperationCalculator_geometry.set(this, void 0);
        _CSGOperationCalculator_nodeCalculator.set(this, void 0);
        __classPrivateFieldSet(this, _CSGOperationCalculator_geometry, geometry, "f");
        __classPrivateFieldSet(this, _CSGOperationCalculator_nodeCalculator, nodeCalculator, "f");
    }
    CSGOperationCalculator.prototype.calculateOperation = function (node) {
        if (node.Type !== _csgTypes__WEBPACK_IMPORTED_MODULE_0__.CSGNodeType.Operation)
            throw new Error("Given node is not an ".concat(_csgTypes__WEBPACK_IMPORTED_MODULE_0__.CSGNodeType.Operation));
        var shapes = undefined;
        switch (node.Operation) {
            case _csgTypes__WEBPACK_IMPORTED_MODULE_0__.CSGOperationType.Union:
                shapes = __classPrivateFieldGet(this, _CSGOperationCalculator_instances, "m", _CSGOperationCalculator_union).call(this, node.Nodes);
                break;
            case _csgTypes__WEBPACK_IMPORTED_MODULE_0__.CSGOperationType.Difference:
                shapes = __classPrivateFieldGet(this, _CSGOperationCalculator_instances, "m", _CSGOperationCalculator_difference).call(this, node.Nodes);
                break;
            case _csgTypes__WEBPACK_IMPORTED_MODULE_0__.CSGOperationType.Intersection:
                shapes = __classPrivateFieldGet(this, _CSGOperationCalculator_instances, "m", _CSGOperationCalculator_intersection).call(this, node.Nodes);
                break;
            case _csgTypes__WEBPACK_IMPORTED_MODULE_0__.CSGOperationType.Clone:
                shapes = __classPrivateFieldGet(this, _CSGOperationCalculator_instances, "m", _CSGOperationCalculator_clone).call(this, node.Nodes);
                break;
            case _csgTypes__WEBPACK_IMPORTED_MODULE_0__.CSGOperationType.Join:
                shapes = __classPrivateFieldGet(this, _CSGOperationCalculator_instances, "m", _CSGOperationCalculator_join).call(this, node.Nodes);
                break;
            case _csgTypes__WEBPACK_IMPORTED_MODULE_0__.CSGOperationType.Disjoin:
                shapes = __classPrivateFieldGet(this, _CSGOperationCalculator_instances, "m", _CSGOperationCalculator_disjoin).call(this, node.Nodes);
                break;
            case _csgTypes__WEBPACK_IMPORTED_MODULE_0__.CSGOperationType.SliceOff:
                shapes = __classPrivateFieldGet(this, _CSGOperationCalculator_instances, "m", _CSGOperationCalculator_sliceOff).call(this, node.Nodes);
                break;
            case _csgTypes__WEBPACK_IMPORTED_MODULE_0__.CSGOperationType.Offset:
                shapes = __classPrivateFieldGet(this, _CSGOperationCalculator_instances, "m", _CSGOperationCalculator_offset).call(this, node.Nodes, node.OffsetValue, node.OffsetMode);
                break;
            case _csgTypes__WEBPACK_IMPORTED_MODULE_0__.CSGOperationType.Hollow:
                shapes = __classPrivateFieldGet(this, _CSGOperationCalculator_instances, "m", _CSGOperationCalculator_hollow).call(this, node.Nodes, node.FaceIndexes, node.WallThickness, node.JoinType);
                break;
            default:
                throw new Error("Node operation ".concat(node.Operation, " is unsupported yet."));
        }
        if (_common_featureFlags__WEBPACK_IMPORTED_MODULE_1__["default"].attachCSGNodeToShapeResult) {
            shapes.forEach(function (shape) {
                shape._node = node;
            });
        }
        return shapes;
    };
    return CSGOperationCalculator;
}());
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (CSGOperationCalculator);
_CSGOperationCalculator_geometry = new WeakMap(), _CSGOperationCalculator_nodeCalculator = new WeakMap(), _CSGOperationCalculator_instances = new WeakSet(), _CSGOperationCalculator_union = function _CSGOperationCalculator_union(nodes) {
    var _this = this;
    var shapes = nodes.map(function (node) { return __classPrivateFieldGet(_this, _CSGOperationCalculator_nodeCalculator, "f").calculateNodeShapesWithCache(node); }).flat(1);
    var union = __classPrivateFieldGet(this, _CSGOperationCalculator_geometry, "f").booleans.makeUnion(shapes);
    return [union];
}, _CSGOperationCalculator_difference = function _CSGOperationCalculator_difference(nodes) {
    var _this = this;
    var shapes = nodes.map(function (node) { return __classPrivateFieldGet(_this, _CSGOperationCalculator_nodeCalculator, "f").calculateNodeShapesWithCache(node); }).flat(1);
    var targetShape = shapes[0];
    var toolShapes = shapes.slice(1);
    // let difference = this.#geometry.makeDifference(targetShape, toolShapes);
    var difference = __classPrivateFieldGet(this, _CSGOperationCalculator_geometry, "f").makeDifferenceMulti([targetShape], toolShapes);
    return [difference];
}, _CSGOperationCalculator_intersection = function _CSGOperationCalculator_intersection(nodes) {
    var _this = this;
    var shapes = nodes.map(function (node) { return __classPrivateFieldGet(_this, _CSGOperationCalculator_nodeCalculator, "f").calculateNodeShapesWithCache(node); }).flat(1);
    var intersection = __classPrivateFieldGet(this, _CSGOperationCalculator_geometry, "f").makeIntersection(shapes);
    return [intersection];
}, _CSGOperationCalculator_clone = function _CSGOperationCalculator_clone(nodes) {
    var _this = this;
    var shapes = nodes.map(function (node) { return __classPrivateFieldGet(_this, _CSGOperationCalculator_nodeCalculator, "f").calculateNodeShapesWithCache(node); }).flat(1);
    var cloned = __classPrivateFieldGet(this, _CSGOperationCalculator_geometry, "f").makeClone(shapes[0]);
    cloned.userData = __assign({}, shapes[0].userData);
    return [cloned];
}, _CSGOperationCalculator_join = function _CSGOperationCalculator_join(nodes) {
    var _this = this;
    var shapes = nodes.map(function (node) { return __classPrivateFieldGet(_this, _CSGOperationCalculator_nodeCalculator, "f").calculateNodeShapesWithCache(node); }).flat(1);
    var joined = __classPrivateFieldGet(this, _CSGOperationCalculator_geometry, "f").compounds.makeCompound(shapes);
    return [joined];
}, _CSGOperationCalculator_disjoin = function _CSGOperationCalculator_disjoin(nodes) {
    var _this = this;
    var shapes = nodes.map(function (node) { return __classPrivateFieldGet(_this, _CSGOperationCalculator_nodeCalculator, "f").calculateNodeShapesWithCache(node); }).flat(1);
    var explodedShapes = shapes.map(function (shape) {
        var disjoined = __classPrivateFieldGet(_this, _CSGOperationCalculator_geometry, "f").explodeCompound(shape);
        return disjoined;
    }).flat(1);
    return explodedShapes;
}, _CSGOperationCalculator_sliceOff = function _CSGOperationCalculator_sliceOff(nodes) {
    var _this = this;
    var shapes = nodes.map(function (node) { return __classPrivateFieldGet(_this, _CSGOperationCalculator_nodeCalculator, "f").calculateNodeShapesWithCache(node); }).flat(1);
    var sliced = shapes[0];
    for (var i = 1; i < shapes.length; i++) {
        var planeShape = shapes[i];
        sliced = __classPrivateFieldGet(this, _CSGOperationCalculator_geometry, "f").makeSplitWithPlane(sliced, planeShape, planeShape.userData.planePoint, planeShape.userData.planeNormal);
    }
    return [sliced];
}, _CSGOperationCalculator_offset = function _CSGOperationCalculator_offset(nodes, offset, mode) {
    var _this = this;
    var shapes = nodes.map(function (node) { return __classPrivateFieldGet(_this, _CSGOperationCalculator_nodeCalculator, "f").calculateNodeShapesWithCache(node); }).flat(1);
    var thickened = __classPrivateFieldGet(this, _CSGOperationCalculator_geometry, "f").makeOffset(shapes[0], offset, mode);
    return [thickened];
}, _CSGOperationCalculator_hollow = function _CSGOperationCalculator_hollow(nodes, faceIndexes, wallThickness, joinType) {
    var _this = this;
    var shapes = nodes.map(function (node) { return __classPrivateFieldGet(_this, _CSGOperationCalculator_nodeCalculator, "f").calculateNodeShapesWithCache(node); }).flat(1);
    var hollowed = __classPrivateFieldGet(this, _CSGOperationCalculator_geometry, "f").solidOperations.makeHollow(shapes[0], faceIndexes, wallThickness, joinType);
    return [hollowed];
};


/***/ }),

/***/ "./src/csg/csgPlaneFactory.js":
/*!************************************!*\
  !*** ./src/csg/csgPlaneFactory.js ***!
  \************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _csgTypes__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./csgTypes */ "./src/csg/csgTypes.ts");
var __classPrivateFieldSet = (undefined && undefined.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {
    if (kind === "m") throw new TypeError("Private method is not writable");
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
    return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
};
var __classPrivateFieldGet = (undefined && undefined.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _CSGPlaneFactory_instances, _CSGPlaneFactory_geometry, _CSGPlaneFactory_createPlaneShape;

var CSGPlaneFactory = /** @class */ (function () {
    function CSGPlaneFactory(geometry) {
        _CSGPlaneFactory_instances.add(this);
        _CSGPlaneFactory_geometry.set(this, void 0);
        __classPrivateFieldSet(this, _CSGPlaneFactory_geometry, geometry, "f");
    }
    /**
        return: a shape.
     */
    CSGPlaneFactory.prototype.createNodeShape = function (node) {
        if (node.Type !== _csgTypes__WEBPACK_IMPORTED_MODULE_0__.CSGNodeType.Plane)
            throw new Error("Given node is not a ".concat(_csgTypes__WEBPACK_IMPORTED_MODULE_0__.CSGNodeType.Plane));
        var shape = __classPrivateFieldGet(this, _CSGPlaneFactory_instances, "m", _CSGPlaneFactory_createPlaneShape).call(this, node.Plane);
        return shape;
    };
    return CSGPlaneFactory;
}());
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (CSGPlaneFactory);
_CSGPlaneFactory_geometry = new WeakMap(), _CSGPlaneFactory_instances = new WeakSet(), _CSGPlaneFactory_createPlaneShape = function _CSGPlaneFactory_createPlaneShape(plane) {
    var shape = __classPrivateFieldGet(this, _CSGPlaneFactory_geometry, "f").makePlane(plane.Normal, plane.Point, plane.Width, plane.Height, 0.5, 0.5);
    shape.userData = {
        planePoint: plane.Point,
        planeNormal: plane.Normal,
        planeWidth: plane.Width,
        planeHeight: plane.Height
    };
    return shape;
};


/***/ }),

/***/ "./src/csg/csgSolidFactory.js":
/*!************************************!*\
  !*** ./src/csg/csgSolidFactory.js ***!
  \************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _csgTypes__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./csgTypes */ "./src/csg/csgTypes.ts");
/* harmony import */ var _common_wires__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../common/wires */ "./src/common/wires.js");
var __classPrivateFieldSet = (undefined && undefined.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {
    if (kind === "m") throw new TypeError("Private method is not writable");
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
    return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
};
var __classPrivateFieldGet = (undefined && undefined.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _CSGSolidFactory_instances, _CSGSolidFactory_geometry, _CSGSolidFactory_nodeCalculator, _CSGSolidFactory_createBox, _CSGSolidFactory_createSphere, _CSGSolidFactory_createCylinder, _CSGSolidFactory_createExtrude, _CSGSolidFactory_createExtrudeWire, _CSGSolidFactory_createRevolveWire, _CSGSolidFactory_createSweepWire, _CSGSolidFactory_createLoftThroughWires, _CSGSolidFactory_createText3D;


var CSGSolidFactory = /** @class */ (function () {
    function CSGSolidFactory(geometry, nodeCalculator) {
        _CSGSolidFactory_instances.add(this);
        _CSGSolidFactory_geometry.set(this, void 0);
        _CSGSolidFactory_nodeCalculator.set(this, void 0);
        __classPrivateFieldSet(this, _CSGSolidFactory_geometry, geometry, "f");
        __classPrivateFieldSet(this, _CSGSolidFactory_nodeCalculator, nodeCalculator, "f");
    }
    /**
        return: a shape.
     */
    CSGSolidFactory.prototype.createNodeShape = function (node) {
        if (node.Type !== _csgTypes__WEBPACK_IMPORTED_MODULE_0__.CSGNodeType.Solid)
            throw new Error("Given node is not a ".concat(_csgTypes__WEBPACK_IMPORTED_MODULE_0__.CSGNodeType.Solid));
        var shape = undefined;
        switch (node.Solid.Type) {
            case _csgTypes__WEBPACK_IMPORTED_MODULE_0__.CSGSolidType.Box:
                shape = __classPrivateFieldGet(this, _CSGSolidFactory_instances, "m", _CSGSolidFactory_createBox).call(this, node.Solid);
                break;
            case _csgTypes__WEBPACK_IMPORTED_MODULE_0__.CSGSolidType.Sphere:
                shape = __classPrivateFieldGet(this, _CSGSolidFactory_instances, "m", _CSGSolidFactory_createSphere).call(this, node.Solid);
                break;
            case _csgTypes__WEBPACK_IMPORTED_MODULE_0__.CSGSolidType.Cylinder:
                shape = __classPrivateFieldGet(this, _CSGSolidFactory_instances, "m", _CSGSolidFactory_createCylinder).call(this, node.Solid);
                break;
            case _csgTypes__WEBPACK_IMPORTED_MODULE_0__.CSGSolidType.Extrude:
                shape = __classPrivateFieldGet(this, _CSGSolidFactory_instances, "m", _CSGSolidFactory_createExtrude).call(this, node.Solid);
                break;
            case _csgTypes__WEBPACK_IMPORTED_MODULE_0__.CSGSolidType.ExtrudeWire:
                shape = __classPrivateFieldGet(this, _CSGSolidFactory_instances, "m", _CSGSolidFactory_createExtrudeWire).call(this, node.Solid);
                break;
            case _csgTypes__WEBPACK_IMPORTED_MODULE_0__.CSGSolidType.RevolveWire:
                shape = __classPrivateFieldGet(this, _CSGSolidFactory_instances, "m", _CSGSolidFactory_createRevolveWire).call(this, node.Solid);
                break;
            case _csgTypes__WEBPACK_IMPORTED_MODULE_0__.CSGSolidType.SweepWire:
                shape = __classPrivateFieldGet(this, _CSGSolidFactory_instances, "m", _CSGSolidFactory_createSweepWire).call(this, node.Solid);
                break;
            case _csgTypes__WEBPACK_IMPORTED_MODULE_0__.CSGSolidType.LoftWires:
                shape = __classPrivateFieldGet(this, _CSGSolidFactory_instances, "m", _CSGSolidFactory_createLoftThroughWires).call(this, node.Solid);
                break;
            case _csgTypes__WEBPACK_IMPORTED_MODULE_0__.CSGSolidType.Text3D:
                shape = __classPrivateFieldGet(this, _CSGSolidFactory_instances, "m", _CSGSolidFactory_createText3D).call(this, node.Solid);
                break;
            default:
                throw new Error("Solid type ".concat(node.Solid.Type, " is not supported."));
        }
        return shape;
    };
    return CSGSolidFactory;
}());
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (CSGSolidFactory);
_CSGSolidFactory_geometry = new WeakMap(), _CSGSolidFactory_nodeCalculator = new WeakMap(), _CSGSolidFactory_instances = new WeakSet(), _CSGSolidFactory_createBox = function _CSGSolidFactory_createBox(solid) {
    var box = __classPrivateFieldGet(this, _CSGSolidFactory_geometry, "f").makeBox(solid.Position[0], solid.Position[1], solid.Position[2], solid.Width, solid.Height, solid.Length, solid.PositionPivot[0], solid.PositionPivot[1], solid.PositionPivot[2]);
    return box;
}, _CSGSolidFactory_createSphere = function _CSGSolidFactory_createSphere(solid) {
    var sphere = __classPrivateFieldGet(this, _CSGSolidFactory_geometry, "f").makeSphere(solid.Position[0], solid.Position[1], solid.Position[2], solid.Radius);
    return sphere;
}, _CSGSolidFactory_createCylinder = function _CSGSolidFactory_createCylinder(solid) {
    var cylinder = __classPrivateFieldGet(this, _CSGSolidFactory_geometry, "f").makeCylinder([solid.Position[0], solid.Position[1], solid.Position[2]], [solid.Direction[0], solid.Direction[1], solid.Direction[2]], solid.Radius, solid.Height);
    return cylinder;
}, _CSGSolidFactory_createExtrude = function _CSGSolidFactory_createExtrude(solid) {
    var lines = solid.Sketch.Lines;
    var planePoint = solid.PlaneOrigin;
    var planeNormal = solid.PlaneNormal;
    var planeRotationZ = solid.PlaneRotationZ;
    var face = __classPrivateFieldGet(this, _CSGSolidFactory_geometry, "f").makeFaceFromLinesAndPlane(lines, planePoint, planeNormal, planeRotationZ);
    // const dir = [0, 0, solid.LengthUp];
    var extrude = __classPrivateFieldGet(this, _CSGSolidFactory_geometry, "f").sweeps.makeExtrudeFace(face, planeNormal, solid.LengthUp, solid.LengthDown);
    return extrude;
}, _CSGSolidFactory_createExtrudeWire = function _CSGSolidFactory_createExtrudeWire(solid) {
    var wireNode = solid.Wire;
    var direction = solid.Direction;
    var lengthUp = solid.LengthUp;
    var lengthDown = solid.LengthDown;
    var wireShape = __classPrivateFieldGet(this, _CSGSolidFactory_nodeCalculator, "f").calculateNodeShapesWithCache(wireNode)[0];
    var face = __classPrivateFieldGet(this, _CSGSolidFactory_geometry, "f").faces.wiresToFaces([wireShape]);
    var extrude = __classPrivateFieldGet(this, _CSGSolidFactory_geometry, "f").sweeps.makeExtrudeFace(face, direction, lengthUp, lengthDown);
    face.delete();
    return extrude;
}, _CSGSolidFactory_createRevolveWire = function _CSGSolidFactory_createRevolveWire(solid) {
    var wireNode = solid.Wire;
    var axisPoint = solid.AxisPoint;
    var axisDirection = solid.AxisDirection;
    var angleDeg = solid.Angle;
    var wireShape = __classPrivateFieldGet(this, _CSGSolidFactory_nodeCalculator, "f").calculateNodeShapesWithCache(wireNode)[0];
    var revolve = __classPrivateFieldGet(this, _CSGSolidFactory_geometry, "f").wireToSolid.revolveWireToMakeSolid(wireShape, axisPoint, axisDirection, angleDeg);
    return revolve;
}, _CSGSolidFactory_createSweepWire = function _CSGSolidFactory_createSweepWire(solid) {
    var profileNode = solid.Profile;
    var pathNode = solid.Path;
    var profileShape = __classPrivateFieldGet(this, _CSGSolidFactory_nodeCalculator, "f").calculateNodeShapesWithCache(profileNode)[0];
    var pathShape = __classPrivateFieldGet(this, _CSGSolidFactory_nodeCalculator, "f").calculateNodeShapesWithCache(pathNode)[0];
    var sweep = __classPrivateFieldGet(this, _CSGSolidFactory_geometry, "f").sweeps.pipeSolidFromWire(profileShape, pathShape);
    return sweep;
}, _CSGSolidFactory_createLoftThroughWires = function _CSGSolidFactory_createLoftThroughWires(solid) {
    var _this = this;
    var wireShapes0 = solid.Profiles
        .map(function (node) { return __classPrivateFieldGet(_this, _CSGSolidFactory_nodeCalculator, "f").calculateNodeShapesWithCache(node); })
        .flat();
    var wireShapes1 = wireShapes0
        .map(function (shape) { return __classPrivateFieldGet(_this, _CSGSolidFactory_geometry, "f").compounds.listWiresInsideCompound(shape); })
        .flat();
    var wireShapes = wireShapes1
        .map(function (shape) { return __classPrivateFieldGet(_this, _CSGSolidFactory_geometry, "f").shapes.getActualTypeOfShape(shape); });
    // let wires = this.#geometry.compounds.filterOutWires(wireShapes);
    var wires = wireShapes;
    var loft = __classPrivateFieldGet(this, _CSGSolidFactory_geometry, "f").lofts.loftThroughWires(wires, solid.MakeSolid, solid.CheckCompatibility, solid.Ruled);
    return loft;
}, _CSGSolidFactory_createText3D = function _CSGSolidFactory_createText3D(solid) {
    var text3d = __classPrivateFieldGet(this, _CSGSolidFactory_geometry, "f").texts.text3D(solid.Text, solid.FontSize, solid.Height, solid.FontName, solid.Position, solid.Direction);
    return text3d;
};


/***/ }),

/***/ "./src/csg/csgTransformCalculator.js":
/*!*******************************************!*\
  !*** ./src/csg/csgTransformCalculator.js ***!
  \*******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _csgTypes__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./csgTypes */ "./src/csg/csgTypes.ts");
/* harmony import */ var _common_math_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./../common/math.js */ "./src/common/math.js");
var __assign = (undefined && undefined.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __classPrivateFieldSet = (undefined && undefined.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {
    if (kind === "m") throw new TypeError("Private method is not writable");
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
    return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
};
var __classPrivateFieldGet = (undefined && undefined.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _CSGTransformCalculator_instances, _CSGTransformCalculator_geometry, _CSGTransformCalculator_nodeCalculator, _CSGTransformCalculator_transformShape, _CSGTransformCalculator_transformShapesUserData;


var CSGTransformCalculator = /** @class */ (function () {
    function CSGTransformCalculator(geometry, nodeCalculator) {
        _CSGTransformCalculator_instances.add(this);
        _CSGTransformCalculator_geometry.set(this, void 0);
        _CSGTransformCalculator_nodeCalculator.set(this, void 0);
        __classPrivateFieldSet(this, _CSGTransformCalculator_geometry, geometry, "f");
        __classPrivateFieldSet(this, _CSGTransformCalculator_nodeCalculator, nodeCalculator, "f");
    }
    CSGTransformCalculator.prototype.calculateTransforms = function (node) {
        var _this = this;
        if (node.Type !== _csgTypes__WEBPACK_IMPORTED_MODULE_0__.CSGNodeType.Transform)
            throw new Error("Given node is not an ".concat(_csgTypes__WEBPACK_IMPORTED_MODULE_0__.CSGNodeType.Transform));
        var targetShapes = __classPrivateFieldGet(this, _CSGTransformCalculator_nodeCalculator, "f").calculateNodeShapesWithCache(node.Node);
        var transformedShapes = targetShapes.map(function (targetShape) { return __classPrivateFieldGet(_this, _CSGTransformCalculator_instances, "m", _CSGTransformCalculator_transformShape).call(_this, targetShape, node); });
        return transformedShapes;
    };
    return CSGTransformCalculator;
}());
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (CSGTransformCalculator);
_CSGTransformCalculator_geometry = new WeakMap(), _CSGTransformCalculator_nodeCalculator = new WeakMap(), _CSGTransformCalculator_instances = new WeakSet(), _CSGTransformCalculator_transformShape = function _CSGTransformCalculator_transformShape(shape, node) {
    var transformedShape = shape;
    if (node.Append === false) {
        transformedShape = __classPrivateFieldGet(this, _CSGTransformCalculator_geometry, "f").resetLocation(transformedShape);
    }
    var isScaleIdentity = node.Transform.scale[0] === 1 && node.Transform.scale[1] === 1 && node.Transform.scale[2] === 1;
    if (node.UseS && !isScaleIdentity) {
        transformedShape = __classPrivateFieldGet(this, _CSGTransformCalculator_geometry, "f").makeScale(transformedShape, node.Transform.scale);
    }
    var isRotationZero = node.Transform.rotation[3] <= _common_math_js__WEBPACK_IMPORTED_MODULE_1__["default"].kEpsilon;
    if (node.UseR && !isRotationZero) {
        var axis = node.Transform.rotation.slice(0, 3);
        var angleRad = _common_math_js__WEBPACK_IMPORTED_MODULE_1__["default"].degToRad(node.Transform.rotation[3]);
        transformedShape = __classPrivateFieldGet(this, _CSGTransformCalculator_geometry, "f").makeRotation(transformedShape, axis, angleRad);
    }
    var isTranslationZero = node.Transform.translation[0] === 0 && node.Transform.translation[1] === 0 && node.Transform.translation[2] === 0;
    if (node.UseT && !isTranslationZero) {
        transformedShape = __classPrivateFieldGet(this, _CSGTransformCalculator_geometry, "f").makeTranslate(transformedShape, node.Transform.translation);
    }
    transformedShape.userData = __assign({}, shape.userData);
    __classPrivateFieldGet(this, _CSGTransformCalculator_instances, "m", _CSGTransformCalculator_transformShapesUserData).call(this, transformedShape, node);
    //// console.log("transformShape() transformShape.userData: "+JSON.stringify(transformedShape.userData, null, 2));
    return transformedShape;
}, _CSGTransformCalculator_transformShapesUserData = function _CSGTransformCalculator_transformShapesUserData(shape, node) {
    // For now only plane's point and normal are supported
    if (shape.userData.planePoint === undefined
        || shape.userData.planeNormal === undefined) {
        return;
    }
    var planePoint = shape.userData.planePoint;
    var planeNormal = shape.userData.planeNormal;
    if (node.Append === false) {
        planePoint = [0, 0, 0];
        planeNormal = [0, 0, 1];
    }
    var isScaleIdentity = node.Transform.scale[0] === 1 && node.Transform.scale[1] === 1 && node.Transform.scale[2] === 1;
    if (node.UseS && !isScaleIdentity) {
        planeNormal = __classPrivateFieldGet(this, _CSGTransformCalculator_geometry, "f").vectors.scale(planeNormal, node.Transform.scale);
    }
    var isRotationZero = node.Transform.rotation[3] <= _common_math_js__WEBPACK_IMPORTED_MODULE_1__["default"].kEpsilon;
    if (node.UseR && !isRotationZero) {
        var axis = node.Transform.rotation.slice(0, 3);
        var angleRad = _common_math_js__WEBPACK_IMPORTED_MODULE_1__["default"].degToRad(node.Transform.rotation[3]);
        // transformedShape = this.#geometry.makeRotation(transformedShape, axis, angleRad);
        planeNormal = __classPrivateFieldGet(this, _CSGTransformCalculator_geometry, "f").vectors.rotate(planeNormal, axis, angleRad);
    }
    var isTranslationZero = node.Transform.translation[0] === 0 && node.Transform.translation[1] === 0 && node.Transform.translation[2] === 0;
    if (node.UseT && !isTranslationZero) {
        // transformedShape = this.#geometry.makeTranslate(transformedShape, node.Transform.translation);
        planePoint = __classPrivateFieldGet(this, _CSGTransformCalculator_geometry, "f").vectors.translate(planePoint, node.Transform.translation);
    }
    shape.userData.planePoint = planePoint;
    shape.userData.planeNormal = planeNormal;
};


/***/ }),

/***/ "./src/csg/csgTypes.ts":
/*!*****************************!*\
  !*** ./src/csg/csgTypes.ts ***!
  \*****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   CSGCompoundType: () => (/* binding */ CSGCompoundType),
/* harmony export */   CSGFaceType: () => (/* binding */ CSGFaceType),
/* harmony export */   CSGNodeMetadataKind: () => (/* binding */ CSGNodeMetadataKind),
/* harmony export */   CSGNodeType: () => (/* binding */ CSGNodeType),
/* harmony export */   CSGOperationType: () => (/* binding */ CSGOperationType),
/* harmony export */   CSGSolidType: () => (/* binding */ CSGSolidType),
/* harmony export */   CSGVertexType: () => (/* binding */ CSGVertexType),
/* harmony export */   CSGWireOperationType: () => (/* binding */ CSGWireOperationType),
/* harmony export */   CSGWireType: () => (/* binding */ CSGWireType),
/* harmony export */   SVGEdgeType: () => (/* binding */ SVGEdgeType)
/* harmony export */ });
var CSGNodeType;
(function (CSGNodeType) {
    CSGNodeType["Nothing"] = "Nothing";
    CSGNodeType["Solid"] = "Solid";
    CSGNodeType["Plane"] = "Plane";
    CSGNodeType["Operation"] = "Operation";
    CSGNodeType["Face"] = "Face";
    CSGNodeType["Wire"] = "Wire";
    CSGNodeType["WireOperation"] = "WireOperation";
    CSGNodeType["Vertex"] = "Vertex";
    CSGNodeType["Compound"] = "Compound";
    CSGNodeType["Reference"] = "Reference";
    CSGNodeType["Transform"] = "Transform";
})(CSGNodeType || (CSGNodeType = {}));
var CSGNodeMetadataKind;
(function (CSGNodeMetadataKind) {
    CSGNodeMetadataKind["Mesh"] = "Mesh";
    CSGNodeMetadataKind["AABB"] = "AABB";
    CSGNodeMetadataKind["OBB"] = "OBB";
})(CSGNodeMetadataKind || (CSGNodeMetadataKind = {}));
var CSGOperationType;
(function (CSGOperationType) {
    CSGOperationType["Union"] = "Union";
    CSGOperationType["Difference"] = "Difference";
    CSGOperationType["Intersection"] = "Intersection";
    CSGOperationType["SliceOff"] = "SliceOff";
    CSGOperationType["Clone"] = "Clone";
    CSGOperationType["Join"] = "Join";
    CSGOperationType["Disjoin"] = "Disjoin";
    CSGOperationType["Offset"] = "Offset";
    CSGOperationType["Hollow"] = "Hollow";
})(CSGOperationType || (CSGOperationType = {}));
var CSGWireOperationType;
(function (CSGWireOperationType) {
    CSGWireOperationType["Nothing"] = "Nothing";
    CSGWireOperationType["Project"] = "Project";
    CSGWireOperationType["Offset"] = "Offset";
})(CSGWireOperationType || (CSGWireOperationType = {}));
var CSGSolidType;
(function (CSGSolidType) {
    CSGSolidType["Sphere"] = "Sphere";
    CSGSolidType["Box"] = "Box";
    CSGSolidType["Cylinder"] = "Cylinder";
    CSGSolidType["Mesh"] = "Mesh";
    CSGSolidType["Extrude"] = "Extrude";
    CSGSolidType["ExtrudeWire"] = "ExtrudeWire";
    CSGSolidType["RevolveWire"] = "RevolveWire";
    CSGSolidType["SweepWire"] = "SweepWire";
    CSGSolidType["LoftWires"] = "LoftWires";
    CSGSolidType["Text3D"] = "Text3D";
})(CSGSolidType || (CSGSolidType = {}));
var CSGWireType;
(function (CSGWireType) {
    CSGWireType["Polygon"] = "Polygon";
    CSGWireType["Bezier"] = "Bezier";
    CSGWireType["BSpline"] = "BSpline";
})(CSGWireType || (CSGWireType = {}));
var SVGEdgeType;
(function (SVGEdgeType) {
    SVGEdgeType["Line"] = "Line";
    SVGEdgeType["BezierCubic"] = "BezierCubic";
    SVGEdgeType["BezierQuadratic"] = "BezierQuadratic";
    //TODO add Arc: "Arc"
})(SVGEdgeType || (SVGEdgeType = {}));
var CSGFaceType;
(function (CSGFaceType) {
    CSGFaceType["FaceFromWires"] = "FaceFromWires";
    CSGFaceType["SelectFaceFromShapeByAxis"] = "SelectFaceFromShapeByAxis";
    CSGFaceType["SelectFaceByIndex"] = "SelectFaceByIndex";
})(CSGFaceType || (CSGFaceType = {}));
var CSGVertexType;
(function (CSGVertexType) {
    CSGVertexType["FromPoint"] = "FromPoint";
    CSGVertexType["FromToShapeProjection"] = "FromToShapeProjection";
    CSGVertexType["FromClosestPointOnShapeProjection"] = "FromClosestPointOnShapeProjection";
})(CSGVertexType || (CSGVertexType = {}));
var CSGCompoundType;
(function (CSGCompoundType) {
    CSGCompoundType["FromFile"] = "FromFile";
})(CSGCompoundType || (CSGCompoundType = {}));



/***/ }),

/***/ "./src/csg/csgVertexFactory.js":
/*!*************************************!*\
  !*** ./src/csg/csgVertexFactory.js ***!
  \*************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _csgTypes__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./csgTypes */ "./src/csg/csgTypes.ts");
var __classPrivateFieldSet = (undefined && undefined.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {
    if (kind === "m") throw new TypeError("Private method is not writable");
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
    return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
};
var __classPrivateFieldGet = (undefined && undefined.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _CSGVertexFactory_instances, _CSGVertexFactory_geometry, _CSGVertexFactory_nodeCalculator, _CSGVertexFactory_createVertexFromPoint, _CSGVertexFactory_createVertexFromToShapeProjection, _CSGVertexFactory_createVertexFromClosestPointOnShapeProjection;

var CSGVertexFactory = /** @class */ (function () {
    function CSGVertexFactory(geometry, nodeCalculator) {
        _CSGVertexFactory_instances.add(this);
        _CSGVertexFactory_geometry.set(this, void 0);
        _CSGVertexFactory_nodeCalculator.set(this, void 0);
        __classPrivateFieldSet(this, _CSGVertexFactory_geometry, geometry, "f");
        __classPrivateFieldSet(this, _CSGVertexFactory_nodeCalculator, nodeCalculator, "f");
    }
    /**
        return: a shape.
     */
    CSGVertexFactory.prototype.createNodeShape = function (node) {
        if (node.Type !== _csgTypes__WEBPACK_IMPORTED_MODULE_0__.CSGNodeType.Vertex)
            throw new Error("Given node is not a ".concat(_csgTypes__WEBPACK_IMPORTED_MODULE_0__.CSGNodeType.Vertex));
        var shape = undefined;
        switch (node.Vertex.Type) {
            case _csgTypes__WEBPACK_IMPORTED_MODULE_0__.CSGVertexType.FromPoint:
                shape = __classPrivateFieldGet(this, _CSGVertexFactory_instances, "m", _CSGVertexFactory_createVertexFromPoint).call(this, node.Vertex);
                break;
            case _csgTypes__WEBPACK_IMPORTED_MODULE_0__.CSGVertexType.FromToShapeProjection:
                shape = __classPrivateFieldGet(this, _CSGVertexFactory_instances, "m", _CSGVertexFactory_createVertexFromToShapeProjection).call(this, node.Vertex);
                break;
            case _csgTypes__WEBPACK_IMPORTED_MODULE_0__.CSGVertexType.FromClosestPointOnShapeProjection:
                shape = __classPrivateFieldGet(this, _CSGVertexFactory_instances, "m", _CSGVertexFactory_createVertexFromClosestPointOnShapeProjection).call(this, node.Vertex);
                break;
            default:
                throw new Error("Vertex type ".concat(node.Vertex.Type, " is not supported."));
        }
        return shape;
    };
    return CSGVertexFactory;
}());
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (CSGVertexFactory);
_CSGVertexFactory_geometry = new WeakMap(), _CSGVertexFactory_nodeCalculator = new WeakMap(), _CSGVertexFactory_instances = new WeakSet(), _CSGVertexFactory_createVertexFromPoint = function _CSGVertexFactory_createVertexFromPoint(vertex) {
    var vertexShape = __classPrivateFieldGet(this, _CSGVertexFactory_geometry, "f").projections.createVertexFromPoint(vertex.Point);
    return vertexShape;
}, _CSGVertexFactory_createVertexFromToShapeProjection = function _CSGVertexFactory_createVertexFromToShapeProjection(vertex) {
    var projectionTargetShape = __classPrivateFieldGet(this, _CSGVertexFactory_nodeCalculator, "f").calculateNodeShapesWithCache(vertex.Shape)[0];
    var _a = __classPrivateFieldGet(this, _CSGVertexFactory_geometry, "f").projections.projectPointOntoShape(vertex.Point, vertex.Direction, projectionTargetShape), intersectionFound = _a.intersectionFound, point = _a.point, normal = _a.normal;
    // console.log("if: "+intersectionFound +" p: "+point);
    if (!intersectionFound) {
        throw new Error("No intersection found.");
    }
    var vertexShape = __classPrivateFieldGet(this, _CSGVertexFactory_geometry, "f").projections.createVertexFrom_gp_Pnt(point);
    vertexShape.userData = {
        normal: [normal.X(), normal.Y(), normal.Z()]
    };
    return vertexShape;
}, _CSGVertexFactory_createVertexFromClosestPointOnShapeProjection = function _CSGVertexFactory_createVertexFromClosestPointOnShapeProjection(vertex) {
    var projectionTargetShape = __classPrivateFieldGet(this, _CSGVertexFactory_nodeCalculator, "f").calculateNodeShapesWithCache(vertex.Shape)[0];
    var projectedPoint = __classPrivateFieldGet(this, _CSGVertexFactory_geometry, "f").projections.findClosestPointOnShape(vertex.Point, projectionTargetShape);
    var vertexShape = __classPrivateFieldGet(this, _CSGVertexFactory_geometry, "f").projections.createVertexFrom_gp_Pnt(projectedPoint);
    return vertexShape;
};


/***/ }),

/***/ "./src/csg/csgWireFactory.js":
/*!***********************************!*\
  !*** ./src/csg/csgWireFactory.js ***!
  \***********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _csgTypes__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./csgTypes */ "./src/csg/csgTypes.ts");
/* harmony import */ var _common_wires__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../common/wires */ "./src/common/wires.js");
var __classPrivateFieldSet = (undefined && undefined.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {
    if (kind === "m") throw new TypeError("Private method is not writable");
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
    return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
};
var __classPrivateFieldGet = (undefined && undefined.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _CSGWireFactory_instances, _CSGWireFactory_geometry, _CSGWireFactory_createPolygon, _CSGWireFactory_createBSpline, _CSGWireFactory_createBezier, _CSGWireFactory_createBezierFromSVGPath, _CSGWireFactory_createWireFromSVGPaths, _CSGWireFactory_fitBezier;


var CSGWireFactory = /** @class */ (function () {
    function CSGWireFactory(geometry) {
        _CSGWireFactory_instances.add(this);
        _CSGWireFactory_geometry.set(this, void 0);
        __classPrivateFieldSet(this, _CSGWireFactory_geometry, geometry, "f");
    }
    /**
        return: a shape.
     */
    CSGWireFactory.prototype.createNodeShape = function (node) {
        if (node.Type !== _csgTypes__WEBPACK_IMPORTED_MODULE_0__.CSGNodeType.Wire)
            throw new Error("Given node is not a ".concat(_csgTypes__WEBPACK_IMPORTED_MODULE_0__.CSGNodeType.Wire));
        var shape = undefined;
        switch (node.Wire.Type) {
            case _csgTypes__WEBPACK_IMPORTED_MODULE_0__.CSGWireType.Polygon:
                shape = __classPrivateFieldGet(this, _CSGWireFactory_instances, "m", _CSGWireFactory_createPolygon).call(this, node.Wire);
                break;
            case _csgTypes__WEBPACK_IMPORTED_MODULE_0__.CSGWireType.Bezier:
                shape = __classPrivateFieldGet(this, _CSGWireFactory_instances, "m", _CSGWireFactory_createBezier).call(this, node.Wire);
                break;
            case _csgTypes__WEBPACK_IMPORTED_MODULE_0__.CSGWireType.BSpline:
                shape = __classPrivateFieldGet(this, _CSGWireFactory_instances, "m", _CSGWireFactory_createBSpline).call(this, node.Wire);
                break;
            default:
                throw new Error("Wire type ".concat(node.Wire.Type, " is not supported."));
        }
        return shape;
    };
    return CSGWireFactory;
}());
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (CSGWireFactory);
_CSGWireFactory_geometry = new WeakMap(), _CSGWireFactory_instances = new WeakSet(), _CSGWireFactory_createPolygon = function _CSGWireFactory_createPolygon(wireData) {
    var wireShape = __classPrivateFieldGet(this, _CSGWireFactory_geometry, "f").wires.makePolygonWireFromPoins(wireData.Points, wireData.IsClosed);
    return wireShape;
}, _CSGWireFactory_createBSpline = function _CSGWireFactory_createBSpline(wireData) {
    var continuity = __classPrivateFieldGet(this, _CSGWireFactory_geometry, "f").wires.parseContinuityAs_GeomAbs_Shape(wireData.CurveContinuity);
    var wireShape = __classPrivateFieldGet(this, _CSGWireFactory_geometry, "f").wires.fitBSplineWireFromPoints(wireData.Points, wireData.IsClosed, continuity);
    return wireShape;
}, _CSGWireFactory_createBezier = function _CSGWireFactory_createBezier(wireData) {
    var continuity = __classPrivateFieldGet(this, _CSGWireFactory_geometry, "f").wires.parseContinuityAs_GeomAbs_Shape(wireData.CurveContinuity);
    if (wireData.Points !== undefined && wireData.Points != null) {
        return __classPrivateFieldGet(this, _CSGWireFactory_instances, "m", _CSGWireFactory_fitBezier).call(this, wireData);
    }
    else if (wireData.BezierSegments !== undefined && wireData.BezierSegments !== null) {
        return __classPrivateFieldGet(this, _CSGWireFactory_instances, "m", _CSGWireFactory_createBezierFromSVGPath).call(this, wireData);
    }
    else if (wireData.SVGPaths !== undefined && wireData.SVGPaths !== null) {
        return __classPrivateFieldGet(this, _CSGWireFactory_instances, "m", _CSGWireFactory_createWireFromSVGPaths).call(this, wireData);
    }
    else {
        throw new Error("WireData was wrong. WireData: " + JSON.stringify(wireData, null, 2));
    }
}, _CSGWireFactory_createBezierFromSVGPath = function _CSGWireFactory_createBezierFromSVGPath(wireData) {
    var wireShape = __classPrivateFieldGet(this, _CSGWireFactory_geometry, "f").wires.makeBezierFromSVGPath(wireData.BezierSegments, wireData.IsClosed);
    return wireShape;
}, _CSGWireFactory_createWireFromSVGPaths = function _CSGWireFactory_createWireFromSVGPaths(wireData) {
    var wireShape = __classPrivateFieldGet(this, _CSGWireFactory_geometry, "f").wires.makeSVGPathsWire(wireData.SVGPaths);
    return wireShape;
}, _CSGWireFactory_fitBezier = function _CSGWireFactory_fitBezier(wireData) {
    var continuity = __classPrivateFieldGet(this, _CSGWireFactory_geometry, "f").wires.parseContinuityAs_GeomAbs_Shape(wireData.CurveContinuity);
    var wireShape = __classPrivateFieldGet(this, _CSGWireFactory_geometry, "f").wires.makeBezierWireFromControlPoints(wireData.Points, wireData.IsClosed, continuity);
    // let wireShape = this.#geometry.wires.fitBezierWireFromPoints(wireData.Points, wireData.IsClosed, continuity);
    return wireShape;
};


/***/ }),

/***/ "./src/csg/csgWireOperationCalculator.js":
/*!***********************************************!*\
  !*** ./src/csg/csgWireOperationCalculator.js ***!
  \***********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _csgTypes__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./csgTypes */ "./src/csg/csgTypes.ts");
/* harmony import */ var _common_featureFlags__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./../common/featureFlags */ "./src/common/featureFlags.js");
var __classPrivateFieldSet = (undefined && undefined.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {
    if (kind === "m") throw new TypeError("Private method is not writable");
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
    return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
};
var __classPrivateFieldGet = (undefined && undefined.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _CSGWireOperationCalculator_instances, _CSGWireOperationCalculator_geometry, _CSGWireOperationCalculator_nodeCalculator, _CSGWireOperationCalculator_project, _CSGWireOperationCalculator_offsetWire;


var CSGWireOperationCalculator = /** @class */ (function () {
    function CSGWireOperationCalculator(geometry, nodeCalculator) {
        _CSGWireOperationCalculator_instances.add(this);
        _CSGWireOperationCalculator_geometry.set(this, void 0);
        _CSGWireOperationCalculator_nodeCalculator.set(this, void 0);
        __classPrivateFieldSet(this, _CSGWireOperationCalculator_geometry, geometry, "f");
        __classPrivateFieldSet(this, _CSGWireOperationCalculator_nodeCalculator, nodeCalculator, "f");
    }
    CSGWireOperationCalculator.prototype.calculateOperation = function (node) {
        if (node.Type !== _csgTypes__WEBPACK_IMPORTED_MODULE_0__.CSGNodeType.WireOperation)
            throw new Error("Given node is not an ".concat(_csgTypes__WEBPACK_IMPORTED_MODULE_0__.CSGNodeType.WireOperation));
        var shapes = undefined;
        switch (node.OperationType) {
            case _csgTypes__WEBPACK_IMPORTED_MODULE_0__.CSGWireOperationType.Project:
                shapes = __classPrivateFieldGet(this, _CSGWireOperationCalculator_instances, "m", _CSGWireOperationCalculator_project).call(this, node);
                break;
            case _csgTypes__WEBPACK_IMPORTED_MODULE_0__.CSGWireOperationType.Offset:
                shapes = __classPrivateFieldGet(this, _CSGWireOperationCalculator_instances, "m", _CSGWireOperationCalculator_offsetWire).call(this, node);
                break;
            default:
                throw new Error("Wire operation ".concat(node.Operation, " is unsupported yet."));
        }
        if (_common_featureFlags__WEBPACK_IMPORTED_MODULE_1__["default"].attachCSGNodeToShapeResult) {
            shapes.forEach(function (shape) {
                shape._node = node;
            });
        }
        return shapes;
    };
    return CSGWireOperationCalculator;
}());
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (CSGWireOperationCalculator);
_CSGWireOperationCalculator_geometry = new WeakMap(), _CSGWireOperationCalculator_nodeCalculator = new WeakMap(), _CSGWireOperationCalculator_instances = new WeakSet(), _CSGWireOperationCalculator_project = function _CSGWireOperationCalculator_project(node) {
    var wireNode = node.Wire;
    var targetNode = node.ProjectionTarget;
    var direction = node.Direction;
    var wireShape = __classPrivateFieldGet(this, _CSGWireOperationCalculator_nodeCalculator, "f").calculateNodeShapesWithCache(wireNode)[0];
    var targetShape = __classPrivateFieldGet(this, _CSGWireOperationCalculator_nodeCalculator, "f").calculateNodeShapesWithCache(targetNode)[0];
    var result = __classPrivateFieldGet(this, _CSGWireOperationCalculator_geometry, "f").wires.projectWireOntoFace(wireShape, targetShape, direction);
    return [result];
}, _CSGWireOperationCalculator_offsetWire = function _CSGWireOperationCalculator_offsetWire(node) {
    var wireNode = node.Wire;
    var offset = node.Offset;
    var joinType = node.JoinType;
    var wireShape = __classPrivateFieldGet(this, _CSGWireOperationCalculator_nodeCalculator, "f").calculateNodeShapesWithCache(wireNode)[0];
    var result = __classPrivateFieldGet(this, _CSGWireOperationCalculator_geometry, "f").wires.offsetWire(wireShape, offset, joinType);
    return [result];
};


/***/ }),

/***/ "./src/occt/booleans.ts":
/*!******************************!*\
  !*** ./src/occt/booleans.ts ***!
  \******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _common_compounds__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../common/compounds */ "./src/common/compounds.ts");

var booleans = {
    oc: null,
    setOpenCascade: function (openCascade) {
        this.oc = openCascade;
    },
    makeUnion: function (shapesToJoin, keepEdges, showProgress, donotbreak) {
        if (showProgress === void 0) { showProgress = false; }
        if (donotbreak === void 0) { donotbreak = false; }
        var oc = this.oc;
        donotbreak = true;
        var explodedShapes = shapesToJoin
            .map(function (shape) { return _common_compounds__WEBPACK_IMPORTED_MODULE_0__["default"].deCompoundShape(shape); })
            .flat(1);
        var combined = explodedShapes[0];
        var _loop_1 = function (i) {
            var shape1 = combined;
            var shape2 = explodedShapes[i];
            var breakIt = false; //donotbreak ? false : i>5;
            // @ts-ignore
            var MyProgressIndicator = oc.Message_ProgressIndicator_JS.extend("Message_ProgressIndicator_JS", {
                // @ts-ignore
                Show: function (theScope, isForce) {
                    if (!showProgress)
                        return;
                    if (!this._lastProgress)
                        this._lastProgress = 0;
                    var progress = this.GetPosition().toFixed(1);
                    if (Math.abs(progress - this._lastProgress) <= 0.001)
                        return;
                    this._lastProgress = progress;
                    console.log("Show", progress);
                },
                UserBreak: function () {
                    // console.log("break it? ", breakIt)
                    return breakIt;
                }
            });
            try {
                var p = new MyProgressIndicator();
                // console.log("p: ", p);
                // let progressRange = new oc.Message_ProgressRange_1();
                var combinedFuse = new oc.BRepAlgoAPI_Fuse_3(shape1, shape2, p.Start_1());
                combined = combinedFuse.IsDone()
                    ? combinedFuse.Shape()
                    : null;
                // progressRange.delete();
                combinedFuse.delete();
            }
            catch (error) {
                console.log("Error ", error);
            }
            if (combined == null) {
                return "break";
            }
        };
        for (var i = 1; i < explodedShapes.length; i++) {
            var state_1 = _loop_1(i);
            if (state_1 === "break")
                break;
        }
        if (combined && !keepEdges) {
            var fusor = new oc.ShapeUpgrade_UnifySameDomain_2(combined, true, false, false);
            fusor.Build();
            combined = fusor.Shape();
            fusor.delete();
        }
        return combined;
    },
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (booleans);


/***/ }),

/***/ "./src/occt/boundingBoxes.ts":
/*!***********************************!*\
  !*** ./src/occt/boundingBoxes.ts ***!
  \***********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
var boundingBoxes = {
    oc: null,
    setOpenCascade: function (openCascade) {
        this.oc = openCascade;
    },
    getOBB: function (shape, useTriangulation) {
        var oc = this.oc;
        useTriangulation = useTriangulation !== null && useTriangulation !== void 0 ? useTriangulation : true;
        var obb = new oc.Bnd_OBB_1();
        oc.BRepBndLib.AddOBB(shape, obb, useTriangulation, true, true);
        var obbox = {
            isValid: false,
            center: [NaN, NaN, NaN],
            hsize: [NaN, NaN, NaN],
            xdir: [NaN, NaN, NaN],
            ydir: [NaN, NaN, NaN],
            zdir: [NaN, NaN, NaN]
        };
        if (!obb.IsVoid()) {
            var center = obb.Center();
            var xhSize = obb.XHSize();
            var yhSize = obb.YHSize();
            var zhSize = obb.ZHSize();
            var xDir = obb.XDirection(); // X direction
            var yDir = obb.YDirection(); // Y direction
            var zDir = obb.ZDirection(); // Z direction
            obbox.isValid = true;
            obbox.center = [center.X(), center.Y(), center.Z()];
            obbox.hsize = [xhSize, yhSize, zhSize];
            obbox.xdir = [xDir.X(), xDir.Y(), xDir.Z()];
            obbox.ydir = [yDir.X(), yDir.Y(), yDir.Z()];
            obbox.zdir = [zDir.X(), zDir.Y(), zDir.Z()];
        }
        obb.delete();
        return obbox;
    },
    getAABB: function (shape, useTriangulation) {
        var oc = this.oc;
        useTriangulation = useTriangulation !== null && useTriangulation !== void 0 ? useTriangulation : true;
        var aabb = new oc.Bnd_Box_1();
        oc.BRepBndLib.Add(shape, aabb, useTriangulation);
        var aabbox = { isValid: false, min: [NaN, NaN, NaN], max: [NaN, NaN, NaN] };
        if (!aabb.IsVoid()) {
            var xmin = { current: 0 }, ymin = { current: 0 }, zmin = { current: 0 }, xmax = { current: 0 }, ymax = { current: 0 }, zmax = { current: 0 };
            aabb.Get(xmin, ymin, zmin, xmax, ymax, zmax);
            aabbox.isValid = true;
            aabbox.min = [xmin.current, ymin.current, zmin.current];
            aabbox.max = [xmax.current, ymax.current, zmax.current];
        }
        aabb.delete();
        return aabbox;
    },
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (boundingBoxes);


/***/ }),

/***/ "./src/occt/faces.ts":
/*!***************************!*\
  !*** ./src/occt/faces.ts ***!
  \***************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _common_compounds__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../common/compounds */ "./src/common/compounds.ts");

var faces = {
    oc: null,
    setOpenCascade: function (openCascade) {
        this.oc = openCascade;
    },
    /**
     *
     * @param face: TopoDS_Face
     * @param stepU: number
     * @param stepV: number
     * @return array of normals : gp_Dir[]
     */
    sampleFaceNormals: function (face, stepU, stepV) {
        var oc = this.oc;
        // Get UV domain range
        var uMin = { current: 0 }, uMax = { current: 0 }, vMin = { current: 0 }, vMax = { current: 0 };
        oc.BRepTools.UVBounds_1(face, uMin, uMax, vMin, vMax);
        var normals = [];
        // // Adapt the face to a surface to evaluate it
        // let adaptorSurface = new oc.BRepAdaptor_Surface_2(face, true);
        // let adaptorSurfaceHandle = new oc.Handle_Geom_Surface_2(adaptorSurface);
        // Handle(Geom_Surface) surface = BRep_Tool.Surface2(aFace);
        var surface = oc.BRep_Tool.Surface_2(face);
        // Create SLProps to evaluate surface properties
        var surfaceProps = new oc.GeomLProp_SLProps_2(surface, 1, 0.01);
        for (var u = uMin.current; u <= uMax.current; u += stepU) {
            for (var v = vMin.current; v <= vMax.current; v += stepV) {
                surfaceProps.SetParameters(u, v);
                if (surfaceProps.IsNormalDefined()) {
                    var pointOnSurface = surfaceProps.Value();
                    var normal = surfaceProps.Normal();
                    normals.push(normal);
                }
            }
        }
        surface.delete();
        surfaceProps.delete();
        return normals;
    },
    /**
     * @param wireShapes [wire, wire, ...] Array of shapes
     * @return {TopoDS_Face}
     */
    wiresToFaces: function (wireShapes) {
        var oc = this.oc;
        wireShapes = wireShapes.map(function (wireShape) { return _common_compounds__WEBPACK_IMPORTED_MODULE_0__["default"].listWiresInsideCompound(wireShape); }).flat(1);
        // wireShapes = wireShapes.map(wireShape => compounds.listWiresInsideCompound(wireShape)).flat(1);
        var wiresCompound = _common_compounds__WEBPACK_IMPORTED_MODULE_0__["default"].makeCompound(wireShapes);
        var face = new oc.TopoDS_Face();
        var done = oc.BOPAlgo_Tools.WiresToFaces(wiresCompound, face, .001);
        return face;
    },
    // TODO: chat gpt on boolean on wires:
    // Open CASCADE Technology (OCCT) is a software development platform that provides tools for 3D surface and solid modeling, visualization, data exchange, and more. If you're working with OCCT and want to perform Boolean operations between flat wires (like two flat circles in 3D space), you can certainly do that. However, keep in mind that Boolean operations like union, difference, and intersection are typically applied between solids or surfaces rather than wires.
    //
    // If you're aiming to find the Boolean sum of two flat wires like circles, you might want to convert them into faces (surfaces) first. Here's a basic overview:
    //
    // Create two flat circles in 3D space.
    //
    //     Use GC_MakeCircle to create the circles.
    // Create an edge from the circle using BRepBuilderAPI_MakeEdge.
    //     Convert the edge to a wire using BRepBuilderAPI_MakeWire.
    // Convert the wires to faces.
    //
    // Use BRepBuilderAPI_MakeFace to generate a planar face from the wire.
    //     Perform the Boolean operation.
    //
    // Use BRepAlgoAPI_Fuse for a union operation.
    //     Use BRepAlgoAPI_Cut for a difference operation.
    //     Use BRepAlgoAPI_Common for an intersection operation.
    //     Remember that when working with Boolean operations, it's essential to ensure that the geometries are correctly defined and don't contain errors, as these can sometimes cause the Boolean operations to fail or yield unexpected results.
    //
    // Lastly, be aware that the API or method names mentioned above are based on the state of OCCT as of my last training data in September 2021. The library could have been updated or changed since then, so always consult the latest documentation or resources when working with the OCCT platform.
    // TODO: other wire "primitives"
    //     please list other occt methods to create wires like GC MakeCircle ?
    //         ChatGPT
    //         Open CASCADE Technology (OCCT) provides a wide range of methods to create wires from various geometric and topological constructs. Here's a list of some methods to generate curves, which can subsequently be transformed into edges and wires:
    //
    //     Open CASCADE Technology (OCCT) provides a wide range of methods to create wires from various geometric and topological constructs. Here's a list of some methods to generate curves, which can subsequently be transformed into edges and wires:
    //
    // 1. **Lines**:
    // - `GC_MakeLine`: Creates a line from two points or a point and a direction.
    //
    // 2. **Circles**:
    // - `GC_MakeCircle`: As you mentioned, it creates a circle using different inputs, such as three points, a center and a point, a center and a radius, etc.
    //
    // 3. **Ellipses**:
    // - `GC_MakeEllipse`: Creates an ellipse using a major axis, a minor axis, and the radius ratios.
    // - `GC_MakeEllipsoidalHelix`: Creates an ellipsoidal helix.
    //
    // 4. **Hyperbolas**:
    // - `GC_MakeHyperbola`: Creates a hyperbola using its main axis, another axis, and the major and minor radius.
    //
    // 5. **Parabolas**:
    // - `GC_MakeParabola`: Creates a parabola using its axis and a focal length.
    //
    // 6. **Segmented curves**:
    // - `GC_MakeArcOfCircle`: Creates a circular arc from three points or other definitions.
    // - `GC_MakeSegment`: Creates a segment between two points on a given curve.
    //
    // 7. **Splines**:
    // - `GeomAPI_PointsToBSpline`: Creates a B-spline curve from a series of points.
    //
    // 8. **Offset curves**:
    // - `GC_MakeOffsetCurve`: Creates a curve offset from another curve.
    //
    // 9. **Interpolated curves**:
    // - `GeomAPI_Interpolate`: Creates a curve that interpolates a series of points, with optional tangents.
    //
    // 10. **Helix**:
    // - `GC_MakeHelix`: Creates a helical curve with a given pitch, radius, and orientation.
    //
    //     After creating the desired curve using one of the methods above, you can use `BRepBuilderAPI_MakeEdge` to create an edge from the curve. Once the edge is available, you can create a wire using `BRepBuilderAPI_MakeWire`.
    //
    //     Remember, this list is not exhaustive. OCCT provides a rich set of tools to create various geometric and topological constructs. Always refer to the official OCCT documentation to find the latest and most comprehensive list of methods available.
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (faces);


/***/ }),

/***/ "./src/occt/lofts.ts":
/*!***************************!*\
  !*** ./src/occt/lofts.ts ***!
  \***************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _shapes__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./shapes */ "./src/occt/shapes.js");

var lofts = {
    oc: null,
    setOpenCascade: function (openCascade) {
        this.oc = openCascade;
    },
    /**
     *
     */
    loftThroughWires: function (wires, makeSolid, checkCompatibility, ruled) {
        if (makeSolid === void 0) { makeSolid = true; }
        if (checkCompatibility === void 0) { checkCompatibility = false; }
        if (ruled === void 0) { ruled = false; }
        var oc = this.oc;
        var loft = new oc.BRepOffsetAPI_ThruSections(makeSolid, ruled, 1.0e-06);
        wires.forEach(function (wire) {
            loft.AddWire(wire);
        });
        loft.CheckCompatibility(checkCompatibility);
        var pipeShape = loft.Shape();
        var loftedShape = _shapes__WEBPACK_IMPORTED_MODULE_0__["default"].getActualTypeOfShape(pipeShape);
        pipeShape.delete();
        loft.delete();
        return loftedShape;
    },
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (lofts);


/***/ }),

/***/ "./src/occt/occtio.ts":
/*!****************************!*\
  !*** ./src/occt/occtio.ts ***!
  \****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
var occtio = {
    oc: null,
    setOpenCascade: function (openCascade) {
        this.oc = openCascade;
    },
    /**
     * https://github.com/donalffons/opencascade.js/issues/222
     *
     * @param shape
     * @param points
     */
    shapeToBRep: function (shape) {
        var oc = this.oc;
        var theProgress = new oc.Message_ProgressRange_1();
        var result = oc.BRepTools.Write_3(shape, "test", theProgress);
        var brep = oc.FS.readFile("/" + "test", { encoding: "utf8" });
        oc.FS.unlink("/" + "test");
        // console.log(result)
        // console.log(brep)
        return brep;
    },
    bRepToShape: function (shapeBRepText) {
        var oc = this.oc;
        var theProgress = new oc.Message_ProgressRange_1();
        oc.FS.writeFile("/" + "test", shapeBRepText, { encoding: "utf8" });
        var shape = new oc.TopoDS_Shape();
        var bRepBuilder = new oc.BRep_Builder();
        var ok = oc.BRepTools.Read_2(shape, "test", bRepBuilder, theProgress);
        oc.FS.unlink("/" + "test");
        if (!ok) {
            throw new Error("Could not read a shape from string:\n" + shapeBRepText);
        }
        return shape;
    },
    textToShape: function (stepText, fileType) {
        var oc = this.oc;
        // const fileName = "ubinputs.filename";
        // const stepText = stepText;
        // const fileType = "step";
        // console.log(" ### stepText: ", stepText);
        // console.log(" ### stepType: ", fileType);
        // return undefined;
        if (fileType === "brep") {
            return this.bRepToShape(stepText);
        }
        // Writes the uploaded file to Emscripten's Virtual Filesystem
        oc.FS.createDataFile('/', "file.".concat(fileType), stepText, true, true, true);
        // Choose the correct OpenCascade file parsers to read the CAD file
        var reader = null;
        if (fileType === 'step') {
            reader = new oc.STEPControl_Reader_1();
        }
        else if (fileType === 'iges') {
            reader = new oc.IGESControl_Reader_1();
        }
        else {
            console.error('opencascade can\'t parse this extension! (yet)');
        }
        var readResult = reader.ReadFile("file.".concat(fileType)); // Read the file
        if (readResult === oc.IFSelect_ReturnStatus.IFSelect_RetDone) {
            // Translate all transferable roots to OpenCascade
            var messageProgress = new oc.Message_ProgressRange_1();
            var numRootsTransferred = reader.TransferRoots(messageProgress);
            messageProgress.delete();
            var stepShape = reader.OneShape();
            // let adjustedShape;
            // if (adjustZtoY)
            // {
            //     let mirroredShape = this.och.mirrorAlongNormal(
            //         { shape: stepShape, origin: [0, 0, 0], normal: [0, 0, 1] }
            //     );
            //     adjustedShape = this.och.rotate({ shape: mirroredShape, axis: [1, 0, 0], angle: 90 });
            //     mirroredShape.delete();
            // }
            // Out with the old, in with the new!
            // Remove the file when we're done (otherwise we run into errors on reupload)
            oc.FS.unlink("/file.".concat(fileType));
            // if(adjustedShape)
            // {
            //     stepShape.delete();
            //     stepShape = adjustedShape;
            // }
            return stepShape;
        }
        else {
            console.error('Something in OCCT went wrong trying to read a shape from step text: ', stepText);
        }
        return undefined;
    }
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (occtio);


/***/ }),

/***/ "./src/occt/projections.ts":
/*!*********************************!*\
  !*** ./src/occt/projections.ts ***!
  \*********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _common_openCascadeHelper_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../common/openCascadeHelper.js */ "./src/common/openCascadeHelper.js");
/* harmony import */ var _common_utils_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../common/utils.js */ "./src/common/utils.js");

// import utils from "../common/utils";

var projections = {
    oc: null,
    setOpenCascade: function (openCascade) {
        this.oc = openCascade;
    },
    /**
     * Taken from chatGPT: can you show me an example on how to project an arbitrary point onto a TopoDS_Shape solid face ?
     * @param shape TopoDS Shape
     * @param points: [[x,y,z], ... ]
     */
    projectPointsOnShape: function (shape, points) {
        // // Create a TopoDS_Shape object representing your solid face
        // TopoDS_Shape face = ...;
        //
        // // Get the surface geometry of the face
        // Handle(Geom_Surface) surface = BRep_Tool::Surface(TopoDS::Face(face));
        //
        // // Create a GeomAPI_ProjectPointOnSurf object to project the point onto the surface
        // GeomAPI_ProjectPointOnSurf proj(point, surface);
        //
        // // Get the projected point on the surface
        // gp_Pnt projectedPoint = proj.NearestPoint();
        // or
        // // First, we need to include the relevant OpenCASCADE headers
        // #include <TopoDS_Shape.hxx>
        // #include <TopoDS_Face.hxx>
        // #include <BRepAdaptor_Surface.hxx>
        // #include <GeomAPI_ProjectPointOnSurf.hxx>
        //
        // // Let's assume we already have a TopoDS_Shape object representing
        // // the solid and a face of the solid that we want to project the point onto
        // TopoDS_Shape solid;
        // TopoDS_Face face;
        //
        // // Next, we create a surface adaptor for the face
        // BRepAdaptor_Surface surface_adaptor(face);
        //
        // // Then, we create a GeomAPI_ProjectPointOnSurf object, which will
        // // be used to project the point onto the face
        // GeomAPI_ProjectPointOnSurf proj;
        // proj.Init(surface_adaptor);
        //
        // // Now, we can define the point that we want to project onto the face
        // gp_Pnt point(10.0, 0.0, 0.0);
        //
        // // Finally, we can project the point onto the face using the
        // // GeomAPI_ProjectPointOnSurf object
        // proj.Perform(point);
        //
        // // The projected point is stored in the proj object, and we can
        // // access it using the following code:
        // gp_Pnt projected_point = proj.NearestPoint();
    },
    /**
     *
     * @param point: [x,y,z]
     * @param direction: [x,y,z]
     * @param target
     * @return projected point : gp_Pnt
     */
    projectPointOntoShape: function (point, direction, target) {
        var _this = this;
        var oc = this.oc;
        var pnt = _common_utils_js__WEBPACK_IMPORTED_MODULE_1__["default"].convertTo_gp_Pnt(point);
        var dir = _common_utils_js__WEBPACK_IMPORTED_MODULE_1__["default"].convertTo_gp_Dir(direction);
        // let dir = new oc.gp_Dir_4(direction[0], direction[1], (direction[2]) ? direction[2] : 0);
        var ray = new oc.gp_Lin_3(pnt, dir);
        var isIntersecting = false;
        var minDist = Number.MAX_VALUE;
        var closestIntersection = null;
        var normalDirection = null;
        _common_openCascadeHelper_js__WEBPACK_IMPORTED_MODULE_0__["default"].ForEachFace(target, function (faceIndex, face) {
            var intersector = new oc.IntCurvesFace_Intersector(face, _this.oc.Precision.Confusion(), true, true);
            intersector.Perform_1(ray, 0.0, Number.MAX_VALUE);
            if (intersector.IsDone() && intersector.NbPnt() > 0) {
                for (var i = 1; i <= intersector.NbPnt(); i++) {
                    var intersectionPoint = intersector.Pnt(i);
                    var dist = pnt.SquareDistance(intersectionPoint);
                    if (dist < minDist) {
                        minDist = dist;
                        closestIntersection = intersectionPoint;
                        isIntersecting = true;
                        var _a = _this.getFaceNormalFromPoint(face, closestIntersection), normalFound = _a.normalFound, normal = _a.normal;
                        normalDirection = normal;
                    }
                }
            }
            intersector.delete();
        });
        return { intersectionFound: isIntersecting, point: closestIntersection, normal: normalDirection };
    },
    /**
     * gp_Dir normalDirection;
     *
     * if (isIntersecting) {
     *     // Get the face containing the closest intersection point
     *     const TopoDS_Face& intersectedFace = TopoDS::Face(faceExplorer.Current());
     *
     *     // Retrieve the underlying surface of the face
     *     Handle(Geom_Surface) surface;
     *     TopLoc_Location location;
     *     surface = BRep_Tool::Surface(intersectedFace, location);
     *
     *     // Convert world space coordinates to the local parameters (u, v) of the surface
     *     GeomAPI_ProjectPointOnSurf projector(closestIntersection, surface);
     *     Standard_Real u, v;
     *     projector.LowerDistanceParameters(u, v);
     *
     *     // Define a local properties computation object
     *     BRepAdaptor_Surface surfaceAdaptor(intersectedFace);
     *     BRepLProp_SLProps localProps(surfaceAdaptor, 2, Precision::Confusion());
     *
     *     // Set the point of interest using the local parameters (u, v)
     *     localProps.SetParameters(u, v);
     *
     *     if (localProps.IsNormalDefined()) {
     *         normalDirection = localProps.Normal();
     *         if (intersectedFace.Orientation() == TopAbs_REVERSED) {
     *             normalDirection.Reverse();
     *         }
     *     }
     * }
     */
    getFaceNormalFromPoint: function (face, pnt) {
        // Retrieve the underlying surface of the face
        // Handle(Geom_Surface) surface;
        var location = new this.oc.TopLoc_Location_1();
        var surface = this.oc.BRep_Tool.Surface_1(face, location);
        // Convert world space coordinates to the local parameters (u, v) of the surface
        var projector = new this.oc.GeomAPI_ProjectPointOnSurf_2(pnt, surface, this.oc.Extrema_ExtAlgo);
        var u = { current: 0 };
        var v = { current: 0 };
        projector.LowerDistanceParameters(u, v);
        // Define a local properties computation object
        var surfaceAdaptor = new this.oc.BRepAdaptor_Surface_2(face, false);
        var localProps = new this.oc.BRepLProp_SLProps_2(surfaceAdaptor, 2, this.oc.Precision.Confusion());
        // Set the point of interest using the local parameters (u, v)
        localProps.SetParameters(u.current, v.current);
        var normalDirection = null;
        if (localProps.IsNormalDefined()) {
            normalDirection = localProps.Normal();
            // console.log("face orientation is: "+face.Orientation_1() == TopAbs_FORWARD);
            // if (face.Orientation_1() == this.oc!.TopAbs_Orientation.TopAbs_REVERSED) {
            //     normalDirection.Reverse();
            // }
        }
        location.delete();
        surface.delete();
        projector.delete();
        surfaceAdaptor.delete();
        localProps.delete();
        return { normalFound: normalDirection !== null, normal: normalDirection };
    },
    // /**
    //  *
    //  * @param point: [x,y,z]
    //  * @param direction: [x,y,z]
    //  * @param target
    //  * @return projected point : gp_Pnt
    //  */
    // findClosestPointOnShape(point: number[], target: TopoDS_Shape) {
    //     const oc = this.oc!;
    //
    //     let projectedPoint : gp_Pnt | null = null;
    //    
    //     och.ForEachFace(target, (faceIndex : number, face : TopoDS_Face) => {
    //        
    //         if (projectedPoint) return;
    //        
    //         let surface : Handle_Geom_Surface = oc.BRep_Tool.Surface_2(face);
    //         let pnt : gp_Pnt = utils.convertTo_gp_Pnt(point);
    //         let proj : GeomAPI_ProjectPointOnSurf = new oc.GeomAPI_ProjectPointOnSurf_2(pnt, surface, oc.Extrema_ExtAlgo);
    //         projectedPoint = proj.NearestPoint();
    //        
    //         pnt.delete();
    //         proj.delete();
    //     });
    //
    //     return projectedPoint;
    // },
    /**
     *
     * @param point: [x,y,z]
     * @param target
     * @return projected point : gp_Pnt
     */
    findClosestPointOnShape: function (point, target) {
        var oc = this.oc;
        var projectedPoint = null;
        _common_openCascadeHelper_js__WEBPACK_IMPORTED_MODULE_0__["default"].ForEachFace(target, function (faceIndex, face) {
            if (projectedPoint)
                return;
            var surface = oc.BRep_Tool.Surface_2(face);
            var uMin = { current: 0 }, uMax = { current: 0 }, vMin = { current: 0 }, vMax = { current: 0 };
            oc.BRepTools.UVBounds_1(face, uMin, uMax, vMin, vMax);
            var pnt = _common_utils_js__WEBPACK_IMPORTED_MODULE_1__["default"].convertTo_gp_Pnt(point);
            var proj = new oc.GeomAPI_ProjectPointOnSurf_2(pnt, surface, oc.Extrema_ExtAlgo);
            // console.log("### projection points: "+proj.NbPoints());
            var nearestPnt = proj.NearestPoint();
            // Check if this nearest point is truly within the face's actual boundaries
            // let uv: gp_Pnt2d = proj.LowerDistanceParameters();
            var u = { current: 0 };
            var v = { current: 0 };
            proj.LowerDistanceParameters(u, v);
            var faceClassifier = new oc.BRepTopAdaptor_FClass2d(face, oc.Precision.PConfusion_2());
            var uvPnt = new oc.gp_Pnt2d_3(u.current, v.current);
            var state = faceClassifier.Perform(uvPnt, true);
            if (state == oc.TopAbs_State.TopAbs_ON || state == oc.TopAbs_State.TopAbs_IN) {
                projectedPoint = nearestPnt;
            }
            else {
                //TODO: here we need to go and find the closest point to any edge of this face and compare the found point to 
                // closest points from other faces or their edges
                // from this set we need to get the one that is closest to the input point.
                // to check: should be classify on-edge-projected points if they are actually part of the edge ? (do edges have uv coordinates as well, well singe dimension ofcourse...) 
            }
            pnt.delete();
            proj.delete();
            uvPnt.delete();
            faceClassifier.delete();
        });
        if (projectedPoint === null) {
            throw new Error("Did not manage to find closest point.");
        }
        return projectedPoint;
    },
    //     when it comes to edges do we also need to classify an edge nearest projected point if its actually on the egde ?
    //
    //         ChatGPT
    //         Yes, when dealing with edges, especially in the context of more complex shapes, it is possible for the projection to lie outside the actual parametric range of the edge. For example, imagine you project a point onto a curved edge, and the closest point on the underlying curve is beyond the end of the edge. In such a case, the point isn't on the actual edge, even though it's on the curve the edge is based on.
    //
    //     To confirm that the projected point lies on the edge, you'd need to check if the projected parameter is within the parametric range of the edge.
    //
    //     Here's how you can do that:
    //
    //     When you obtain the underlying curve of the edge using BRep_Tool::Curve, also retrieve the parameter range (firstParam and lastParam).
    // After projecting the point onto the curve, retrieve the parameter of the projection using GeomAPI_ProjectPointOnCurve::LowerDistanceParameter().
    //     Check if the projected parameter is within the range [firstParam, lastParam].
    //     Here's an addition to the previous code that performs this check:
    //
    // javascript
    // Copy code
    // /**
    //  *
    //  * @param point: [x, y, z]
    //  * @param edge: TopoDS_Edge
    //  * @return closest point : gp_Pnt | null
    //  */
    // findClosestPointOnEdge(point: number[], edge: TopoDS_Edge) {
    //     const oc = this.oc!;
    //
    //     // Convert the array to a gp_Pnt
    //     let pnt = new oc.gp_Pnt(point[0], point[1], point[2]);
    //
    //     // Extract the underlying geometric curve from the edge
    //     let firstParam = new oc.Standard_Real();
    //     let lastParam = new oc.Standard_Real();
    //     let curve = oc.BRep_Tool.Curve(edge, firstParam, lastParam);
    //
    //     // Project the point onto the curve
    //     let project = new oc.GeomAPI_ProjectPointOnCurve(pnt, curve);
    //
    //     // Check if the projected point lies within the edge's parameter range
    //     let param = project.LowerDistanceParameter();
    //     if (param < firstParam.Value() || param > lastParam.Value()) {
    //         // The projection is outside the range of the edge
    //         pnt.delete();
    //         firstParam.delete();
    //         lastParam.delete();
    //         curve.delete();
    //         project.delete();
    //         return null;
    //     }
    //
    //     // Get the nearest point on the curve
    //     let nearestPoint = project.NearestPoint();
    //
    //     pnt.delete();
    //     firstParam.delete();
    //     lastParam.delete();
    //     curve.delete();
    //     project.delete();
    //
    //     return nearestPoint;
    // }
    createVertexFromPoint: function (point) {
        var oc = this.oc;
        var pnt = _common_utils_js__WEBPACK_IMPORTED_MODULE_1__["default"].convertTo_gp_Pnt(point);
        var vertex = this.createVertexFrom_gp_Pnt(pnt);
        return vertex;
    },
    createVertexFrom_gp_Pnt: function (pnt) {
        var oc = this.oc;
        var makeVertex = new oc.BRepBuilderAPI_MakeVertex(pnt);
        var vertex = makeVertex.Vertex();
        return vertex;
    },
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (projections);


/***/ }),

/***/ "./src/occt/shapes.js":
/*!****************************!*\
  !*** ./src/occt/shapes.js ***!
  \****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _common_math__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../common/math */ "./src/common/math.js");

var shapes = {
    setOpenCascade: function (openCascade) {
        this.oc = openCascade;
    },
    // export declare type TopAbs_ShapeEnum = {
    //     TopAbs_COMPOUND: {};
    //     TopAbs_COMPSOLID: {};
    //     TopAbs_SOLID: {};
    //     TopAbs_SHELL: {};
    //     TopAbs_FACE: {};
    //     TopAbs_WIRE: {};
    //     TopAbs_EDGE: {};
    //     TopAbs_VERTEX: {};
    //     TopAbs_SHAPE: {};
    // }
    getShapeTypeAsString: function (shape) {
        var oc = this.oc;
        var t = shape.ShapeType();
        if (t === oc.TopAbs_ShapeEnum.TopAbs_COMPOUND)
            return "TopAbs_COMPOUND";
        if (t === oc.TopAbs_ShapeEnum.TopAbs_COMPSOLID)
            return "TopAbs_COMPSOLID";
        if (t === oc.TopAbs_ShapeEnum.TopAbs_SOLID)
            return "TopAbs_SOLID";
        if (t === oc.TopAbs_ShapeEnum.TopAbs_SHELL)
            return "TopAbs_SHELL";
        if (t === oc.TopAbs_ShapeEnum.TopAbs_FACE)
            return "TopAbs_FACE";
        if (t === oc.TopAbs_ShapeEnum.TopAbs_WIRE)
            return "TopAbs_WIRE";
        if (t === oc.TopAbs_ShapeEnum.TopAbs_EDGE)
            return "TopAbs_EDGE";
        if (t === oc.TopAbs_ShapeEnum.TopAbs_VERTEX)
            return "TopAbs_VERTEX";
        if (t === oc.TopAbs_ShapeEnum.TopAbs_SHAPE)
            return "TopAbs_SHAPE";
        throw new Error("Unknowsn shape type: '" + t + "'");
    },
    getActualTypeOfShape: function (shape) {
        var result = shape;
        if (shape.ShapeType() === this.oc.TopAbs_ShapeEnum.TopAbs_EDGE) {
            result = this.oc.TopoDS.Edge_1(shape);
        }
        else if (shape.ShapeType() === this.oc.TopAbs_ShapeEnum.TopAbs_WIRE) {
            result = this.oc.TopoDS.Wire_1(shape);
        }
        else if (shape.ShapeType() === this.oc.TopAbs_ShapeEnum.TopAbs_VERTEX) {
            result = this.oc.TopoDS.Vertex_1(shape);
        }
        else if (shape.ShapeType() === this.oc.TopAbs_ShapeEnum.TopAbs_SOLID) {
            result = this.oc.TopoDS.Solid_1(shape);
        }
        else if (shape.ShapeType() === this.oc.TopAbs_ShapeEnum.TopAbs_SHELL) {
            result = this.oc.TopoDS.Shell_1(shape);
        }
        else if (shape.ShapeType() === this.oc.TopAbs_ShapeEnum.TopAbs_FACE) {
            result = this.oc.TopoDS.Face_1(shape);
        }
        else if (shape.ShapeType() === this.oc.TopAbs_ShapeEnum.TopAbs_COMPSOLID) {
            result = this.oc.TopoDS.CompSolid_1(shape);
        }
        else if (shape.ShapeType() === this.oc.TopAbs_ShapeEnum.TopAbs_COMPOUND) {
            result = this.oc.TopoDS.Compound_1(shape);
        }
        else {
            result = shape;
        }
        return result;
    },
    clone: function () {
        var transformation = new this.oc.gp_Trsf_1();
        transformation.SetTranslation_1(new this.oc.gp_Vec_4(0, 0, 0));
        var location = new this.oc.TopLoc_Location_2(transformation);
        return shape.Moved(location, true);
    },
    /**
     *
     * @param shape
     * @param v [x,y,z]
     */
    translate: function (shape, v) {
        var transformation = new this.oc.gp_Trsf_1();
        transformation.SetTranslation_1(new this.oc.gp_Vec_4(v[0], v[1], v[2]));
        var location = new this.oc.TopLoc_Location_2(transformation);
        shape.Move(location, true);
        return shape;
    },
    /**
     *
     * @param shape
     * @param v gp_Vec
     */
    translate_gp_Vec: function (shape, v) {
        var transformation = new this.oc.gp_Trsf_1();
        transformation.SetTranslation_1(v);
        var location = new this.oc.TopLoc_Location_2(transformation);
        shape.Move(location, true);
        return shape;
    },
    rotate_gp_Quaternion: function (shape, q) {
        var transformation = new this.oc.gp_Trsf_1();
        transformation.SetRotation_2(q);
        var location = new this.oc.TopLoc_Location_2(transformation);
        shape.Move(location, true);
        return shape;
    },
    /**
     *
     * @param shape
     * @param v gp_Vec
     * @param q gp-Quaternion
     * @returns {*}
     */
    translateAndRotate: function (shape, v, q) {
        var transformation = new this.oc.gp_Trsf_1();
        transformation.SetRotationPart(q);
        transformation.SetTranslationPart(v);
        var location = new this.oc.TopLoc_Location_2(transformation);
        shape.Move(location, true);
        return shape;
    },
    listShapeVerticesAsTopoDS_Vertex: function (shape) {
        var oc = this.oc;
        var vertices = [];
        var anExplorer = new oc.TopExp_Explorer_1();
        for (anExplorer.Init(shape, oc.TopAbs_ShapeEnum.TopAbs_VERTEX, oc.TopAbs_ShapeEnum.TopAbs_SHAPE); anExplorer.More(); anExplorer.Next()) {
            vertices.push(anExplorer.Current());
        }
        return vertices;
    },
    /**
     *
     * @param shape
     * @returns {*[]} list shape's vertices as gp_Points
     */
    listShapeVerticesAsPoints: function (shape) {
        var oc = this.oc;
        var points = [];
        var anExplorer = new oc.TopExp_Explorer_1();
        for (anExplorer.Init(shape, oc.TopAbs_ShapeEnum.TopAbs_VERTEX, oc.TopAbs_ShapeEnum.TopAbs_SHAPE); anExplorer.More(); anExplorer.Next()) {
            // let vertex = anExplorer.Current();
            var vertex = oc.TopoDS.Vertex_1(anExplorer.Current());
            // //// console.log("listShapeVerticesAsPoints vertex: "+this.getShapeType(vertex))
            var gp_Pnt_point = oc.BRep_Tool.Pnt(vertex);
            points.push(gp_Pnt_point);
        }
        return points;
    },
    /**
     * Checks shape to plane orientaiton.
     * @param shape
     * @param planePoint [x,y,z]
     * @param planeNormal [x,y,z]
     */
    getShapeToPlaneOrientation: function (shape, planePoint, planeNormal) {
        //// console.log("getShapeToPlaneOrientation() shape: "+shape);
        var oc = this.oc;
        var ppXYZ = new oc.gp_XYZ_2(planePoint[0], planePoint[1], planePoint[2]);
        var pnXYZ = new oc.gp_XYZ_2(planeNormal[0], planeNormal[1], planeNormal[2]);
        // pnXYZ.Normalize();
        var result = {
            hasPositiveVertices: false,
            hasNegativeVertices: false,
            hasOnPlaneZeroVertices: false,
            get isAllPositive() { return this.hasPositiveVertices && !this.hasNegativeVertices && !this.hasOnPlaneZeroVertices; },
            get isPositive() { return this.hasPositiveVertices && !this.hasNegativeVertices; },
            get isAllNegative() { return !this.hasPositiveVertices && this.hasNegativeVertices && !this.hasOnPlaneZeroVertices; },
            get isNegative() { return !this.hasPositiveVertices && this.hasNegativeVertices; },
            get isAllOnPlane() { return !this.hasPositiveVertices && !this.hasNegativeVertices && this.hasOnPlaneZeroVertices; }
        };
        this.listShapeVerticesAsPoints(shape).forEach(function (vertex_gpPnt) {
            var planeToVertexXYZ = vertex_gpPnt.XYZ().Subtracted(ppXYZ);
            var dot = planeToVertexXYZ.Dot(pnXYZ);
            // on plane ?
            if (dot <= Math.abs(_common_math__WEBPACK_IMPORTED_MODULE_0__["default"].kEpsilon)) {
                result.hasOnPlaneZeroVertices = true;
            }
            // on positive side of the plane ?
            else if (dot > 0) {
                result.hasPositiveVertices = true;
            }
            // on negative side of the plane ?
            else if (dot < 0) {
                result.hasNegativeVertices = true;
            }
        });
        //// console.log("getShapeToPlaneOrientation() result: "+JSON.stringify(result, null, 2));
        return result;
    },
    isAnyShapeVertexOnThePositiveSideOfThePlane: function (shape, planePoint, planeNormal) {
        var oc = this.oc;
        var ppXYZ = new oc.gp_XYZ_2(planePoint[0], planePoint[1], planePoint[2]);
        var pnXYZ = new oc.gp_XYZ_2(planeNormal[0], planeNormal[1], planeNormal[2]);
        this.listShapeVerticesAsPoints(shape).forEach(function (vertex_gpPnt) {
            var planeToVertexXYZ = vertex_gpPnt.XYZ().Subtracted(ppXYZ);
            var dot = planeToVertexXYZ.Dot(pnXYZ);
            if (dot > 0)
                return true;
        });
        return false;
    }
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (shapes);


/***/ }),

/***/ "./src/occt/solidOperations.ts":
/*!*************************************!*\
  !*** ./src/occt/solidOperations.ts ***!
  \*************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _common_openCascadeHelper__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../common/openCascadeHelper */ "./src/common/openCascadeHelper.js");
/* harmony import */ var _common_utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../common/utils */ "./src/common/utils.js");
// } from "../../ltbl-occt/ltbl-occt";


var solidOperations = {
    oc: null,
    setOpenCascade: function (openCascade) {
        this.oc = openCascade;
    },
    makeHollow: function (shape, faceIndexes, wallThickness, joinType) {
        var oc = this.oc;
        var allFaces = _common_openCascadeHelper__WEBPACK_IMPORTED_MODULE_0__["default"].ListFaces(shape);
        var faces = faceIndexes.map(function (index) { return allFaces[index]; });
        var facesToRemove = new oc.TopTools_ListOfShape_1();
        faces.forEach(function (face) { facesToRemove.Append_1(face); });
        var progressRange = new oc.Message_ProgressRange_1();
        var aSolidMaker = new oc.BRepOffsetAPI_MakeThickSolid();
        var intersection = true;
        var selfIntersection = true;
        var geomJointType = _common_utils__WEBPACK_IMPORTED_MODULE_1__["default"].parseJoinType(joinType);
        var removeEdges = false;
        aSolidMaker.MakeThickSolidByJoin(shape, facesToRemove, wallThickness, oc.Precision.Confusion(), oc.BRepOffset_Mode.BRepOffset_Skin, 
        // oc.BRepOffset_Mode.BRepOffset_Pipe as any,
        // oc.BRepOffset_Mode.BRepOffset_RectoVerso as any,
        intersection, selfIntersection, geomJointType, removeEdges, progressRange);
        allFaces.forEach(function (face) { face.delete(); });
        facesToRemove.delete();
        var hollowed = aSolidMaker.Shape();
        return hollowed;
    },
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (solidOperations);


/***/ }),

/***/ "./src/occt/sweeps.js":
/*!****************************!*\
  !*** ./src/occt/sweeps.js ***!
  \****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _booleans__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./booleans */ "./src/occt/booleans.ts");
/* harmony import */ var _faces__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./faces */ "./src/occt/faces.ts");
/* harmony import */ var _common_compounds__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../common/compounds */ "./src/common/compounds.ts");



var sweeps = {
    setOpenCascade: function (openCascade) {
        this.oc = openCascade;
    },
    /**
     *
     * @param wire TopoDS_Wire shape
     * @param direction [x, y, z]
     * @param lengthUp Number
     * @param lengthDown Number
     */
    extrudeSolidFromWire: function (wire, direction, lengthUp, lengthDown) {
        var face = _faces__WEBPACK_IMPORTED_MODULE_1__["default"].wiresToFaces([wire]);
        var extrude = this.makeExtrudeFace(face, direction, lengthUp, lengthDown);
        face.delete();
        return extrude;
    },
    /**
     *
     * @param face TopoDS_Face shape.
     * @param dir [x, y, z]
     * @param length how for along dir to extrude
     * @param lengthDown how for against dir to extrude
     */
    makeExtrudeFace: function (face, dir, length, lengthDown) {
        var oc = this.oc;
        var shapesToJoin = [];
        // console.log("makeExtrudeFace oc: ", oc)
        // console.log("makeExtrudeFace face: ", face)
        // console.log("makeExtrudeFace dir: ", dir)
        // console.log("makeExtrudeFace length: ", length)
        // console.log("makeExtrudeFace lengthDown: ", lengthDown)
        if (length > 0) {
            var aPrismVec = new oc.gp_Vec_4(dir[0], dir[1], dir[2]);
            aPrismVec.Normalize();
            aPrismVec.Multiply(length);
            // console.log("makeExtrudeFace making body for length, aPrismVec: ", aPrismVec)
            var body = new oc.BRepPrimAPI_MakePrism_1(face, aPrismVec, false, true);
            // console.log("makeExtrudeFace body created")
            shapesToJoin.push(body.Shape());
            body.delete();
        }
        if (lengthDown > 0) {
            var aPrismVecDown = new oc.gp_Vec_4(dir[0], dir[1], dir[2]);
            aPrismVecDown.Normalize();
            aPrismVecDown.Multiply(lengthDown * -1);
            // console.log("makeExtrudeFace making body for lengthDown, aPrismVecDown: ", aPrismVecDown)
            var bodyDown = new oc.BRepPrimAPI_MakePrism_1(face, aPrismVecDown, false, true);
            // console.log("makeExtrudeFace body created")
            shapesToJoin.push(bodyDown.Shape());
            aPrismVecDown.delete();
            bodyDown.delete();
        }
        var shape = null;
        if (shapesToJoin.length > 1) {
            shape = _booleans__WEBPACK_IMPORTED_MODULE_0__["default"].makeUnion(shapesToJoin);
        }
        else {
            shape = shapesToJoin[0];
        }
        return shape;
    },
    makePipeSolid: function (profileFace, pathWire) {
        var oc = this.oc;
        var pipeSolidAPI = new oc.BRepOffsetAPI_MakePipe_2(pathWire, profileFace, oc.GeomFill_Trihedron.GeomFill_IsFrenet, false);
        // export declare class BRepOffsetAPI_MakePipe_2 extends BRepOffsetAPI_MakePipe {
        //         constructor(Spine: TopoDS_Wire, Profile: TopoDS_Shape, aMode: GeomFill_Trihedron, ForceApproxC1: Standard_Boolean);
        //     }
        // pipeSolidAPI.SetMode(true);
        var pipeSolid = pipeSolidAPI.Shape();
        return pipeSolid;
    },
    pipeSolidFromWire: function (profileWire, pathWire) {
        var oc = this.oc;
        pathWire = _common_compounds__WEBPACK_IMPORTED_MODULE_2__["default"].listWiresInsideCompound(pathWire)[0];
        var wire = new oc.TopoDS.Wire_1(pathWire);
        var face = _faces__WEBPACK_IMPORTED_MODULE_1__["default"].wiresToFaces([profileWire]);
        var pipeSolid = this.makePipeSolid(face, wire);
        face.delete();
        wire.delete();
        return pipeSolid;
    }
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (sweeps);


/***/ }),

/***/ "./src/occt/texts.ts":
/*!***************************!*\
  !*** ./src/occt/texts.ts ***!
  \***************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _sweeps__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./sweeps */ "./src/occt/sweeps.js");
/* harmony import */ var _common_fonts__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./../common/fonts */ "./src/common/fonts.js");
/* harmony import */ var _common_compounds__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./../common/compounds */ "./src/common/compounds.ts");
/* harmony import */ var _shapes__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./shapes */ "./src/occt/shapes.js");




// declare var _loadedFonts :  { [key: string]: any };
var texts = {
    oc: null,
    setOpenCascade: function (openCascade) {
        this.oc = openCascade;
    },
    /**
     * Taken from zalo's CascadeStudio
     * @param text
     * @param size
     * @param height
     * @param fontName
     * @constructor
     */
    text3D_original: function (text, size, height, fontName, position, direction) {
        var oc = this.oc;
        if (!size) {
            size = 36;
        }
        if (!height && height !== 0.0) {
            height = 0.15;
        }
        if (!fontName) {
            fontName = "Roboto";
        }
        // @ts-ignore
        var font = _common_fonts__WEBPACK_IMPORTED_MODULE_1__["default"]._loadedFonts[fontName];
        if (font === undefined) {
            console.log("Font not loaded or found yet!  Try again...");
            return;
        }
        var textFaces = [];
        var commands = font.getPath(text, 0, 0, size).commands;
        var paths = font.getPaths(text, 0, 0, size);
        console.log("paths: ", paths);
        var currentWire = null;
        var lastPoint = null;
        var firstPoint = null;
        for (var idx = 0; idx < commands.length; idx++) {
            if (commands[idx].type === "M") {
                // Start a new Glyph
                firstPoint = new oc.gp_Pnt_3(commands[idx].x, commands[idx].y, 0);
                lastPoint = firstPoint;
                currentWire = new oc.BRepBuilderAPI_MakeWire_1();
            }
            else if (commands[idx].type === "Z") {
                // End the current Glyph and Finish the Path
                try {
                    var faceBuilder = null;
                    if (textFaces.length > 0) {
                        faceBuilder = new oc.BRepBuilderAPI_MakeFace_22(textFaces[textFaces.length - 1], currentWire.Wire());
                        // faceBuilder = new oc.BRepBuilderAPI_MakeFace_15(currentWire.Wire(), false);
                    }
                    else {
                        faceBuilder = new oc.BRepBuilderAPI_MakeFace_15(currentWire.Wire(), false);
                    }
                    textFaces.push(faceBuilder.Face());
                }
                catch (e) {
                    console.error("ERROR: OCC encountered malformed characters when constructing faces from this font (likely self-intersections)!  Try using a more robust font like 'Roboto'.");
                }
            }
            else if (commands[idx].type === "L") {
                var nextPoint = new oc.gp_Pnt_3(commands[idx].x, commands[idx].y, 0);
                if (lastPoint.X() === nextPoint.X() && lastPoint.Y() === nextPoint.Y()) {
                    continue;
                }
                // let lineSegment = new oc.GC_MakeSegment_1(lastPoint, nextPoint).Value();
                // let lineEdge = new oc.BRepBuilderAPI_MakeEdge_24(lineSegment).Edge();
                var lineEdge = new oc.BRepBuilderAPI_MakeEdge_3(lastPoint, nextPoint).Edge();
                currentWire.Add_2(new oc.BRepBuilderAPI_MakeWire_2(lineEdge).Wire());
                lastPoint = nextPoint;
            }
            else if (commands[idx].type === "Q") {
                var controlPoint = new oc.gp_Pnt_3(commands[idx].x1, commands[idx].y1, 0);
                var nextPoint = new oc.gp_Pnt_3(commands[idx].x, commands[idx].y, 0);
                var ptList = new oc.TColgp_Array1OfPnt_2(1, 3);
                ptList.SetValue(1, lastPoint);
                ptList.SetValue(2, controlPoint);
                ptList.SetValue(3, nextPoint);
                var quadraticCurve = new oc.Geom_BezierCurve_1(ptList);
                var lineEdge = new oc.BRepBuilderAPI_MakeEdge_24(new oc.Handle_Geom_Curve_2(quadraticCurve)).Edge();
                currentWire.Add_2(new oc.BRepBuilderAPI_MakeWire_2(lineEdge).Wire());
                lastPoint = nextPoint;
            }
            else if (commands[idx].type === "C") {
                var controlPoint1 = new oc.gp_Pnt_3(commands[idx].x1, commands[idx].y1, 0);
                var controlPoint2 = new oc.gp_Pnt_3(commands[idx].x2, commands[idx].y2, 0);
                var nextPoint = new oc.gp_Pnt_3(commands[idx].x, commands[idx].y, 0);
                var ptList = new oc.TColgp_Array1OfPnt_2(1, 4);
                ptList.SetValue(1, lastPoint);
                ptList.SetValue(2, controlPoint1);
                ptList.SetValue(3, controlPoint2);
                ptList.SetValue(4, nextPoint);
                var cubicCurve = new oc.Geom_BezierCurve_1(ptList);
                var lineEdge = new oc.BRepBuilderAPI_MakeEdge_24(new oc.Handle_Geom_Curve_2(cubicCurve)).Edge();
                currentWire.Add_2(new oc.BRepBuilderAPI_MakeWire_2(lineEdge).Wire());
                lastPoint = nextPoint;
            }
        }
        if (height === 0) {
            return textFaces[textFaces.length - 1];
        }
        else {
            // textFaces[textFaces.length - 1].hash = stringToHash(textArgs);
            // let textSolid = Rotate([1, 0, 0], -90, Extrude(textFaces[textFaces.length - 1], [0, 0, height * size]));
            // sceneShapes = Remove(sceneShapes, textSolid);
            // let faceExtrudes = textFaces.map( (face, index) => {
            //     let faceExtrude = sweeps.makeExtrudeFace(face, [0,0,1], height, 0);
            //     console.log("faceExtrude type is: "+shapes.getShapeTypeAsString(faceExtrude));
            //    
            //    
            //     let inner = compounds.deCompoundShape(faceExtrude);
            //     let innerInner = compounds.deCompoundShape(inner[0] as any);
            //    
            //     console.log("face at "+index+" has "+innerInner.length+" shapes inside...");
            //    
            //     return innerInner[0];
            // });
            //
            // let textCompound = compounds.makeCompound(faceExtrudes);
            // return textCompound;
            var textSolid = _sweeps__WEBPACK_IMPORTED_MODULE_0__["default"].makeExtrudeFace(textFaces[textFaces.length - 1], [0, 0, 1], height, 0);
            var shapeFix = new oc.ShapeFix_Solid();
            shapeFix.Init(textSolid);
            var progressRange = new oc.Message_ProgressRange_1();
            var fixOk = shapeFix.Perform(progressRange);
            console.log("shape fixing ok? :", fixOk);
            var fixedSolid = shapeFix.Solid();
            return fixedSolid;
        }
    },
    /**
     * Taken from zalo's CascadeStudio
     * @param text
     * @param size
     * @param height
     * @param fontName
     * @constructor
     */
    text3D: function (text, size, height, fontName, position, direction) {
        var oc = this.oc;
        if (!size) {
            size = 36;
        }
        if (!height && height !== 0.0) {
            height = 0.15;
        }
        if (!fontName) {
            fontName = "Roboto";
        }
        // @ts-ignore
        var font = _common_fonts__WEBPACK_IMPORTED_MODULE_1__["default"]._loadedFonts[fontName];
        if (font === undefined) {
            console.log("Font not loaded or found yet!  Try again...");
            return;
        }
        var paths = font.getPaths(text, 0, 0, size);
        var currentWire = null;
        var lastPoint = null;
        var firstPoint = null;
        var finalFaces = [];
        for (var pathIndex = 0; pathIndex < paths.length; pathIndex++) {
            var faceBuilder = null;
            var textFaces = [];
            var path = paths[pathIndex];
            var commands = path.commands;
            for (var idx = 0; idx < commands.length; idx++) {
                if (commands[idx].type === "M") {
                    // Start a new Glyph
                    firstPoint = new oc.gp_Pnt_3(commands[idx].x, commands[idx].y, 0);
                    lastPoint = firstPoint;
                    currentWire = new oc.BRepBuilderAPI_MakeWire_1();
                }
                else if (commands[idx].type === "Z") {
                    // End the current Glyph and Finish the Path
                    try {
                        if (textFaces.length > 0) {
                            faceBuilder = new oc.BRepBuilderAPI_MakeFace_22(textFaces[textFaces.length - 1], currentWire.Wire());
                            // faceBuilder = new oc.BRepBuilderAPI_MakeFace_15(currentWire.Wire(), false);
                        }
                        else {
                            faceBuilder = new oc.BRepBuilderAPI_MakeFace_15(currentWire.Wire(), false);
                        }
                        textFaces.push(faceBuilder.Face());
                    }
                    catch (e) {
                        console.error("ERROR: OCC encountered malformed characters when constructing faces from this font (likely self-intersections)!  Try using a more robust font like 'Roboto'.");
                    }
                }
                else if (commands[idx].type === "L") {
                    var nextPoint = new oc.gp_Pnt_3(commands[idx].x, commands[idx].y, 0);
                    if (lastPoint.X() === nextPoint.X() && lastPoint.Y() === nextPoint.Y()) {
                        continue;
                    }
                    // let lineSegment = new oc.GC_MakeSegment_1(lastPoint, nextPoint).Value();
                    // let lineEdge = new oc.BRepBuilderAPI_MakeEdge_24(lineSegment).Edge();
                    var lineEdge = new oc.BRepBuilderAPI_MakeEdge_3(lastPoint, nextPoint).Edge();
                    currentWire.Add_2(new oc.BRepBuilderAPI_MakeWire_2(lineEdge).Wire());
                    lastPoint = nextPoint;
                }
                else if (commands[idx].type === "Q") {
                    var controlPoint = new oc.gp_Pnt_3(commands[idx].x1, commands[idx].y1, 0);
                    var nextPoint = new oc.gp_Pnt_3(commands[idx].x, commands[idx].y, 0);
                    var ptList = new oc.TColgp_Array1OfPnt_2(1, 3);
                    ptList.SetValue(1, lastPoint);
                    ptList.SetValue(2, controlPoint);
                    ptList.SetValue(3, nextPoint);
                    var quadraticCurve = new oc.Geom_BezierCurve_1(ptList);
                    var lineEdge = new oc.BRepBuilderAPI_MakeEdge_24(new oc.Handle_Geom_Curve_2(quadraticCurve)).Edge();
                    currentWire.Add_2(new oc.BRepBuilderAPI_MakeWire_2(lineEdge).Wire());
                    lastPoint = nextPoint;
                }
                else if (commands[idx].type === "C") {
                    var controlPoint1 = new oc.gp_Pnt_3(commands[idx].x1, commands[idx].y1, 0);
                    var controlPoint2 = new oc.gp_Pnt_3(commands[idx].x2, commands[idx].y2, 0);
                    var nextPoint = new oc.gp_Pnt_3(commands[idx].x, commands[idx].y, 0);
                    var ptList = new oc.TColgp_Array1OfPnt_2(1, 4);
                    ptList.SetValue(1, lastPoint);
                    ptList.SetValue(2, controlPoint1);
                    ptList.SetValue(3, controlPoint2);
                    ptList.SetValue(4, nextPoint);
                    var cubicCurve = new oc.Geom_BezierCurve_1(ptList);
                    var lineEdge = new oc.BRepBuilderAPI_MakeEdge_24(new oc.Handle_Geom_Curve_2(cubicCurve)).Edge();
                    currentWire.Add_2(new oc.BRepBuilderAPI_MakeWire_2(lineEdge).Wire());
                    lastPoint = nextPoint;
                }
            }
            // white chars do not produce faces
            if (textFaces.length > 0) {
                finalFaces.push(textFaces[textFaces.length - 1]);
            }
        }
        if (height === 0) {
            return finalFaces[finalFaces.length - 1];
        }
        else {
            var faceExtrudes = finalFaces.map(function (face, index) {
                var faceExtrude = _sweeps__WEBPACK_IMPORTED_MODULE_0__["default"].makeExtrudeFace(face, [0, 0, 1], height, 0);
                console.log("faceExtrude type is: " + _shapes__WEBPACK_IMPORTED_MODULE_3__["default"].getShapeTypeAsString(faceExtrude));
                return faceExtrude;
            });
            var textCompound = _common_compounds__WEBPACK_IMPORTED_MODULE_2__["default"].makeCompound(faceExtrudes);
            return textCompound;
        }
    }
};
// @ts-ignore
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (texts);


/***/ }),

/***/ "./src/resources/fonts/Consola.ttf":
/*!*****************************************!*\
  !*** ./src/resources/fonts/Consola.ttf ***!
  \*****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ("data:font/ttf;base64,");

/***/ }),

/***/ "./src/resources/fonts/Consolas.ttf":
/*!******************************************!*\
  !*** ./src/resources/fonts/Consolas.ttf ***!
  \******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ("data:font/ttf;base64,");

/***/ }),

/***/ "./src/resources/fonts/Papyrus.ttf":
/*!*****************************************!*\
  !*** ./src/resources/fonts/Papyrus.ttf ***!
  \*****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ("data:font/ttf;base64,");

/***/ }),

/***/ "./src/resources/fonts/Roboto.ttf":
/*!****************************************!*\
  !*** ./src/resources/fonts/Roboto.ttf ***!
  \****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ("data:font/ttf;base64,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Av8AOwL/AD8C/wAvAv8AQwL/AEED7ACKAqIAiwPVAFEEO//rBJ4APAUuAGwFLQBsBF8AYAUnAGwEVABgBG8AUQSHAC8EegBRBLv/9AH8AHcDmABeAAD8lgQCAIsEAv89BAIAkwQCAJMD0QBRA5gAXgOYAF4DAABDAwAANgMAADsDAAA/AwAALwMAAEMDAABBBVkAQwWBAEMFXQBsBcsAQwXLAEMEuACGBIIAQQRXAA8EmAAjBGsAagQuADQDmABeAgAAWAaDAC8EmgBLAib/jQSjADQEowBWBKMAPQSjAEAEowA2BKMAMQSjAE4EowBQBKMAVASjAM0CXf+kAl3/pAJIAHsCSP/9AkgAewR6AFEEuAA1BEoANgSZAGEEUQA4BJcAOASYADgEmAAtBJcAYQSWADgEWwA9BJoANAQHAHEFaQBOA90ACwZa/7wEHwBRBMAALgVYADsEzgBRAf4AAAOZAJgFSv/iBUr/4gSi/8MFCwAkAr//3AVz//0Fc//9BXP//QVz//0Fc//9BXP//QVz//0FQABFBHoAbgR6AG4EegBuBHoAbgJq/6oCagCGAmr/kgJq/5kFngBuBYYARQWGAEUFhgBFBYYARQWGAEUFUQBpBVEAaQVRAGkFUQBpBQb//QQ/AC0EPwAtBD8ALQQ/AC0EPwAtBD8ALQQ/AC0EKAA0BFsAPQRbAD0EWwA9BFsAPQJI/5sCSAB7Akj/gwJI/4oEgwBYBH4ANAR+ADQEfgA0BH4ANAR+ADQEgwBZBIMAWQSDAFkEgwBZBCX//AQl//wFc//9BD8ALQVz//0EPwAtBXP//QQ/AC0FQABFBCgANAVAAEUEKAA0BUAARQQoADQFQABFBCgANAUsAC0FFgA0BHoAbgRbAD0EegBuBFsAPQR6AG4EWwA9BHoAbgRbAD0EegBuBFsAPQV0AFIEmgA3BXQAUgSaADcFdABSBJoANwV0AFIEmgA3BZ8AbgSEAFcCav+yAkj/owJq/9oCSP/LAmr/xAJI/7UCagAZAjMACAJqAIYG6QCGBFwAXAR/ACQCXP9xBR4AbgRgAGEEVgBuAjMAcARWAG4CMwBgBFYAbgLJAHAEVgBuAw8AcAWeAG4EgwBYBZ4AbgSDAFgFngBuBIMAWASD/30FhgBFBH4ANAWGAEUEfgA0BYYARQR+ADQFOABuAwgAYQU4AG4DCABQBTgAbgMI/+gFAgBABBkAIwUCAEAEGQAjBQIAQAQZACMFAgBABBkAIwUCAEAEGQAjBQsAJAK/AAwFCwAkAr8ADAULACQC5wAMBVEAaQSDAFkFUQBpBIMAWQVRAGkEgwBZBVEAaQSDAFkFUQBpBIMAWQVRAGkEgwBZBvQAFQXPABYFBv/9BCX//AUG//0E4QA+BB4AQgThAD4EHgBCBOEAPgQeAEIHhgAQBsIAPQWBAFEEfwA0BG//fwRv/38EaAAcBLv/9AS7//QEu//0BLv/9AS7//QEu//0BLv/9ASHAC8D1QBRA9UAUQPVAFED1QBRAiL/iAIiAGgCIv9wAiL/dwTOAFEEwAAvBMAALwTAAC8EwAAvBMAALwSaAFMEmgBTBJoAUwSaAFMEX//3BLv/9AS7//QEu//0BIcALwSHAC8EhwAvBIcALwRv/70D1QBRA9UAUQPVAFED1QBRA9UAUQSdAD4EnQA+BJ0APgSdAD4EzwBRAiL/kAIi/7gCIv+iAiIANgIiAGgD4wAcBGwAUQO7AFEDuwBRA7sAUQO7AFEEzgBRBM4AUQTOAFEEwAAvBMAALwTAAC8EkQBRBJEAUQSRAEIEXgA2BF4ANgReADYEXgA2BGgAHARoABwEaAAcBJoAUwSaAFMEmgBTBJoAUwSaAFMEmgBTBfIAFgRf//cEX//3BDgALAQ4ACwEOAAsBXP//QR6/mAFn/5eAmr+XgWa/ygFav6CBXn/SgK6/10Fc//9BSkAbgR6AG4E4QA+BZ8AbgJqAIYFHgBuBwMAbgWeAG4FhgBFBTUAbgULACQFBv/9BRsABAJq/5kFBv/9BIAAPASHAF0EfwBaAroAagRcAGME2gB2BH4ANAUhAIQEIgACBB4ACwK6/4oEXABjBH4ANARcAGMGjwBBBHoAbgR2AGwFAgBAAmoAhgJq/5kEfwAkBS0AbAUeAG4FDwAEBXP//QUpAG4EdgBsBHoAbgWLAFoHAwBuBZ8AbgWGAEUFoQBsBTUAbgVAAEUFCwAkBRsABAQ/AC0EWwA9BHwAWAR+ADQEgQBhBCgANAQl//wEHgALBFsAPQNZAFgEGQAjAjMAXAJI/4oCKf+MBJYAdQQl//wG9AAVBc8AFgb0ABUFzwAWBvQAFQXPABYFBv/9BCX//AE8ACsCiQAZBGoAZwJc/18B8QBCBwMAbgbkAGEFc//9BD8ALQR6AG4FiwBaBFsAPQR8AFgF9wAjBiEAOQUvAAYEHf/jCKMANAmrAEUFCQA+BCMAPAVAAEUEKAA0BQb//QQdAAACagCGCFgACwc3ACUCagCGBXP//QQ/AC0Fc//9BD8ALQeGABAGwgA9BHoAbgRbAD0FlgBFBDsAQgQ7AEIIWAALBzcAJQUJAD4EIwA8BYsAWgR8AFgFiwBaBHwAWAWGAEUEfgA0BYgAVQR/ADIFiABVBH8AMgUWAA8EFAAtBQ8ABAQl//wFDwAEBCX//AUPAAQEJf/8BZcAhQR2AFAG+QBuBtIAdQSAADQFc//9BD8ALQVz//0EPwAtBXP//QQ/AC0Fc//7BD//VgVz//0EPwAtBXP//QQ/AC0Fc//9BD8ALQVz//0EPwAtBXP//QQ/AC0Fc//9BD8ALQVz//0EPwAtBXP//QQ/AC0EegBuBFsAPQR6AG4EWwA9BHoAbgRbAD0EegBuBFsAPQR6/8MEW/9VBHoAbgRbAD0EegBuBFsAPQR6AG4EWwA9AmoAhgJIAHsCagB7AjMAXAWGAEUEfgA0BYYARQR+ADQFhgBFBH4ANAWGAAAEfv+ABYYARQR+ADQFhgBFBH4ANAWGAEUEfgA0Ba4ASASuADIFrgBIBK4AMgWuAEgErgAyBa4ASASuADIFrgBIBK4AMgVRAGkEgwBZBVEAaQSDAFkFwgBpBM8AWQXCAGkEzwBZBcIAaQTPAFkFwgBpBM8AWQXCAGkEzwBZBQb//QQl//wFBv/9BCX//AUG//0EJf/8BJ4ANAULACQEMQAaBZcAhQR2AFAEdgBsA1kAWAX3/7EEzf+tBIQAVwT8/9wE/P/cBHb/2wNZ/6oFQf+2BHP/owUG//0EHQAABRsABAQeAAsEhwBdBGD/5AYFAFYEogA7BKIALwSiADsEogBQBLYAZwTKAGgEtgBPBMoAaQV0AFIEmgA3BZ4AbgSDAFgFc//9BD//wgR6AC8EW//BAmr+4AJI/tEFhgBFBH7/7AU4//wDCP9IBVEATgSD/+wFX/5cBSkAbgSBAGEFLABuBIAANAUsAG4EgAA0BZ8AbgSEAFcFHgBuBGAAYQUeAG4EYABhBFYAbgIzAF8HAwBuBuQAYQWeAG4EgwBYBYYARQU1AG4EgQBhBTgAbgMIAE8FAgBABBkAIwULACQCvwAMBVEAaQVJ//0EIgACBUn//QQiAAIG9AAVBc8AFgThAD4EHgBCBcz+EgS7/3sEEf6/BQv+pgJe/qYEyv8UBJv+iQTJ/x0Eu//0BHoAUQPVAFEEOAAsBM8AUQIiAGgEbABRBgkAUQTOAFEEwAAvBIMAUQRoABwEX//3BGn/8gIi/3cEX//3A9UAUQPRAFEEXgA2AiIAaAIi/3cD4wAcBGwAUQSYABcEu//0BHoAUQPRAFED1QBRBNAAUQYJAFEEzwBRBMAALwToAFEEgwBRBIcALwRoABwEaf/yBE8AOgTPAFEEhwAvBF//9wZmACEE0ABRBJgAFwYSADAGBQBoBlr/vATAAC4EXgA2BfIAFgXyABYF8gAWBF//9wVz//0EPwAtBHoAbgRbAD0Eu//0A9UAUQJIAF8AAAABAAAFEAkLBAAAAgICAwUFBwYBAwMEBQIEAwMFBQUFBQUFBQUFAwMFBQUFCAYGBgYFBQYGAwUGBQgGBgYGBgYGBgYIBgYFAwQDBAQDBQUFBQUDBQUCAgUCCAUFBQUDBQMFBQcFBQUDAgMGAwUFBgUCBgQHBAUFBwUEBQMDAwYEAwMDBAUGBwcFCAUGBgYIBQUFBQYHAwUFAwYFCQgCBgMGBQYFAwUFBAUEAgMDBAQDAAAAAAAAAwUDBQcGBgUGBQcHBgUFBQUFBAUFAwUFBgUFBQUFBwcHBQYIBwYJCQcGBgcJBgYGBggHBgkJBwgGBgkFBQUEBggFBQUFBwUFBQcGBQgIBggFBQcFBQUICAUFCQgFCAcGBQkHCAcLCQUFBgUGBQYFCQgJCAUFBgAAAAAAAAcGBQYFBQQGBQoJBwYGBgcHBwYJBgoICAYGBQgGBwYGBQYHBQYFBwYGBQcGCQgGBQUFBAcFBgkIBwYGBQkICQcGBQYGBggGAwUJBQkDAgIFAgIBAQAEBAYHBAICAgIEBAQFBQMFBwMJAwMEAwQFBwgKCAgFBwUFBgcHBQkGBgcICAgFBgYFBQoDBQUFBQUDAwIGBgYJCQYIAAkJAwMDBQUFBQUFBQUFBQUFBQcFBQUFBQUFBQUHBAUEAgUFBAUFBAQFBQUEBgUHBwUHBQgIBwYFBgcFBQUFBQYFCAkHBwUFCAUFCAYGBwcFBggFBQcFBQUFBQkGAwMDAwMDAwQDBAUFBgYFBgUFBQUFAgQABQUFBQQEBAMDAwMDAwMGBgYHBwUFBQUFBQQCBwUCBQUFBQUFBQUFBQMDAwMDBQUFBQUFBQUFBQUFBQYEBwUFBgUCBAYGBQYDBgYGBgYGBgYFBQUFAwMDAwYGBgYGBgYGBgYGBQUFBQUFBQUFBQUFAwMDAwUFBQUFBQUFBQUFBQYFBgUGBQYFBgUGBQYFBgYFBQUFBQUFBQUFBgUGBQYFBgUGBQMDAwMDAwMCAwgFBQMGBQUCBQIFAwUDBgUGBQYFBQYFBgUGBQYDBgMGAwYFBgUGBQYFBgUGAwYDBgMGBQYFBgUGBQYFBgUIBwYFBgUFBQUFBQgIBgUFBQUFBQUFBQUFBQQEBAQCAgICBQUFBQUFBQUFBQUFBQUFBQUFBQQEBAQEBQUFBQUCAgICAgQFBAQEBAUFBQUFBQUFBQUFBQUFBQUFBQUFBQUHBQUFBQUGBQYDBgYGAwYGBQUGAwYIBgYGBgYGAwYFBQUDBQUFBgUFAwUFBQcFBQYDAwUGBgYGBgUFBggGBgYGBgYGBQUFBQUFBQUFBAUCAwIFBQgHCAcIBwYFAQMFAwIICAYFBQYFBQcHBgUKCwYFBgUGBQMJCAMGBQYFCAgFBQYFBQkIBgUGBQYFBgUGBQYFBgUGBQYFBgUGBQgIBQYFBgUGBQYFBgUGBQYFBgUGBQYFBgUGBQUFBQUFBQUFBQUFBQUFBQUDAwMCBgUGBQYFBgUGBQYFBgUGBQYFBgUGBQYFBgUGBQYFBgUGBQYFBgUGBQYFBgUFBgUGBQUEBwUFBgYFBAYFBgUGBQUFBwUFBQUFBQUFBgUGBQYFBQUDAwYFBgMGBQYGBQYFBgUGBQYFBgUFAggIBgUGBgUGAwYFBgMGBgUGBQgHBQUHBQUGAwUFBQUFBAUFAgUHBQUFBQUFAgUEBAUCAgQFBQUFBAQFBwUFBgUFBQUFBQUFBwUFBwcHBQUHBwcFBgUFBQUEAwAAAAMAAAADAAAAHAADAAEAAAAcAAMACgAABooABAZuAAAA9ACAAAYAdAAAAAIADQB+AKAArACtAL8AxgDPAOYA7wD+AQ8BEQElAScBMAFTAV8BZwF+AX8BjwGSAaEBsAHwAf8CGwI3AlkCvALHAskC3QLzAwEDAwMJAw8DIwOKA4wDkgOhA7ADuQPJA84D0gPWBCUELwRFBE8EYgRvBHkEhgSfBKkEsQS6BM4E1wThBPUFAQUQBRMeAR4/HoUe8R7zHvkfTSAJ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jlyOlI8Qj3mP2pAFkDuQrZDgkSyRX5GfkhCSbpLUkzOTqpQglJuU8JUxlYWV3JZTls6XDJdXl6OX6JglmGqYq5j4mU6ZWpmmmhualprumzKbu5wdnH+c351lnXGdyp4Znmaeq58bn4Gf3qBVoSChvaJTosmjQKOCo92kOqRnpNalO6VVpcymDqbCpymnkafZqCCoZaiqqPWpTKnXqiKqO6qKqvCrNKt3q9SsV6yFrNKtL61DrVetaa19rY+tpq26rhWufK7HryGvf6+rsAGwWrCtsQGxKbGbsbKyNLKbssiy2bLhsumy8bMCswqzErMasyKzM7M7s0OzS7NWs16zxrQctEq0qrT+tV211rYmto228Ldct9i34LhkuKC5DLlfudq6T7qiuqK6qrsXu4S76LwtvJe8rrzAvNe86bz1vQi9FL0gvTe9Tr1lvXG9iL2fvba9wr3Uveu+Ar4Zviu+N75OvmW+fL6Ivp++tb7MvuK++L8Dvxu/J78zv0m/YL92v4G/mL+uv8W/0b/iv/jAD8AlwDbAQcBXwG7AhMCPwKHArMDDwNnA8MEGwXHCEsIpwkDCV8JtwoTCm8KywsjC38LrwwLDGMMvw0XDXMNzw/HEhcScxLLEycTfxPbFDMUjxTrFRsVdxXTFhsWYxarFwcXYxe/GBsYRxhzGM8Y/xkvGYsZ5xoXGkcaoxr/Gy8bXxuzG+McExxDHJ8c5x0XHUcdox3nHhceXx6jHv8fVx+3IBcgcyDPIP8hLyGLIeMiPyKbIvcjTyN/I68j3yQPJFckmyTrJRslSyV7JdcmByZPJpMm7ydHJ6Mn+yhbKKcpBylnKvcspy0DLV8tuy4TLkMuny77L0Mviy/nMD8wmzD3MVMxrzJbMwczNzOTM+80RzSLNLc1FzVHNXc1zzYrNm82mzb3N083qzfbOB84ezjXOS85czmfOfs6VzqvOts7NzuPO+s9nz37PlM+rz8HP0s/oz/7QFdCD0JnQr9DG0N3Q6dD/0RHRKNE/0UrRYNF30YPRmdGl0brRxtHd0enSANIW0i3SRdJX0mPSdNKL0qHSrdLD0tfS7dL50wrTINM2007TZtPI09/T9dQA1BfULtRE1FDUXNRo1HTUgNSM1JjUs9S71MPUy9TT1NvU49Tr1PPU+9UD1QvVE9Ub1SPVL9U71VLVadWA1ZbVsNW41cDVyNXQ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GdCwGtAwMQERMxUjFTMVIxUUFjMyNxUGIyImJzUjNTM1IzUzEQHnsrLPzyxBMiJbY6qnA7q6iooFR/7z6pa/mj0wBvEdnqHQv5bqAQ0A/////QAABXcHNgImACUAAAEHAEQA+gE2ABMAsABFWLAELxuxBB8+WbAM3DAxAP////0AAAV3BzYCJgAlAAABBwB1AccBNgAJALAEL7AN3DAxAP////0AAAV3BzYCJgAlAAABBwCeALcBNgATALAARViwBC8bsQQfPlmwD9wwMQD////9AAAFdwc4AiYAJQAAAQcApQDIATEACQCwBC+wFNwwMQD////9AAAFdwcQAiYAJQAAAAcAagDAATb////9AAAFdweMAiYAJQAAAQcAowFnAbMADACwBC+wFNywF9AwMf////0AAAV3B+MCJgAlAAAABwInAVYBA///AEX+KAULBcUCJgAnAAAABwB5Ab0AAP//AG4AAARbBzYCJgApAAABBwBEAMIBNgATALAARViwBi8bsQYfPlmwDdwwMQD//wBuAAAEWwc2AiYAKQAAAQcAdQGPATYAEwCwAEVYsAYvG7EGHz5ZsA7cMDEA//8AbgAABFsHNgImACkAAAEHAJ4AfwE2ABMAsABFWLAGLxuxBh8+WbAQ3DAxAP//AG4AAARbBxACJgApAAAABwBqAIgBNv///6oAAAHkBzYCJgAtAAABBwBE/3QBNgATALAARViwAi8bsQIfPlmwBdwwMQD//wCGAAACwwc2AiYALQAAAQcAdQBAATYAEwCwAEVYsAMvG7EDHz5ZsAbcMDEA////kgAAAt4HNgImAC0AAAEHAJ7/MQE2ABMAsABFWLACLxuxAh8+WbAI3DAxAP///5kAAALOBxACJgAtAAAABwBq/zoBNv//AG4AAAUuBzgCJgAyAAABBwClAOMBMQAJALAFL7AT3DAxAP//AEX/7AU/BzYCJgAzAAABBwBEAP8BNgATALAARViwDC8bsQwfPlmwH9wwMQD//wBF/+wFPwc2AiYAMwAAAQcAdQHMATYAEwCwAEVYsAwvG7EMHz5ZsCDcMDEA//8ARf/sBT8HNgImADMAAAEHAJ4AvAE2ABMAsABFWLAMLxuxDB8+WbAg3DAxAP//AEX/7AU/BzgCJgAzAAABBwClAM0BMQAJALAML7An3DAxAP//AEX/7AU/BxACJgAz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sBvcsB7QMDH//wBT//AEdgYdAiYB1wAAAQcApgDSAB4AFgCwAEVYsAAvG7EAHT5ZsBTcsBjQMDEAAQBT/qIERASNAB8AYbIbICEREjkAsABFWLAALxuxAB0+WbAARViwFi8bsRYdPlmwAEVYsA0vG7ENFz5ZsABFWLASLxuxEg8+WbIEEgAREjmwDRCwCLAKK1jYG9xZsBIQsRsBsAorWCHYG/RZMDEBERQGBwYVFDMyNxcGIyImNTQ3JiYnESERFBYzMjY1EQREkoY9PB4nJkldboUd0fIEAVNUU1VPBI39FZvKLSxCPhKoLHRiSTEM3roC9/0VXlFRXgLr//8AFgAABdAGHgImAdUAAAEHAJ4A4QAeABMAsABFWLAMLxuxDB0+WbAP3DAxAP////cAAARpBh4CJgHTAAABBgCeGx4AEwCwAEVYsAgvG7EIHT5ZsA3cMDEA////9wAABGkF+AImAdMAAAAGAGokHv//ACwAAAQWBh4CJgHSAAABBwB1ATUAHgATALAARViwCy8bsQsdPlmwD9wwMQD//wAsAAAEFgYqAiYB0gAAAQcAogEXADUAEwCwAEVYsAovG7EKHT5ZsBbcMDEA//8ALAAABBYGHwImAdIAAAEGAJ89HgATALAARViwCi8bsQodPlmwEtwwMQD////9AAAFdwZCAiYAJQAAAAcArv8bAAD///5gAAAEWwZEAiYAKQAAAAcArv1xAAL///5eAAAFLwY/AiYALAAAAAcArv1v//3///5eAAAB5AZEAiYALQAAAAcArv1vAAL///8o/+wFUwZCACYAMxQAAAcArv45AAD///6CAAAFbgZCACYAPWQAAAcArv2TAAD///9KAAAFCgZCACYAuhQAAAcArv5bAAD///9d//UDBwbfAiYAwwAAAQcAr/74/+sAHACwAEVYsA0vG7ENGz5ZsBncsBDQsBkQsCLQMDH////9AAAFdwWwAgYAJQAA//8AbgAABNYFsAIGACYAAP//AG4AAARbBbACBgApAAD//wA+AAAEsAWwAgYAPgAA//8AbgAABS8FsAIGACwAAP//AIYAAAHkBbACBgAtAAD//wBuAAAFMwWwAgYALwAA//8AbgAABpIFsAIGADEAAP//AG4AAAUuBbACBgAyAAD//wBF/+wFPwXEAgYAMwAA//8AbgAABOgFsAIGADQAAP//ACQAAATlBbACBgA4AAD////9AAAFCgWwAgYAPQAA//8ABAAABRcFsAIGADwAAP///5kAAALOBxACJgAtAAAABwBq/zoBNv////0AAAUKBxACJgA9AAAABwBqAIgBNv//ADz/6wSABkICJgC7AAABBwCuAP4AAAATALAARViwEi8bsRIbPlmwItwwMQD//wBd/+wEUwZCAiYAvwAAAQcArgDvAAAAEwCwAEVYsBYvG7EWGz5ZsCncMDEA//8AWv5gBCgGQgImAMEAAAEHAK4A1QAAABMAsABFWLADLxuxAxs+WbAT3DAxAP//AGr/9QJ9Bi0CJgDDAAABBgCuu+sAEwCwAEVYsAAvG7EAGz5ZsBDcMDEA//8AY//rBCAG9AImAMsAAAEGAK8RAAAcALAARViwAC8bsQAbPlmwH9ywFtCwHxCwKNAwMf//AHYAAAS6BDoCBgCOAAD//wA0/+wESAROAgYAUwAA//8AhP5gBH8EOgIGAHYAAP//AAIAAAQcBDoCBgBaAAAAAf/z/k0EUARLAB4AarIUHyAREjkAsABFWLAALxuxABs+WbAARViwBS8bsQUbPlmwAEVYsA8vG7EPET5ZsABFWLAVLxuxFRE+WbIEBQ8REjmwDxCxDAGwCitYIdgb9FmyFAUPERI5sAAQsRoBsAorWCHYG/RZMDETMhYXFxMhARMWFxYzBwYHBiYmJycDIQEDJiMiByc2qnKeM1K6AVf+kLAfThEgCScveXJeOBzI/rkBcq8khioWCWwES2R1twF//Rr+eVwXBvsHAgNIjJNA/mwC+wGRWgbxGv///4r/9QK/BcUCJgDDAAAABwBq/yv/6///AGP/6wQZBdoCJgDLAAAABgBqRAD//wA0/+wESAZCAiYAUwAAAQcArgDVAAAAEwCwAEVYsAQvG7EEGz5ZsBzcMDEA//8AY//rBBkGQgImAMsAAAEHAK4A1AAAABMAsABFWLAALxuxABs+WbAW3DAxAP//AEH/7AZVBkICJgDOAAABBwCuAdkAAAATALAARViwES8bsREbPlmwJNwwMQD//wBuAAAEWwcQAiYAKQAAAAcAagCIATb//wBsAAAERAc2AiYAsQAAAQcAdQFuATYAEwCwAEVYsAQvG7EEHz5ZsAjcMDEAAAEAQP/sBLwFxAAoAGuyEikqERI5ALAARViwCi8bsQofPlmwAEVYsB4vG7EeDz5ZsgIeChESObI5AgFdsAIQsRgBsAorWCHYG/RZsAoQsRIBsAorWCHYG/RZsg8YEhESObAeELEmAbAKK1gh2Bv0WbIjAiYREjkwMQE0JiQnJDU0NiQzMhYWFSE0JiMiBhUUFgQXFhUUBCMiJCY1IRQWMzI2A11t/u5X/uWNAQKhnfmK/qJtXV5teAEuYez+4Pux/uGRAWB5iFdlAYNNVlwri/N5uWdwz4VZYlNAOFthOIjvv9p/3ZB1b0sA//8AhgAAAeQFsAIGAC0AAP///5kAAALOBxACJgAtAAAABwBq/zoBNv//ACT/7AQQBbACBgAuAAD//wBsAAAFRQWwAgYCLAAA//8AbgAABTMHNgImAC8AAAEHAHUBXAE2AAkAsAQvsA/cMDEA//8ABP/rBQYHOAImAN4AAAEHAKEA2QE2ABMAsABFWLASLxuxEh8+WbAW3DAxAP////0AAAV3BbACBgAlAAD//wBuAAAE1gWwAgYAJgAA//8AbAAABEQFsAIGALEAAP//AG4AAARbBbACBgApAAD//wBaAAAFIwc4AiYA3AAAAQcAoQDxATYAEwCwAEVYsAgvG7EIHz5ZsA3cMDEA//8AbgAABpIFsAIGADEAAP//AG4AAAUvBbACBgAsAAD//wBF/+wFPwXEAgYAMwAA//8AbAAABTUFsAIGALYAAP//AG4AAAToBbACBgA0AAD//wBF/+wFCwXFAgYAJwAA//8AJAAABOUFsAIGADgAAP//AAQAAAUXBbACBgA8AAD//wAt/+wEEQROAgYARQAA//8APf/sBDIETgIGAEkAAP//AFgAAAQmBgICJgDwAAABBgChdwAAEwCwAEVYsAgvG7EIGz5ZsA3cMDEA//8ANP/sBEgETgIGAFMAAP//AGH+YARLBE4CBgBUAAAAAQA0/+wD+AROABwATbIWHR4REjkAsABFWLAPLxuxDxs+WbAARViwBy8bsQcPPlmxAAGwCitYIdgb9FmyAwcPERI5shMPBxESObAPELEWAbAKK1gh2Bv0WTAxJTI2JyEUBiMiABE1NDY2MzIWFSE0JiMiBwYVFBYCKEdOAQE8/8ns/vB55JzT+P7EUkWDFgdO8E1FsuQBKAEGDqT7h+rIVFqnNV2jfgD////8/ksELAQ6AgYAXQAA//8ACwAABB4EOgIGAFwAAP//AD3/7AQyBdsCJgBJAAAABgBqGgH//wBYAAADVAYAAiYA7AAAAQcAdQCzAAAAEwCwAEVYsAQvG7EEGz5ZsAjcMDEA//8AI//sA9wETgIGAFcAAP//AFwAAAHSBfUCBgBNAAD///+KAAACvwXGAiYAjQAAAAcAav8r/+z///+M/ksB1AX1AgYATgAA//8AdQAABKQGAAImAPEAAAEHAHUBZAAAABMAsABFWLAFLxuxBRs+WbAQ3DAxAP////z+SwQsBgICJgBdAAABBgChQQAAEwCwAEVYsBAvG7EQGz5ZsBTcMDEA//8AFQAABtkHNgImADsAAAEHAEQBuwE2ABMAsABFWLALLxuxCx8+WbAO3DAxAP//ABYAAAW1BgACJgBbAAABBwBEASUAAAATALAARViwCy8bsQsbPlmwDtwwMQD//wAVAAAG2Qc2AiYAOwAAAQcAdQKIATYACQCwAS+wD9wwMQD//wAWAAAFtQYAAiYAWwAAAQcAdQHyAAAAEwCwAEVYsAwvG7EMGz5ZsA/cMDEA//8AFQAABtkHEAImADsAAAAHAGoBgQE2//8AFgAABbUF2gImAFsAAAAHAGoA6wAA/////QAABQoHNgImAD0AAAEHAEQAwgE2ABMAsABFWLAILxuxCB8+WbAK3DAxAP////z+SwQsBgACJgBdAAABBgBETwAAEwCwAEVYsBAvG7EQGz5ZsBLcMDEA//8AKwPBARsGAAIGAAsAAP//ABkDyQJeBgECBgAGAAD//wBn/+4EEgWwACYABQAAAAcABQI1AAD///9f/ksCxgXtAiYAnAAAAQcAn/8o/+wACQCwAC+wEdwwMQD//wBCA+gBjQYAAgYBhQAA//8AbgAABpIHNgImADEAAAEHAHUCiQE2ABMAsABFWLACLxuxAh8+WbAR3DAxAP//AGEAAAaCBgACJgBRAAABBwB1ApMAAAATALAARViwAy8bsQMbPlmwINwwMQD////9/n4FdwWwAiYAJQAAAAcApwFfAAn//wAt/osEEQROAiYARQAAAAYAp28W//8AbgAABFsHNgImACkAAAEHAEQAwgE2ABMAsABFWLAGLxuxBh8+WbAN3DAxAP//AFoAAAUjBzYCJgDcAAABBwBEAP8BNgATALAARViwCC8bsQgfPlmwC9wwMQD//wA9/+wEMgYBAiYASQAAAQYARFQBABMAsABFWLAILxuxCBs+WbAe3DAxAP//AFgAAAQmBgACJgDwAAABBwBEAIUAAAATALAARViwCC8bsQgbPlmwC9wwMQD//wAjAAAF1gWwAgYAuQAA//8AOf4iBeYEOgIGAM0AAP//AAYAAAUfByQCJgEZAAABBwCsBHABNgAWALAARViwEC8bsRAfPlmwEtywFtAwMf///+MAAAQwBe4CJgEaAAABBwCsBBAAAAAWALAARViwEC8bsRAbPlmwE9ywF9AwMf//ADT+SwiqBE4AJgBTAAAABwBdBH4AAP//AEX+SwmyBcQAJgAzAAAABwBdBYYAAP//AD7+DgSpBcMCJgDbAAAABwJRAXz/cv//ADz+DwPzBE0CJgDvAAAABwJRARv/c///AEX+GAULBcUCJgAnAAAABwJRAa7/fP//ADT+GAP4BE4CJgBHAAAABwJRATb/fP////0AAAUKBbACBgA9AAD//wAA/l8EFwQ6AgYAvQAA//8AhgAAAeQFsAIGAC0AAP//AAsAAAhdBzgCJgDaAAABBwChAl8BNgATALAARViwDS8bsQ0fPlmwGdwwMQD//wAlAAAHIAYCAiYA7gAAAQcAoQHfAAAAEwCwAEVYsA0vG7ENGz5ZsBrcMDEA//8AhgAAAeQFsAIGAC0AAP////0AAAV3BzgCJgAlAAABBwChAOwBNgATALAARViwBC8bsQQfPlmwDtwwMQD//wAt/+wEEQYCAiYARQAAAQYAoUcAABMAsABFWLATLxuxExs+WbAo3DAxAP////0AAAV3BxACJgAlAAAABwBqAMABNv//AC3/7AQRBdoCJgBFAAAABgBqGwD//wAQAAAHOwWwAgYAgQAA//8APf/sBpUEUAIGAIYAAP//AG4AAARbBzgCJgApAAABBwChALQBNgATALAARViwBi8bsQYfPlmwD9wwMQD//wA9/+wEMgYDAiYASQAAAQYAoUYBABMAsABFWLAILxuxCBs+WbAg3DAxAP//AEX/6gU/BuECJgFYAAAABwBqAKMBB///AEL/6wQMBE8CBgCdAAD//wBC/+sEDAXbAiYAnQAAAAYAaiEB//8ACwAACF0HEAImANoAAAAHAGoCMwE2//8AJQAAByAF2gImAO4AAAAHAGoBswAA//8APv/tBKkHEAImANsAAAAHAGoAdwE2//8APP/sA/MF2gImAO8AAAAGAGohAP//AFoAAAUjBuICJgDcAAABBwBwALABMAATALAARViwCC8bsQgfPlmwC9wwMQD//wBYAAAEJgWtAiYA8AAAAQYAcDb7ABMAsABFWLAHLxuxBxs+WbAL3DAxAP//AFoAAAUjBxACJgDcAAAABwBqAMUBNv//AFgAAAQmBdoCJgDwAAAABgBqSwD//wBF/+wFPwcQAiYAMwAAAAcAagDFATb//wA0/+wESAXaAiYAUwAAAAYAakUA//8AVf/sBU4FxAIGARcAAP//ADL/7ARGBE4CBgEYAAD//wBV/+wFTgcQAiYBFwAAAAcAagDbATb//wAy/+wERgXaAiYBGAAAAAYAakAA//8AD//rBNQHEAImAOcAAAAHAGoAgAE2//8ALf/sA/MF2gImAP8AAAAGAGoFAP//AAT/6wUGBuICJgDeAAABBwBwAJgBMAATALAARViwEi8bsRIfPlmwFNwwMQD////8/ksELAWtAiYAXQAAAQYAcAD7AAkAsAEvsBHcMDEA//8ABP/rBQYHEAImAN4AAAAHAGoArQE2/////P5LBCwF2gImAF0AAAAGAGoVAP//AAT/6wUGBzUCJgDeAAABBwCmATQBNgAWALAARViwAi8bsQIfPlmwFdywGdAwMf////z+SwRABf8CJgBdAAABBwCmAJwAAAAWALAARViwAS8bsQEbPlmwE9ywF9AwMf//AIUAAAUrBxACJgDhAAAABwBqARgBNv//AFAAAAQgBdoCJgD5AAAABgBqXwD//wBuAAAGkAcQACYA5v8AACcALQSsAAAABwBqAZABNv//AHUAAAZaBdoAJgD+AAAAJwCNBIwAAAAHAGoBgAAA//8ANP/sBB8GAAIGAEgAAP////3+jgV3BbACJgAlAAAABwCtBRQACf//AC3+mwQRBE4CJgBFAAAABwCtBCQAFv////0AAAV3B7kCJgAlAAABBwCrBSYBLQATALAARViwBC8bsQQfPlmwC9wwMQD//wAt/+wEEQaEAiYARQAAAQcAqwSB//gAEwCwAEVYsBMvG7ETGz5ZsCXcMDEA/////QAABXoHgQImACUAAAEHAjcAwwEJABYAsABFWLAFLxuxBR8+WbAO3LAU0DAx//8ALf/sBNUGTAImAEUAAAEGAjce1AAWALAARViwEy8bsRMbPlmwKtywLtAwMf//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Br+h/q+yxgGE8p/tAR8R/q8CbGK0DQFaccUEAZeb1Cb+GgHnKwEe4yqwAQmM6clSXP7yWayUpAD////3AAAEaQSNAgYB0wAA//8AIf4OBhkEsQImAhcAAAAHAlEDMf9y//8AUQAABH8FygImAf4AAAEGAHBTGAATALAARViwCC8bsQgdPlmwC9wwMQD//wAX/+sEmgXKAiYCAQAAAQYAcGMYABMAsABFWLAQLxuxEB0+WbAS3DAxAP//ADAAAAXiBI0CBgHxAAD//wBo//AFsASNACYB4wAAAAcB4gIiAAD///+8AAAGIQYAAiYCcwAAAAcAdQJLAAD//wAu/8kEkAYeAiYCdQAAAAcAdQFnAB7//wA2/f0EFQSdAiYB2QAAAAcBugFm/o///wAWAAAF0AYeAiYB1QAAAAcARAEkAB7//wAWAAAF0AYeAiYB1QAAAAcAdQHxAB7//wAWAAAF0AX4AiYB1QAAAAcAagDqAB7////3AAAEaQYeAiYB0wAAAAYARF4e/////f5oBXcFsAImACUAAAAHAKQBiAAJ//8ALf51BBEETgImAEUAAAAHAKQAmAAW//8Abv5pBFsFsAImACkAAAAHAKQBUgAK//8APf5fBDIETgImAEkAAAAHAKQBBAAA////9P5fBMcEjQImAjMAAAAHAKQBKQAA//8AUf5nA8cEjQImAigAAAAHAKQBAQAI//8AX/6PAdUEOgImAI0AAAEHAK0DbwAKABMAsABFWLABLxuxAQ8+WbAG3DAxAAAAABwBVgABAAAAAAAAAC8AAAABAAAAAAABAAwALwABAAAAAAACAAcAOwABAAAAAAADAAwALwABAAAAAAAEAAwALwABAAAAAAAFABMAQgABAAAAAAAGAAwAVQABAAAAAAAHACAAYQABAAAAAAAJAAYAgQABAAAAAAALAAoAhwABAAAAAAAMABMAkQABAAAAAAANAC4ApAABAAAAAAAOACoA0gADAAEECQAAAF4A/AADAAEECQABABgBWgADAAEECQACAA4BcgADAAEECQADABgBWgADAAEECQAEABgBWgADAAEECQAFACYBgAADAAEECQAGABgBpgADAAEECQAHAEABvgADAAEECQAJAAwB/gADAAEECQALABQCCgADAAEECQAMACYCHgADAAEECQANAFwCRAADAAEECQAOAFQCoAAD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AOoC/wL/APcDAQMBAPgDAwMDAPkDDgMOAPoDEAMQAPsDEgMSAPwDIAMgAP0DIgMlAP4DJwMnAQIDKQMpAQMDLwM4AQQDQwNHAQ4DTQNPARMDVANUARYDZQNpARcDbQNvARwDeAN4AR8DhgOLASADjgOdASYDoAOgATYDpAOkATcDpgOmATgDqgOqATkDrQOuAToDsAOxATwDswO5AT4DuwO9AUUDvwPEAUgDxgPHAU4DyQPMAVAD0gPTAVQD1QPVAVYD1wPXAVcD2QPcAVgD3wPkAVwD5gPmAWID6gPrAWMD8APwAWUD8gP7AWYD/gP/AXAEAQQEAXIECwQMAXYEEAQQAXgEEgQYAXkEHgRGAYAESARIAakESgRXAaoEXwRfAbgEcAR1AbkEdwR3Ab8EewR8AcAEfwR/AcIEgQSCAcMEhASEAcUEhgSGAcYElwSbAccEnQSdAcwEnwSgAc0EogSiAc8EpgSoAdAEqgSqAdMErASuAdQEsASwAdcEsgSyAdgEtAS6AdkEvAS8AeAEvwS/AeEEwgTGAeIEyATIAecEygTLAegEzwTPAeoE0gTSAesE2ATYAewE3QTdAe0E6AToAe4E6gTqAe8E8QTxAfAE9QT1AfEACwA4/8QA0v/EANb/xAE5/8QBRf/EAw7/xAMQ/8QDEv/EA8H/xAR3/8QEv//EABgAOgAUADsAJgA9ABYBGQAUApkAFgMgACYDIgAWAyQAFgOLABYDmgAWA50AFgPTACYD1QAmA9cAJgPZABYD6gAUA/IAFgRwABYEcgAWBHQAFgSGABYEwgAUBMQAFATGACYAAQAT/wgA5wAQ/u4AEv7uACX/QAAu/zAAOAAUAEX/3gBH/+sASP/rAEn/6wBL/+sAU//rAFX/6wBW/+YAWf/qAFr/6ABd/+gAlP/rAJn/6wCb/+oAsv9AALT/QAC7/+sAvf/oAMj/6wDJ/+sAy//qANIAFADWABQA9//rAQP/6wEN/0ABGP/rARr/6AEe/+sBIv/rATkAFAFC/+sBRQAUAWD/6wFh/+sBa//rAYb+7gGK/u4Bjv7uAY/+7gHr/8AB7f/AAjP/wAJ//0ACgP9AAoH/QAKC/0ACg/9AAoT/QAKF/0ACmv/eApv/3gKc/94Cnf/eAp7/3gKf/94CoP/eAqH/6wKi/+sCo//rAqT/6wKl/+sCq//rAqz/6wKt/+sCrv/rAq//6wKw/+oCsf/qArL/6gKz/+oCtP/oArX/6AK2/0ACt//eArj/QAK5/94Cuv9AArv/3gK9/+sCv//rAsH/6wLD/+sCxf/rAsf/6wLJ/+sCy//rAs3/6wLP/+sC0f/rAtP/6wLV/+sC1//rAuX/MAL5/+sC+//rAv3/6wMOABQDEAAUAxIAFAMV/+oDF//qAxn/6gMb/+oDHf/qAx//6gMj/+gDMv/AAzP/wAM0/8ADNf/AAzb/wAM3/8ADOP/AA03/wANO/8ADT//AA4b/QAOO/0ADnv/rA6L/6gOk/+sDpv/oA6n/6gOq/+sDq//qA7L/MAO2/0ADwQAUA8P/3gPE/+sDxv/rA8j/6wPJ/+gDy//rA9L/6APa/+gD4v9AA+P/3gPm/+sD6//oA+z/6wPx/+sD8//oA/j/QAP5/94D+v9AA/v/3gP//+sEAf/rBAL/6wQM/+sEDv/rBBD/6wQU/+gEFv/oBBj/6AQd/+sEHv9ABB//3gQg/0AEIf/eBCL/QAQj/94EJP9ABCX/3gQm/0AEJ//eBCj/QAQp/94EKv9ABCv/3gQs/0AELf/eBC7/QAQv/94EMP9ABDH/3gQy/0AEM//eBDT/QAQ1/94EN//rBDn/6wQ7/+sEPf/rBD//6wRB/+sEQ//rBEX/6wRL/+sETf/rBE//6wRR/+sEU//rBFX/6wRX/+sEWf/rBFv/6wRd/+sEX//rBGH/6wRj/+oEZf/qBGf/6gRp/+oEa//qBG3/6gRv/+oEcf/oBHP/6AR1/+gEdwAUBJn/QASa/94EnP/rBKD/6wSk/+oEqf/rBKv/6wS/ABQEw//oBMX/6ATL/8AE0v/ABOr/wAAzADj/3wA6/+QAO//sAD3/3QDS/98A1v/fARn/5AE5/98BRf/fAesADgHtAA4CMwAOApn/3QMO/98DEP/fAxL/3wMg/+wDIv/dAyT/3QMyAA4DMwAOAzQADgM1AA4DNgAOAzcADgM4AA4DTQAOA04ADgNPAA4Di//dA5r/3QOd/90Dwf/fA9P/7APV/+wD1//sA9n/3QPq/+QD8v/dBHD/3QRy/90EdP/dBHf/3wSG/90Ev//fBML/5ATE/+QExv/sBMsADgTSAA4E6gAOAB0AOP/OADr/7QA9/9AA0v/OANb/zgEZ/+0BOf/OAUX/zgKZ/9ADDv/OAxD/zgMS/84DIv/QAyT/0AOL/9ADmv/QA53/0APB/84D2f/QA+r/7QPy/9AEcP/QBHL/0AR0/9AEd//OBIb/0AS//84Ewv/tBMT/7QARAC7/7gA5/+4Clf/uApb/7gKX/+4CmP/uAuX/7gMU/+4DFv/uAxj/7gMa/+4DHP/uAx7/7gOy/+4EYv/uBGT/7gTB/+4ATQAGABAACwAQAA0AFABBABIAR//oAEj/6ABJ/+gAS//oAFX/6ABhABMAlP/oAJn/6AC7/+gAyP/oAMn/6AD3/+gBA//oAR7/6AEi/+gBQv/oAWD/6AFh/+gBa//oAYQAEAGFABABhwAQAYgAEAGJABACof/oAqL/6AKj/+gCpP/oAqX/6AK9/+gCv//oAsH/6ALD/+gCxf/oAsf/6ALJ/+gCy//oAs3/6ALP/+gC0f/oAtP/6ALV/+gC1//oA57/6APE/+gDyP/oA8v/6APbABAD3AAQA98AEAPm/+gD7P/oA/H/6AP//+gEAf/oBAL/6AQO/+gEHf/oBDf/6AQ5/+gEO//oBD3/6AQ//+gEQf/oBEP/6ARF/+gEWf/oBFv/6ARd/+gEYf/oBJz/6ASp/+gEq//oAAIA9v/WAYX/mABAAEf/7ABI/+wASf/sAEv/7ABV/+wAlP/sAJn/7AC7/+wAyP/sAMn/7AD3/+wBA//sAR7/7AEi/+wBQv/sAWD/7AFh/+wBa//sAqH/7AKi/+wCo//sAqT/7AKl/+wCvf/sAr//7ALB/+wCw//sAsX/7ALH/+wCyf/sAsv/7ALN/+wCz//sAtH/7ALT/+wC1f/sAtf/7AOe/+wDxP/sA8j/7APL/+wD5v/sA+z/7APx/+wD///sBAH/7AQC/+wEDv/sBB3/7AQ3/+wEOf/sBDv/7AQ9/+wEP//sBEH/7ARD/+wERf/sBFn/7ARb/+wEXf/sBGH/7ASc/+wEqf/sBKv/7AAZAFP/4gEY/+IBhQAYAqv/4gKs/+ICrf/iAq7/4gKv/+IC+f/iAvv/4gL9/+IDpP/iA6r/4gPG/+IEDP/iBBD/4gRL/+IETf/iBE//4gRR/+IEU//iBFX/4gRX/+IEX//iBKD/4gAGABD/hAAS/4QBhv+EAYr/hAGO/4QBj/+EABEALv/sADn/7AKV/+wClv/sApf/7AKY/+wC5f/sAxT/7AMW/+wDGP/sAxr/7AMc/+wDHv/sA7L/7ARi/+wEZP/sBMH/7AAgAAb/8gAL//IAWv/zAF3/8wC9//MA9v/1ARr/8wGE//IBhf/yAYf/8gGI//IBif/yArT/8wK1//MDI//zA6b/8wPJ//MD0v/zA9r/8wPb//ID3P/yA9//8gPr//MD8//zBBT/8wQW//MEGP/zBHH/8wRz//MEdf/zBMP/8wTF//MAPwAn//MAK//zADP/8wA1//MAg//zAJP/8wCY//MAs//zAMQADQDT//MBCP/zARf/8wEb//MBHf/zAR//8wEh//MBQf/zAWr/8wJF//MCRv/zAkj/8wJJ//MChv/zApD/8wKR//MCkv/zApP/8wKU//MCvP/zAr7/8wLA//MCwv/zAtD/8wLS//MC1P/zAtb/8wL4//MC+v/zAvz/8wMt//MDiv/zA5f/8wO9//MDwP/zA+3/8wPw//MEC//zBA3/8wQP//MESv/zBEz/8wRO//MEUP/zBFL/8wRU//MEVv/zBFj/8wRa//MEXP/zBF7/8wRg//MEn//zBLj/8wBAACf/5gAr/+YAM//mADX/5gCD/+YAk//mAJj/5gCz/+YAuP/CAMQAEADT/+YBCP/mARf/5gEb/+YBHf/mAR//5gEh/+YBQf/mAWr/5gJF/+YCRv/mAkj/5gJJ/+YChv/mApD/5gKR/+YCkv/mApP/5gKU/+YCvP/mAr7/5gLA/+YCwv/mAtD/5gLS/+YC1P/mAtb/5gL4/+YC+v/mAvz/5gMt/+YDiv/mA5f/5gO9/+YDwP/mA+3/5gPw/+YEC//mBA3/5gQP/+YESv/mBEz/5gRO/+YEUP/mBFL/5gRU/+YEVv/mBFj/5gRa/+YEXP/mBF7/5gRg/+YEn//mBLj/5gA4ACX/5AA8/9IAPf/TALL/5AC0/+QAxP/iANr/0gEN/+QBM//SAUP/0gFd/9ICf//kAoD/5AKB/+QCgv/kAoP/5AKE/+QChf/kApn/0wK2/+QCuP/kArr/5AMi/9MDJP/TA4b/5AOL/9MDjv/kA5r/0wOb/9IDnf/TA7b/5APC/9ID2f/TA+L/5APy/9MD9f/SA/j/5AP6/+QEA//SBB7/5AQg/+QEIv/kBCT/5AQm/+QEKP/kBCr/5AQs/+QELv/kBDD/5AQy/+QENP/kBHD/0wRy/9MEdP/TBIb/0wSZ/+QAKAAQ/0YAEv9GACX/zQCy/80AtP/NAMf/8gEN/80Bhv9GAYr/RgGO/0YBj/9GAn//zQKA/80Cgf/NAoL/zQKD/80ChP/NAoX/zQK2/80CuP/NArr/zQOG/80Djv/NA7b/zQPi/80D+P/NA/r/zQQe/80EIP/NBCL/zQQk/80EJv/NBCj/zQQq/80ELP/NBC7/zQQw/80EMv/NBDT/zQSZ/80AAQDEAA4AuQBH/9wASP/cAEn/3ABL/9wAUf/BAFL/wQBT/9YAVP/BAFX/3ABZ/90AWv/hAF3/4QCU/9wAmf/cAJv/3QC7/9wAvf/hAL//5gDB/8EAwv/rAMP/6QDF//AAxv/nAMj/3ADJ/9wAyv/jAMv/3QDM/84Azf/UAM7/2wDs/8EA8P/BAPH/wQDz/8EA9P/BAPX/wQD3/9wA+P/BAPr/wQD7/8EA/v/BAQD/wQED/9wBBf/BARj/1gEa/+EBHv/cASL/3AEr/8EBNv/BATz/wQE+/8EBQv/cAVP/wQFV/8EBV//BAVz/wQFg/9wBYf/cAWv/3AKh/9wCov/cAqP/3AKk/9wCpf/cAqr/wQKr/9YCrP/WAq3/1gKu/9YCr//WArD/3QKx/90Csv/dArP/3QK0/+ECtf/hAr3/3AK//9wCwf/cAsP/3ALF/9wCx//cAsn/3ALL/9wCzf/cAs//3ALR/9wC0//cAtX/3ALX/9wC8v/BAvT/wQL2/8EC9//BAvn/1gL7/9YC/f/WAxX/3QMX/90DGf/dAxv/3QMd/90DH//dAyP/4QOe/9wDoP/BA6L/3QOk/9YDpv/hA6n/3QOq/9YDq//dA8T/3APF/8EDxv/WA8f/wQPI/9wDyf/hA8v/3APM/8ED0f/BA9L/4QPa/+ED4f/BA+b/3APn/8ED6//hA+z/3APx/9wD8//hA///3AQB/9wEAv/cBAj/wQQK/8EEDP/WBA7/3AQQ/9YEFP/hBBb/4QQY/+EEHP/BBB3/3AQ3/9wEOf/cBDv/3AQ9/9wEP//cBEH/3ARD/9wERf/cBEv/1gRN/9YET//WBFH/1gRT/9YEVf/WBFf/1gRZ/9wEW//cBF3/3ARf/9YEYf/cBGP/3QRl/90EZ//dBGn/3QRr/90Ebf/dBG//3QRx/+EEc//hBHX/4QR8/8EEmP/BBJz/3ASg/9YEpP/dBKn/3ASr/9wEtf/BBLf/wQTD/+EExf/hAHwABv/a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//QEFv/0BBj/9ARx//QEc//0BHX/9ATD//QExf/0BMn/8wBiAAb/ygAL/8oAOP/SADr/1AA8//QAPf/TAFr/5gBc/+8AXf/mAL3/5gDS/9IA1v/SANr/9ADe/+0A4f/hAOb/1ADu/+8A9v/JAP7/0QEJ/+UBGf/UARr/5gEg/+MBM//0ATT/7wE5/9IBOv/EAUP/9AFE/+8BRf/SAUf/4QFJ/+EBXf/0AV7/7wFi/9QBY//1AWT/5wFs/2QBbf/JAYT/ygGF/8oBh//KAYj/ygGJ/8oCmf/TArT/5gK1/+YDDv/SAxD/0gMS/9IDIv/TAyP/5gMk/9MDi//TA5r/0wOb//QDnf/TA6b/5gO1/+0Dwf/SA8L/9APJ/+YDyv/vA9L/5gPZ/9MD2v/mA9v/ygPc/8oD3//KA+r/1APr/+YD8v/TA/P/5gP1//QD9v/vBAP/9AQE/+8EE//tBBT/5gQV/+0EFv/mBBf/7QQY/+YEGf/hBHD/0wRx/+YEcv/TBHP/5gR0/9MEdf/mBHf/0gR5/+EEhv/TBL//0gTC/9QEw//mBMT/1ATF/+YAcgAG/8AAC//AADj/nQA6/8cAPP/wAD3/qwBR/9IAUv/SAFT/0gDB/9IA0v+dANT/9QDW/50A2v/wAN3/9QDe/+oA4f/lAOb/wQDs/9IA8P/SAPH/0gDz/9IA9P/SAPX/0gD2/80A+P/SAPr/0gD7/9IA/v/SAQD/0gEF/9IBGf/HASv/0gEz//ABNv/SATn/nQE6/8wBPP/SAT7/0gFD//ABRf+dAUf/5QFJ/+UBTP/fAVD/9QFT/9IBVf/SAVf/0gFc/9IBXf/wAWL/zgFk/+oBZv/1AWz/ngFt/84Bb//1AYT/wAGF/8ABh//AAYj/wAGJ/8ACmf+rAqr/0gLy/9IC9P/SAvb/0gL3/9IDDv+dAxD/nQMS/50DIv+rAyT/qwOL/6sDmv+rA5v/8AOd/6sDoP/SA7X/6gPB/50Dwv/wA8X/0gPH/9IDzP/SA9H/0gPZ/6sD2//AA9z/wAPf/8AD4f/SA+f/0gPq/8cD8v+rA/X/8AQD//AECP/SBAr/0gQT/+oEFf/qBBf/6gQZ/+UEHP/SBHD/qwRy/6sEdP+rBHf/nQR5/+UEfP/SBIb/qwSY/9IEtf/SBLf/0gS//50Ewv/HBMT/xwB1AAb/sQAL/7EAOP+eADr/xQA8//IAPf+oAFH/zwBS/88AVP/PAFz/7wDB/88A0v+eANb/ngDa//IA3v/sAOH/4QDm/8IA7P/PAO7/7wDw/88A8f/PAPP/zwD0/88A9f/PAPb/xgD4/88A+v/PAPv/zwD+/88BAP/PAQX/zwEZ/8UBK//PATP/8gE0/+8BNv/PATn/ngE6/8ABPP/PAT7/zwFD//IBRP/vAUX/ngFH/+EBSf/hAUz/3wFT/88BVf/PAVf/zwFc/88BXf/yAV7/7wFi/80BZP/oAWz/nwFt/8YBhP+xAYX/sQGH/7EBiP+xAYn/sQKZ/6gCqv/PAvL/zwL0/88C9v/PAvf/zwMO/54DEP+eAxL/ngMi/6gDJP+oA4v/qAOa/6gDm//yA53/qAOg/88Dtf/sA8H/ngPC//IDxf/PA8f/zwPK/+8DzP/PA9H/zwPZ/6gD2/+xA9z/sQPf/7ED4f/PA+f/zwPq/8UD8v+oA/X/8gP2/+8EA//yBAT/7wQI/88ECv/PBBP/7AQV/+wEF//sBBn/4QQc/88EcP+oBHL/qAR0/6gEd/+eBHn/4QR8/88Ehv+oBJj/zwS1/88Et//PBL//ngTC/8UExP/FAFMAOP++AFH/4QBS/+EAVP/hAFr/7wBd/+8Avf/vAMH/4QDS/74A1v++AOb/yQDs/+EA8P/hAPH/4QDz/+EA9P/hAPX/4QD2/98A+P/hAPr/4QD7/+EA/v/hAQD/4QEF/+EBCf/tARr/7wEg/+sBK//hATb/4QE5/74BOv/fATz/4QE+/+EBRf++AUz/6QFT/+EBVf/hAVf/4QFc/+EBY//1AW3/4AKq/+ECtP/vArX/7wLy/+EC9P/hAvb/4QL3/+EDDv++AxD/vgMS/74DI//vA6D/4QOm/+8Dwf++A8X/4QPH/+EDyf/vA8z/4QPR/+ED0v/vA9r/7wPh/+ED5//hA+v/7wPz/+8ECP/hBAr/4QQU/+8EFv/vBBj/7wQc/+EEcf/vBHP/7wR1/+8Ed/++BHz/4QSY/+EEtf/hBLf/4QS//74Ew//vBMX/7wBqADj/5gA6/+cAPP/yAD3/5wBR/9YAUv/WAFT/1gBc//EAwf/WANL/5gDW/+YA2v/yAN7/7gDh/+gA5v/mAOz/1gDu//EA8P/WAPH/1gDz/9YA9P/WAPX/1gD2/9AA+P/WAPr/1gD7/9YA/v/W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BMT/yQAxADj/4wA8/+UAPf/kANL/4wDU/+UA1v/jANn/4gDa/+UA3f/lAN7/6QDy/+oBBP/qATP/5QE5/+MBQ//lAUX/4wFQ/+UBUf/qAV3/5QFm/+UBbP/kAW//5QFw/+oCmf/kAw7/4wMQ/+MDEv/jAyL/5AMk/+QDi//kA5r/5AOb/+UDnf/kA7X/6QPB/+MDwv/lA9n/5APy/+QD9f/lBAP/5QQT/+kEFf/pBBf/6QRw/+QEcv/kBHT/5AR3/+MEhv/kBL//4wAkADj/4gA8/+QA0v/iANT/5ADW/+IA2f/hANr/5ADd/+QA3v/pAO3/5ADy/+sBBP/rATP/5AE5/+IBQ//kAUX/4gFQ/+QBUf/rAV3/5AFm/+QBb//kAXD/6wMO/+IDEP/iAxL/4gOb/+QDtf/pA8H/4gPC/+QD9f/kBAP/5AQT/+kEFf/pBBf/6QR3/+IEv//iABgAOP/rAD3/8wDS/+sA1v/rATn/6wFF/+sCmf/zAw7/6wMQ/+sDEv/rAyL/8wMk//MDi//zA5r/8wOd//MDwf/rA9n/8wPy//MEcP/zBHL/8wR0//MEd//rBIb/8wS//+sAOQBR/+8AUv/vAFT/7wBc//AAwf/vAOz/7wDt/+4A7v/wAPD/7wDx/+8A8//vAPT/7wD1/+8A9v/uAPj/7wD6/+8A+//vAP7/7wEA/+8BBf/vAQn/9AEg//EBK//vATT/8AE2/+8BOv/vATz/7wE+/+8BRP/wAVP/7wFV/+8BV//vAVz/7wFe//ABbf/vAqr/7wLy/+8C9P/vAvb/7wL3/+8DoP/vA8X/7wPH/+8Dyv/wA8z/7wPR/+8D4f/vA+f/7wP2//AEBP/wBAj/7wQK/+8EHP/vBHz/7wSY/+8Etf/vBLf/7wAkAAb/8gAL//IAWv/1AF3/9QC9//UA9v/0AP7/9AEJ//UBGv/1ATr/9QFt//UBhP/yAYX/8gGH//IBiP/yAYn/8gK0//UCtf/1AyP/9QOm//UDyf/1A9L/9QPa//UD2//yA9z/8gPf//ID6//1A/P/9QQU//UEFv/1BBj/9QRx//UEc//1BHX/9QTD//UExf/1ADUAUf/uAFL/7gBU/+4Awf/uAOz/7gDtABQA8P/uAPH/7gDz/+4A9P/uAPX/7gD2/+0A+P/uAPn/7QD6/+4A+//uAPz/0AD+/+4BAP/u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ABIAAP/SAAAAAAAAAAAAAAAAAAAAAAAAAAD/yv53/7sAAAAAAAD/OQAA/+kAAAAAAAAAAgCaAAYABgAAAAsACwABABAAEAACABIAEgADACUAKQAEACwANAAJADgAPgASAEUARwAZAEkASQAcAEwATAAdAFEAVAAeAFYAVgAiAFoAWgAjAFwAXgAkAIoAigAnAJYAlgAoALEAtAApAL0AvQAtAMEAwQAuAMcAxwAvANQA1QAwANcA1wAyANoA2gAzANwA3gA0AOAA5gA3AOwA7AA+AO4A7gA/APcA9wBAAPwA/ABBAP4A/wBCAQQBBQBEAQoBCgBGAQ0BDQBHARgBGgBIAS4BMABLATMBNQBOATcBNwBRATkBOQBSATsBOwBTAUMBRABUAVQBVABWAVYBVgBXAVgBWABYAVwBXgBZAYQBigBcAY4BjwBjAdgB2ABlAd0B3QBmAeAB4QBnAesB7QBpAf8B/wBsAg4CEABtAjACMABwAjMCMwBxAkUCRQByAkcCSABzAnoCewB1An0CfQB3An8CpQB4AqoCrwCfArQCxAClAsYCzwC2AtgC2gDAAtwC3ADDAt4C3gDEAuAC4ADFAuIC4gDGAuUC5QDHAucC5wDIAukC6QDJAusC6wDKAu0C7QDLAu8C7wDMAvEC/QDNAv8C/wDaAwEDAQDbAwMDAwDcAw4DDgDdAxADEADeAxIDEgDfAxQDFADgAxYDFgDhAxgDGADiAxoDGgDjAxwDHADkAx4DHgDlAyADIADmAyIDKgDnAy8DOADwA0MDRwD6A00DTwD/A1QDVAECA2UDaQEDA20DbwEIA3gDeAELA4YDiwEMA44DnQESA6ADoAEiA6QDpAEjA6YDpgEkA6oDqgElA60DrgEmA7ADuQEoA7sDvQEyA78DxAE1A8YDzAE7A9ID0wFCA9UD1QFEA9cD1wFFA9kD3AFGA98D5AFKA+YD5gFQA+oD6wFRA/AD+wFTA/4D/wFfBAEEBAFhBAsEDAFlBBAEEAFnBBIEGAFoBB4ERgFvBEgESAGYBEoEVwGZBF8EXwGnBGIEYgGoBGQEZAGpBHAEdQGqBHcEdwGwBHsEfAGxBH8EfwGzBIEEggG0BIQEhAG2BIYEhgG3BJcEmwG4BJ0EnQG9BJ8EoAG+BKIEogHABKYEqAHBBKoEqgHEBKwErgHFBLAEsAHIBLIEsgHJ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AAAAAAAAAAAAAQABAAAABQAAAAAAAAAAAAAAAAALAAIAGQAAAAsAAAAAAAAAEQAAAAAAGQAiAAAAAAAgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAwAAABUAAAADAAMAGwADAAMAAwAAAAEAAwAhAAMAAwAAAAAAAwAAAAMAAAAAAAEAGwADAAAAAAACAAAAAAAAAAAABgAAAAAAAAAAAAAAAAAAAAAAAAACAAQAHQAJAAIAAAACAAEAAgAAAAIAAQAAAAAAAAAAAAAAAAAAAAAAAwAAAAAAAAAAAAAAAAAAABEAFQAAAAMAAAAAAAsAAAAAAAMAAAADAAAAAAACAAEAEQAVAAsAAAAgACEAAAAAAAAAAAAAAAAAAAAZABsAAAADAAAAAwAAAAMAAAAAAAAAAAADABEAFQAAAAEAAQAAAAAAAAAAABkAAAAAAAAAAgABAAAAAAAAABkAGwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAB8AHwAAABQAFAAaABQAFAAUABoAAAAAAAAAGgAaAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAFwAcACQAAAASABgAHgAAAAgAAAAIAAAAAAAAAAAAAAAAAAAACAAAAAAAAAAAAAAADQAIAA0AAAAAAAAAAAAAAAAAGAAIAAAAAAAYAAAAAAAAABwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAcAAAAAAAYAAgAFwAcABgAAAAAAAAAAAAAAAgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAIAAAADQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAgACAAAAAgACAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAfAAAAAAAAAAAAAAAGAAYABgAGAAYABgAGAAIAAAAAAAAAAAAAAAAAAAAAAAAAAgACAAIAAgACAAoACgAKAAoADAAHAAcABwAHAAcABwAHAAEAAQABAAEAAQAAAAAAAAAAAAMABAAEAAQABAAEAAUABQAFAAUACQAJAAYABwAGAAcABgAHAAIAAQACAAEAAgABAAIAAQAAAAEAAAABAAAAAQAAAAEAAAABAAAAAQACAAEAAgABAAIAAQACAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAjAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMAAAADAAAAAwADAAIABAACAAQAAgAEAAAAAAAAAAAAAAAAABAADgAQAA4AEAAOABAADgAQAA4ACwAAAAsAAAALAAAACgAFAAoABQAKAAUACgAFAAoABQAKAAUAFgAAAAwACQAMABMADwATAA8AEwAPAAAAAAACAAAAAAAAAAAADQANAA0ADQANAA0ADQAIAAAAAAAAAAAAAAAAAAAAAAAAAAgACAAIAAgACAASABIAEgASABcADQANAA0ACAAIAAgACAAAAAAAAAAAAAAAAAAIAAgACAAIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAgACAAIAAAAAAAAAB4AHgAeAB4AAAAYAAAAEgASABIAEgASABIAJAAXABcAAAAAAAAABgAAAAAAAAACAAwAAAAAAAYAAAAAABMAAAAAAAAAAAAAAAIAAAAAAAwAEQAAAAwAAQAAAAMAAAAFAAAABAAAAAkAAAAAAAUABAAFAAAAAAAAAAAAAAAAACMAAAAAACIABgAAAAAAAAAAAAAAAAACAAAAAAACAAsAEQAHAAEAAwAEAAMAAQAJABUAAQADAA4AAAAAAAAAAwAJABYAAAAWAAAAFgAAAAwACQAUABQAAAAAABQAAAADAAYABwAAAAAAAQADAAAAAAAdAAkAAQACAAAAAAACAAEADAAJAAAAEQAVAAAABgAHAAYABwAAAAAAAAABAAAAAQABABEAFQAAAAAAAAADAAAAAwACAAQAAgABAAIABAAAAAAAIgAJACIACQAiAAkAIAAhAAAAAwABAAYABwAGAAcABgAHAAYABwAGAAcABgAHAAYABwAGAAcABgAHAAYABwAGAAcABgAHAAAAAQAAAAEAAAABAAAAAQAAAAEAAAABAAAAAQAAAAEAAAAA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AoICgwKEAoUChgKHAogCiQKKAosCjAKNAo4CjwKQApECkgKTApQClQKWApcCmAKZArYCuAK6ArwCvgLAAsICxALGAsgCygLMAs4C0ALSAtQC1gLYAtoC3ALeAuAC4gLjAuUC5wLpAusC7QLvAvEC8wL1AvgC+gL8Av4DAAMCAwQDBgMIAwoDDAMOAxADEgMUAxYDGAMaAxwDHgMgAyIDJAMlAycDKQMrAy0DhgOHA4gDiQOKA4sDjAOOA48DkAORA5IDkwOUA5UDlgOXA5gDmQOaA5sDnAOdA60DrgOvA7ADsQOyA7MDtAO1A7YDtwO4A7kDugO7A7wDvQO+A78DwAPBA8ID0wPVA9cD2QPuA/AD8gQHBA0EEwR9BIIEhgUHBQkAAQAAAAEACAACAdwA6wJxAjMCMgIxAjACKAHmAeUB5AHjAeIB4QHgAd8B3gHdAdwB2wHaAdkB2AHXAdYB1QHUAdMB0gJkAnMDMAJ1AnQDLwHjAnICdwJSBNIE0wHqAesE1ATVBNYB7ATXAe0B7gHvBNwB8AHwBN0E3gHxAfIB8wH6BOsE7AH7AfwB/QH+Af8CAATvBPAE8gT1BP4CAgIDAgQCBQIGAgcCCAIJAgoCCwH0AfUB9gH3AfgB+QI7Ag0CDgIPAhAE+AIRAhMCFAIVAhcCGQJ2AzEDMgMzAzQDNQM2AzcDOAM5AzoDOwM8Az0DPgM/A0ADQQNCA0MDRANFA0YDRwNIA0kDSgNLA0wDggNNA04DTwNQA1EDUgNTA1QDVQNWA1cDWANZA1oDWwNcA10DXgNfA2ADYQNiBP8DZANlA2YDZwNoA2kDagNrA2wDbQNuA28DcANxA3IDcwN0A3UFAgN2A3cDeQN4A3oDewN8A30DfgN/A4ADgQODA4QDhQUABQEEywTMBM0EzgTYBNsE2QTaBN8E4AThBM8E0ATRBOoE7QTuBPEE8wT0AgEE9gTiBOME5ATlBOYE5wToBOkFAwUEBQUFBgT3BPkE+gIYBPwCGgT9BPsCFgIMAhIFCwUMAAEA6wAKAEUARgBHAEgASQBKAEsATABNAE4ATwBQAFEAUgBTAFQAVQBWAFcAWABZAFoAWwBcAF0AXgCFAIYAhwCJAIoAiwCNAJAAkgCUALsAvAC9AL4AvwDAAMEAwgDDAMQAxQDGAMcAyADJAMoAywDMAM0AzgDqAOsA7ADtAO4A7wDwAPEA8gDzAPQA9QD2APcA+AD5APoA+wD8AP0A/gD/AQABAQECAQMBBAEFAQYBBwEwATQBNgE4AToBPAFCAUQBRgFKAU0BWgJ8An4CmgKbApwCnQKeAp8CoAKhAqICowKkAqUCpgKnAqgCqQKqAqsCrAKtAq4CrwKwArECsgKzArQCtQK3ArkCuwK9Ar8CwQLDAsUCxwLJAssCzQLPAtEC0wLVAtcC2QLbAt0C3wLhAuQC5gLoAuoC7ALuAvAC8gL0AvYC+QL7Av0C/wMBAwMDBQMHAwkDCwMNAw8DEQMTAxUDFwMZAxsDHQMfAyEDIwMmAygDKgMsAy4DngOfA6ADoQOjA6QDpQOmA6cDqAOpA6oDqwOsA8MDxAPFA8YDxwPIA8kDygPLA8wDzQPOA88D0APRA9ID1APWA9gD2gPvA/ED8wQBBAgEDgQUBH4EfwSDBIcFCAUKAAYAAAAGABIAKgBCAFoAcgCKAAMAAAABABIAAQCQAAEAAAADAAEAAQBNAAMAAAABABIAAQB4AAEAAAADAAEAAQBOAAMAAAABABIAAQBgAAEAAAADAAEAAQLhAAMAAAABABIAAQBIAAEAAAADAAEAAQPOAAMAAAABABIAAQAwAAEAAAADAAEAAQPQAAMAAAABABIAAQAYAAEAAAADAAEAAQRJAAIAAgCoAKwAAAEkAScABQABAAAAAQAIAAIAEgAGAmECXwJiAmMCYAUNAAEABgBNAE4C4QPOA9AESQAEAAAAAQAIAAEGMgA2AHIApACuALgAygD8AQ4BGAFKAWQBfgGQAboB9gIAAiICPAJOAooCnAK2AuAC8gMkAy4DOANKA3wDhgOQA5oDtAPOA+AECgQ8BEYEaASCBJQExgTYBPIFHAUuBTgFQgVMBVYFgAWqBdQF/gYoAAYADgAUABoAIAAmACwCgAACAKkEHgACAK0CfwACAKgEIAACAKsCggACAKoEmQACAKwAAQAEBKYAAgCtAAEABAK8AAIAqQACAAYADASqAAIBugSoAAIArQAGAA4AFAAaACAAJgAsAogAAgCpBDYAAgCtAocAAgCoBDgAAgCrBDoAAgCqBJsAAgCsAAIABgAMBJUAAgCpAtYAAgG6AAEABASsAAIArQAGAA4AFAAaACAAJgAsAowAAgCpBEgAAgCtAosAAgCoBEYAAgCrAtoAAgCqBJ0AAgCsAAMACAAOABQErgACAKkC5wACAboEsAACAK0AAwAIAA4AFALpAAIAqQLrAAIBugSyAAIArQACAAYADAPgAAIAqQS0AAIArQAFAAwAEgAYAB4AJALxAAIAqQLzAAIBugS2AAIArQSXAAIAqAKPAAIAqgAHABAAGAAeACQAKgAwADYEuAADAKoAqQKRAAIAqQRKAAIArQKQAAIAqARMAAIAqwKTAAIAqgSfAAIArAABAAQEuQACAKkABAAKABAAFgAcAv4AAgCpAwAAAgG6BLsAAgCtBKEAAgCsAAMACAAOABQDBAACAKkDCgACAboEvQACAK0AAgAGAAwDDgACAboEvwACAK0ABwAQABgAHgAkACoAMAA2BMEAAwCqAKkClgACAKkEYgACAK0ClQACAKgEZAACAKsDFAACAKoEowACAKwAAgAGAAwExAACAK0EwgACAKoAAwAIAA4AFAPVAAIAqQTGAAIArQPTAAIAqAAFAAwAEgAYAB4AJAKZAAIAqQRwAAIArQPZAAIAqARyAAIAqwR0AAIAqgACAAYADAMlAAIAqQTIAAIArQAGAA4AFAAaACAAJgAsApsAAgCpBB8AAgCtApoAAgCoBCEAAgCrAp0AAgCqBJoAAgCsAAEABASnAAIArQABAAQCvQACAKkAAgAGAAwEqwACAboEqQACAK0ABgAOABQAGgAgACYALAKjAAIAqQQ3AAIArQKiAAIAqAQ5AAIAqwQ7AAIAqgScAAIArAABAAQElgACAKkAAQAEBK0AAgCtAAEABARJAAIArQADAAgADgAUBK8AAgCpAugAAgG6BLEAAgCtAAMACAAOABQC6gACAKkC7AACAboEswACAK0AAgAGAAwD4QACAKkEtQACAK0ABQAMABIAGAAeACQC8gACAKkC9AACAboEtwACAK0EmAACAKgCqgACAKoABgAOABQAGgAgACYALAKsAAIAqQRLAAIArQKrAAIAqARNAAIAqwKuAAIAqgSgAAIArAABAAQEugACAKkABAAKABAAFgAcAv8AAgCpAwEAAgG6BLwAAgCtBKIAAgCsAAMACAAOABQDBQACAKkDCwACAboEvgACAK0AAgAGAAwDDwACAboEwAACAK0ABgAOABQAGgAgACYALAKxAAIAqQRjAAIArQKwAAIAqARlAAIAqwMVAAIAqgSkAAIArAACAAYADATFAAIArQTDAAIAqgADAAgADgAUA9YAAgCpBMcAAgCtA9QAAgCoAAUADAASABgAHgAkArQAAgCpBHEAAgCtA9oAAgCoBHMAAgCrBHUAAgCqAAIABgAMAyYAAgCpBMkAAgCtAAEABAMrAAIAqQABAAQDLQACAKkAAQAEAywAAgCpAAEABAMuAAIAqQAFAAwAEgAYAB4AJAKnAAIAqQKmAAIAqARHAAIAqwLbAAIAqgSeAAIArAAFAAwAEgAYAB4AJARYAAIAqQRgAAIArQRaAAIAqARcAAIAqwReAAIAqgAFAAwAEgAYAB4AJARZAAIAqQRhAAIArQRbAAIAqARdAAIAqwRfAAIAqgAFAAwAEgAYAB4AJARmAAIAqQRuAAIArQRoAAIAqARqAAIAqwRsAAIAqgAFAAwAEgAYAB4AJARnAAIAqQRvAAIArQRpAAIAqARrAAIAqwRtAAIAqgABAAQEpQACAKkAAgARACUAKQAAACsALQAFAC8ANAAIADYAOwAOAD0APgAUAEUASQAWAEsATQAbAE8AVAAeAFYAWwAkAF0AXgAqAIEAgQAsAIMAgwAtAIYAhgAuAIkAiQAvAI0AjQAwAJgAmwAxANAA0AA1AAEAAAABAAgAAQAGAAIAAQACAwgDCQABAAAAAQAIAAIAEgAGBQcFCAUJBQoFCwUMAAEABgK6ArsCzALNA08DWAABAAAAAQAIAAEABgABAAEAAQF7AAQAAAABAAgAAQBAAAEACAACAAYADgG+AAMASgBNAbwAAgBNAAQAAAABAAgAAQAcAAEACAACAAYADgG/AAMASgBQAb0AAgBQAAEAAQBKAAQAAAABAAgAAQAqAAMADAAWACAAAQAEAbsAAgBKAAEABAHBAAIAWAABAAQBwAACAFgAAQADAEoAVwCVAAEAAAABAAgAAQAGAd4AAQABAEsAAQAAAAEACAABAAYBbwABAAEAuwABAAAAAQAIAAEABgH1AAEAAQA2AAEAAAABAAgAAgAcAAICLAItAAEAAAABAAgAAgAKAAICLgIvAAEAAgAvAE8AAQAAAAEACAACAB4ADAJFAkcCRgJIAkkCZwJoAmkCagJrAmwCbQABAAwAJwAoACsAMwA1AEYARwBIAEsAUwBUAFUAAQAAAAEACAACAAwAAwJuAm8CbwABAAMASQBLAmoAAQAAAAEACAACAC4AFAJaAl4CWAJVAlcCVgJbAlkCXQJcAk8CSgJLAkwCTQJOABoAHAJTAmUAAgAEABQAHQAAAmYCZgAKAnACcAALBI0ElAAMAAEAAAABAAgAAgAuABQElAJwBI0EjgSPBJAEkQJmBJIEkwJMAk4CTQJLAk8CZQAaAlMAHAJKAAIAAgAUAB0AAAJVAl4ACgABAAAAAQAIAAIALgAUAlsCXQJeAlgCVQJXAlYCWQJcAloAGwAVABYAFwAYABkAGgAcAB0AFAABABQAGgAcAkoCSwJMAk0CTgJPAlMCZQJmAnAEjQSOBI8EkASRBJIEkwSUAAEAAAABAAgAAgAuABQEkQSSAnAEjQSOBI8EkAJmBJMAFwAZABgAFgAbABQAGgAdABwAFQSUAAIABgAaABoAAAAcABwAAQJKAk8AAgJTAlMACAJVAl4ACQJlAmUAEwABAAAAAQAIAAEABgGBAAEAAQATAAYAAAABAAgAAwABABIAAQBsAAAAAQAAABgAAgADAZQBlAAAAcUBxwABAh8CJQAEAAEAAAABAAgAAgA8AAoBxwHGAcUCHwIgAiECIgIjAiQCJQABAAAAAQAIAAIAGgAKAj4AegBzAHQCPwJAAkECQgJDAkQAAgABABQAHQAA");

/***/ }),

/***/ "?6208":
/*!************************!*\
  !*** crypto (ignored) ***!
  \************************/
/***/ (() => {

/* (ignored) */

/***/ }),

/***/ "?0fcc":
/*!********************!*\
  !*** fs (ignored) ***!
  \********************/
/***/ (() => {

/* (ignored) */

/***/ }),

/***/ "?f461":
/*!**********************!*\
  !*** path (ignored) ***!
  \**********************/
/***/ (() => {

/* (ignored) */

/***/ }),

/***/ "?4db5":
/*!********************!*\
  !*** fs (ignored) ***!
  \********************/
/***/ (() => {

/* (ignored) */

/***/ }),

/***/ "./node_modules/comlink/dist/esm/comlink.mjs":
/*!***************************************************!*\
  !*** ./node_modules/comlink/dist/esm/comlink.mjs ***!
  \***************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   createEndpoint: () => (/* binding */ createEndpoint),
/* harmony export */   expose: () => (/* binding */ expose),
/* harmony export */   finalizer: () => (/* binding */ finalizer),
/* harmony export */   proxy: () => (/* binding */ proxy),
/* harmony export */   proxyMarker: () => (/* binding */ proxyMarker),
/* harmony export */   releaseProxy: () => (/* binding */ releaseProxy),
/* harmony export */   transfer: () => (/* binding */ transfer),
/* harmony export */   transferHandlers: () => (/* binding */ transferHandlers),
/* harmony export */   windowEndpoint: () => (/* binding */ windowEndpoint),
/* harmony export */   wrap: () => (/* binding */ wrap)
/* harmony export */ });
/**
 * @license
 * Copyright 2019 Google LLC
 * SPDX-License-Identifier: Apache-2.0
 */
const proxyMarker = Symbol("Comlink.proxy");
const createEndpoint = Symbol("Comlink.endpoint");
const releaseProxy = Symbol("Comlink.releaseProxy");
const finalizer = Symbol("Comlink.finalizer");
const throwMarker = Symbol("Comlink.thrown");
const isObject = (val) => (typeof val === "object" && val !== null) || typeof val === "function";
/**
 * Internal transfer handle to handle objects marked to proxy.
 */
const proxyTransferHandler = {
    canHandle: (val) => isObject(val) && val[proxyMarker],
    serialize(obj) {
        const { port1, port2 } = new MessageChannel();
        expose(obj, port1);
        return [port2, [port2]];
    },
    deserialize(port) {
        port.start();
        return wrap(port);
    },
};
/**
 * Internal transfer handler to handle thrown exceptions.
 */
const throwTransferHandler = {
    canHandle: (value) => isObject(value) && throwMarker in value,
    serialize({ value }) {
        let serialized;
        if (value instanceof Error) {
            serialized = {
                isError: true,
                value: {
                    message: value.message,
                    name: value.name,
                    stack: value.stack,
                },
            };
        }
        else {
            serialized = { isError: false, value };
        }
        return [serialized, []];
    },
    deserialize(serialized) {
        if (serialized.isError) {
            throw Object.assign(new Error(serialized.value.message), serialized.value);
        }
        throw serialized.value;
    },
};
/**
 * Allows customizing the serialization of certain values.
 */
const transferHandlers = new Map([
    ["proxy", proxyTransferHandler],
    ["throw", throwTransferHandler],
]);
function isAllowedOrigin(allowedOrigins, origin) {
    for (const allowedOrigin of allowedOrigins) {
        if (origin === allowedOrigin || allowedOrigin === "*") {
            return true;
        }
        if (allowedOrigin instanceof RegExp && allowedOrigin.test(origin)) {
            return true;
        }
    }
    return false;
}
function expose(obj, ep = globalThis, allowedOrigins = ["*"]) {
    ep.addEventListener("message", function callback(ev) {
        if (!ev || !ev.data) {
            return;
        }
        if (!isAllowedOrigin(allowedOrigins, ev.origin)) {
            console.warn(`Invalid origin '${ev.origin}' for comlink proxy`);
            return;
        }
        const { id, type, path } = Object.assign({ path: [] }, ev.data);
        const argumentList = (ev.data.argumentList || []).map(fromWireValue);
        let returnValue;
        try {
            const parent = path.slice(0, -1).reduce((obj, prop) => obj[prop], obj);
            const rawValue = path.reduce((obj, prop) => obj[prop], obj);
            switch (type) {
                case "GET" /* MessageType.GET */:
                    {
                        returnValue = rawValue;
                    }
                    break;
                case "SET" /* MessageType.SET */:
                    {
                        parent[path.slice(-1)[0]] = fromWireValue(ev.data.value);
                        returnValue = true;
                    }
                    break;
                case "APPLY" /* MessageType.APPLY */:
                    {
                        returnValue = rawValue.apply(parent, argumentList);
                    }
                    break;
                case "CONSTRUCT" /* MessageType.CONSTRUCT */:
                    {
                        const value = new rawValue(...argumentList);
                        returnValue = proxy(value);
                    }
                    break;
                case "ENDPOINT" /* MessageType.ENDPOINT */:
                    {
                        const { port1, port2 } = new MessageChannel();
                        expose(obj, port2);
                        returnValue = transfer(port1, [port1]);
                    }
                    break;
                case "RELEASE" /* MessageType.RELEASE */:
                    {
                        returnValue = undefined;
                    }
                    break;
                default:
                    return;
            }
        }
        catch (value) {
            returnValue = { value, [throwMarker]: 0 };
        }
        Promise.resolve(returnValue)
            .catch((value) => {
            return { value, [throwMarker]: 0 };
        })
            .then((returnValue) => {
            const [wireValue, transferables] = toWireValue(returnValue);
            ep.postMessage(Object.assign(Object.assign({}, wireValue), { id }), transferables);
            if (type === "RELEASE" /* MessageType.RELEASE */) {
                // detach and deactive after sending release response above.
                ep.removeEventListener("message", callback);
                closeEndPoint(ep);
                if (finalizer in obj && typeof obj[finalizer] === "function") {
                    obj[finalizer]();
                }
            }
        })
            .catch((error) => {
            // Send Serialization Error To Caller
            const [wireValue, transferables] = toWireValue({
                value: new TypeError("Unserializable return value"),
                [throwMarker]: 0,
            });
            ep.postMessage(Object.assign(Object.assign({}, wireValue), { id }), transferables);
        });
    });
    if (ep.start) {
        ep.start();
    }
}
function isMessagePort(endpoint) {
    return endpoint.constructor.name === "MessagePort";
}
function closeEndPoint(endpoint) {
    if (isMessagePort(endpoint))
        endpoint.close();
}
function wrap(ep, target) {
    return createProxy(ep, [], target);
}
function throwIfProxyReleased(isReleased) {
    if (isReleased) {
        throw new Error("Proxy has been released and is not useable");
    }
}
function releaseEndpoint(ep) {
    return requestResponseMessage(ep, {
        type: "RELEASE" /* MessageType.RELEASE */,
    }).then(() => {
        closeEndPoint(ep);
    });
}
const proxyCounter = new WeakMap();
const proxyFinalizers = "FinalizationRegistry" in globalThis &&
    new FinalizationRegistry((ep) => {
        const newCount = (proxyCounter.get(ep) || 0) - 1;
        proxyCounter.set(ep, newCount);
        if (newCount === 0) {
            releaseEndpoint(ep);
        }
    });
function registerProxy(proxy, ep) {
    const newCount = (proxyCounter.get(ep) || 0) + 1;
    proxyCounter.set(ep, newCount);
    if (proxyFinalizers) {
        proxyFinalizers.register(proxy, ep, proxy);
    }
}
function unregisterProxy(proxy) {
    if (proxyFinalizers) {
        proxyFinalizers.unregister(proxy);
    }
}
function createProxy(ep, path = [], target = function () { }) {
    let isProxyReleased = false;
    const proxy = new Proxy(target, {
        get(_target, prop) {
            throwIfProxyReleased(isProxyReleased);
            if (prop === releaseProxy) {
                return () => {
                    unregisterProxy(proxy);
                    releaseEndpoint(ep);
                    isProxyReleased = true;
                };
            }
            if (prop === "then") {
                if (path.length === 0) {
                    return { then: () => proxy };
                }
                const r = requestResponseMessage(ep, {
                    type: "GET" /* MessageType.GET */,
                    path: path.map((p) => p.toString()),
                }).then(fromWireValue);
                return r.then.bind(r);
            }
            return createProxy(ep, [...path, prop]);
        },
        set(_target, prop, rawValue) {
            throwIfProxyReleased(isProxyReleased);
            // FIXME: ES6 Proxy Handler `set` methods are supposed to return a
            // boolean. To show good will, we return true asynchronously ¯\_(ツ)_/¯
            const [value, transferables] = toWireValue(rawValue);
            return requestResponseMessage(ep, {
                type: "SET" /* MessageType.SET */,
                path: [...path, prop].map((p) => p.toString()),
                value,
            }, transferables).then(fromWireValue);
        },
        apply(_target, _thisArg, rawArgumentList) {
            throwIfProxyReleased(isProxyReleased);
            const last = path[path.length - 1];
            if (last === createEndpoint) {
                return requestResponseMessage(ep, {
                    type: "ENDPOINT" /* MessageType.ENDPOINT */,
                }).then(fromWireValue);
            }
            // We just pretend that `bind()` didn’t happen.
            if (last === "bind") {
                return createProxy(ep, path.slice(0, -1));
            }
            const [argumentList, transferables] = processArguments(rawArgumentList);
            return requestResponseMessage(ep, {
                type: "APPLY" /* MessageType.APPLY */,
                path: path.map((p) => p.toString()),
                argumentList,
            }, transferables).then(fromWireValue);
        },
        construct(_target, rawArgumentList) {
            throwIfProxyReleased(isProxyReleased);
            const [argumentList, transferables] = processArguments(rawArgumentList);
            return requestResponseMessage(ep, {
                type: "CONSTRUCT" /* MessageType.CONSTRUCT */,
                path: path.map((p) => p.toString()),
                argumentList,
            }, transferables).then(fromWireValue);
        },
    });
    registerProxy(proxy, ep);
    return proxy;
}
function myFlat(arr) {
    return Array.prototype.concat.apply([], arr);
}
function processArguments(argumentList) {
    const processed = argumentList.map(toWireValue);
    return [processed.map((v) => v[0]), myFlat(processed.map((v) => v[1]))];
}
const transferCache = new WeakMap();
function transfer(obj, transfers) {
    transferCache.set(obj, transfers);
    return obj;
}
function proxy(obj) {
    return Object.assign(obj, { [proxyMarker]: true });
}
function windowEndpoint(w, context = globalThis, targetOrigin = "*") {
    return {
        postMessage: (msg, transferables) => w.postMessage(msg, targetOrigin, transferables),
        addEventListener: context.addEventListener.bind(context),
        removeEventListener: context.removeEventListener.bind(context),
    };
}
function toWireValue(value) {
    for (const [name, handler] of transferHandlers) {
        if (handler.canHandle(value)) {
            const [serializedValue, transferables] = handler.serialize(value);
            return [
                {
                    type: "HANDLER" /* WireValueType.HANDLER */,
                    name,
                    value: serializedValue,
                },
                transferables,
            ];
        }
    }
    return [
        {
            type: "RAW" /* WireValueType.RAW */,
            value,
        },
        transferCache.get(value) || [],
    ];
}
function fromWireValue(value) {
    switch (value.type) {
        case "HANDLER" /* WireValueType.HANDLER */:
            return transferHandlers.get(value.name).deserialize(value.value);
        case "RAW" /* WireValueType.RAW */:
            return value.value;
    }
}
function requestResponseMessage(ep, msg, transfers) {
    return new Promise((resolve) => {
        const id = generateUUID();
        ep.addEventListener("message", function l(ev) {
            if (!ev.data || !ev.data.id || ev.data.id !== id) {
                return;
            }
            ep.removeEventListener("message", l);
            resolve(ev.data);
        });
        if (ep.start) {
            ep.start();
        }
        ep.postMessage(Object.assign({ id }, msg), transfers);
    });
}
function generateUUID() {
    return new Array(4)
        .fill(0)
        .map(() => Math.floor(Math.random() * Number.MAX_SAFE_INTEGER).toString(16))
        .join("-");
}


//# sourceMappingURL=comlink.mjs.map


/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
var __webpack_exports__ = {};
// This entry need to be wrapped in an IIFE because it need to be in strict mode.
(() => {
"use strict";
/*!****************************!*\
  !*** ./src/wasm.worker.js ***!
  \****************************/
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var comlink__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! comlink */ "./node_modules/comlink/dist/esm/comlink.mjs");
/* harmony import */ var _ltbl_occt_opencascade_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./../ltbl-occt/opencascade.js */ "./ltbl-occt/opencascade.js");
/* harmony import */ var _ltbl_occt_ltbl_occt_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./../ltbl-occt/ltbl-occt.js */ "./ltbl-occt/ltbl-occt.js");
/* harmony import */ var _ltbl_occt_ltbl_occt_wasm__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./../ltbl-occt/ltbl-occt.wasm */ "./ltbl-occt/ltbl-occt.wasm");
/* harmony import */ var _common_createPromise__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./common/createPromise */ "./src/common/createPromise.js");
/* harmony import */ var _csg_csgNodeCalculator__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./csg/csgNodeCalculator */ "./src/csg/csgNodeCalculator.js");
/* harmony import */ var _commands_commandExecutor__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./commands/commandExecutor */ "./src/commands/commandExecutor.ts");
/* harmony import */ var _common_fonts__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./common/fonts */ "./src/common/fonts.js");
/* harmony import */ var _common_geometry_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./common/geometry.js */ "./src/common/geometry.js");




// import initOpenCascade from "./occt/ltbl-occt.js"; // this will not work because the hardcoded paths are not avail when bundled via webpack... and regular imports would not work if not using webpack...









let nodeCalculator = new _csg_csgNodeCalculator__WEBPACK_IMPORTED_MODULE_4__["default"](_common_geometry_js__WEBPACK_IMPORTED_MODULE_7__["default"]);
let commandExecutor = new _commands_commandExecutor__WEBPACK_IMPORTED_MODULE_5__.CommandExecutor(_common_geometry_js__WEBPACK_IMPORTED_MODULE_7__["default"], nodeCalculator);

const api = {
    initOCCT: function()
    {
        console.log("loading fonts ...");
        _common_fonts__WEBPACK_IMPORTED_MODULE_6__["default"].loadFonts();
        console.log("... ok");
        
        return (0,_ltbl_occt_opencascade_js__WEBPACK_IMPORTED_MODULE_0__["default"])({
            mainJS: _ltbl_occt_ltbl_occt_js__WEBPACK_IMPORTED_MODULE_1__["default"],
            mainWasm: _ltbl_occt_ltbl_occt_wasm__WEBPACK_IMPORTED_MODULE_2__["default"],
        }).then(oc => {
            console.log("oc : "+ oc);
            
            let ocstr = oc.toString();
            console.log("initialized ocstr: "+ ocstr);

            _common_geometry_js__WEBPACK_IMPORTED_MODULE_7__["default"].setOpenCascade(oc);
            
            return { status: "initialized", oc:  ocstr};
        }).catch(error => {
            // Handle error and return a serializable error object
            console.error('Error initializing OpenCascade:', error);
            return { status: "error", message: error.message };
        });
    },

    calculateNodeResult: function(nodeJson)
    {
        // console.log("calculateNode called, nodeJson: "+ nodeJson)
        return nodeCalculator.calculateNodeResult(nodeJson);
    },

    executeCommandJson: function(commandJson)
    {
        // console.log("executeCommandJson called, commandJson: "+ nodeJson)
        return commandExecutor.executeCommandJson(commandJson);
    }
}

;(0,comlink__WEBPACK_IMPORTED_MODULE_8__.expose)(api);
})();

/******/ })()
;
//# sourceMappingURL=geometry.web.worker.js.map